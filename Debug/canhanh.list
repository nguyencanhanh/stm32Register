
canhanh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f58  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08003068  08003068  00013068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003188  08003188  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08003188  08003188  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003188  08003188  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003188  08003188  00013188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800318c  0800318c  0001318c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000104c  2000007c  0800320c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010c8  0800320c  000210c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000952a  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c5a  00000000  00000000  000295cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  0002b230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000678  00000000  00000000  0002b9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190a9  00000000  00000000  0002c038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ef8  00000000  00000000  000450e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088cb4  00000000  00000000  0004efd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7c8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023d8  00000000  00000000  000d7ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003050 	.word	0x08003050

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08003050 	.word	0x08003050

08000150 <ADC1_Configure>:
 *      Author: nguye
 */
#include "ADC_Configure.h"
#include "stm32f1xx.h"

void ADC1_Configure(uint8_t* chanel, uint8_t cycle, uint8_t lenght){
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
 8000158:	460b      	mov	r3, r1
 800015a:	70fb      	strb	r3, [r7, #3]
 800015c:	4613      	mov	r3, r2
 800015e:	70bb      	strb	r3, [r7, #2]
	uint8_t count = 0;
 8000160:	2300      	movs	r3, #0
 8000162:	73fb      	strb	r3, [r7, #15]
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000164:	4b34      	ldr	r3, [pc, #208]	; (8000238 <ADC1_Configure+0xe8>)
 8000166:	699b      	ldr	r3, [r3, #24]
 8000168:	4a33      	ldr	r2, [pc, #204]	; (8000238 <ADC1_Configure+0xe8>)
 800016a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800016e:	6193      	str	r3, [r2, #24]
	ADC1->CR2 |= ADC_CR2_ADON;
 8000170:	4b32      	ldr	r3, [pc, #200]	; (800023c <ADC1_Configure+0xec>)
 8000172:	689b      	ldr	r3, [r3, #8]
 8000174:	4a31      	ldr	r2, [pc, #196]	; (800023c <ADC1_Configure+0xec>)
 8000176:	f043 0301 	orr.w	r3, r3, #1
 800017a:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_CONT;
 800017c:	4b2f      	ldr	r3, [pc, #188]	; (800023c <ADC1_Configure+0xec>)
 800017e:	689b      	ldr	r3, [r3, #8]
 8000180:	4a2e      	ldr	r2, [pc, #184]	; (800023c <ADC1_Configure+0xec>)
 8000182:	f043 0302 	orr.w	r3, r3, #2
 8000186:	6093      	str	r3, [r2, #8]
	ADC1->CR1 |= ADC_CR1_SCAN;
 8000188:	4b2c      	ldr	r3, [pc, #176]	; (800023c <ADC1_Configure+0xec>)
 800018a:	685b      	ldr	r3, [r3, #4]
 800018c:	4a2b      	ldr	r2, [pc, #172]	; (800023c <ADC1_Configure+0xec>)
 800018e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000192:	6053      	str	r3, [r2, #4]
	ADC1->SQR1 |= ((lenght-1) << 20);
 8000194:	4b29      	ldr	r3, [pc, #164]	; (800023c <ADC1_Configure+0xec>)
 8000196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000198:	78ba      	ldrb	r2, [r7, #2]
 800019a:	3a01      	subs	r2, #1
 800019c:	0512      	lsls	r2, r2, #20
 800019e:	4611      	mov	r1, r2
 80001a0:	4a26      	ldr	r2, [pc, #152]	; (800023c <ADC1_Configure+0xec>)
 80001a2:	430b      	orrs	r3, r1
 80001a4:	62d3      	str	r3, [r2, #44]	; 0x2c
	for(int i = 0; i < lenght; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	60bb      	str	r3, [r7, #8]
 80001aa:	e023      	b.n	80001f4 <ADC1_Configure+0xa4>
		ADC1->SQR3 |= (chanel[i] << count);
 80001ac:	4b23      	ldr	r3, [pc, #140]	; (800023c <ADC1_Configure+0xec>)
 80001ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001b0:	68ba      	ldr	r2, [r7, #8]
 80001b2:	6879      	ldr	r1, [r7, #4]
 80001b4:	440a      	add	r2, r1
 80001b6:	7812      	ldrb	r2, [r2, #0]
 80001b8:	4611      	mov	r1, r2
 80001ba:	7bfa      	ldrb	r2, [r7, #15]
 80001bc:	fa01 f202 	lsl.w	r2, r1, r2
 80001c0:	4611      	mov	r1, r2
 80001c2:	4a1e      	ldr	r2, [pc, #120]	; (800023c <ADC1_Configure+0xec>)
 80001c4:	430b      	orrs	r3, r1
 80001c6:	6353      	str	r3, [r2, #52]	; 0x34
		ADC1->SMPR2 |= (cycle << (chanel[i]*3));
 80001c8:	4b1c      	ldr	r3, [pc, #112]	; (800023c <ADC1_Configure+0xec>)
 80001ca:	691a      	ldr	r2, [r3, #16]
 80001cc:	78f9      	ldrb	r1, [r7, #3]
 80001ce:	68bb      	ldr	r3, [r7, #8]
 80001d0:	6878      	ldr	r0, [r7, #4]
 80001d2:	4403      	add	r3, r0
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	4618      	mov	r0, r3
 80001d8:	4603      	mov	r3, r0
 80001da:	005b      	lsls	r3, r3, #1
 80001dc:	4403      	add	r3, r0
 80001de:	fa01 f303 	lsl.w	r3, r1, r3
 80001e2:	4916      	ldr	r1, [pc, #88]	; (800023c <ADC1_Configure+0xec>)
 80001e4:	4313      	orrs	r3, r2
 80001e6:	610b      	str	r3, [r1, #16]
		count+=5;
 80001e8:	7bfb      	ldrb	r3, [r7, #15]
 80001ea:	3305      	adds	r3, #5
 80001ec:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght; i++){
 80001ee:	68bb      	ldr	r3, [r7, #8]
 80001f0:	3301      	adds	r3, #1
 80001f2:	60bb      	str	r3, [r7, #8]
 80001f4:	78bb      	ldrb	r3, [r7, #2]
 80001f6:	68ba      	ldr	r2, [r7, #8]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	dbd7      	blt.n	80001ac <ADC1_Configure+0x5c>
	}
	ADC1->CR2 |= (1 << 2);
 80001fc:	4b0f      	ldr	r3, [pc, #60]	; (800023c <ADC1_Configure+0xec>)
 80001fe:	689b      	ldr	r3, [r3, #8]
 8000200:	4a0e      	ldr	r2, [pc, #56]	; (800023c <ADC1_Configure+0xec>)
 8000202:	f043 0304 	orr.w	r3, r3, #4
 8000206:	6093      	str	r3, [r2, #8]
	while((ADC1->CR2 & (1 << 2)) != 0);
 8000208:	bf00      	nop
 800020a:	4b0c      	ldr	r3, [pc, #48]	; (800023c <ADC1_Configure+0xec>)
 800020c:	689b      	ldr	r3, [r3, #8]
 800020e:	f003 0304 	and.w	r3, r3, #4
 8000212:	2b00      	cmp	r3, #0
 8000214:	d1f9      	bne.n	800020a <ADC1_Configure+0xba>
	ADC1->CR2 |= (1 << 0);
 8000216:	4b09      	ldr	r3, [pc, #36]	; (800023c <ADC1_Configure+0xec>)
 8000218:	689b      	ldr	r3, [r3, #8]
 800021a:	4a08      	ldr	r2, [pc, #32]	; (800023c <ADC1_Configure+0xec>)
 800021c:	f043 0301 	orr.w	r3, r3, #1
 8000220:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (1 << 22);
 8000222:	4b06      	ldr	r3, [pc, #24]	; (800023c <ADC1_Configure+0xec>)
 8000224:	689b      	ldr	r3, [r3, #8]
 8000226:	4a05      	ldr	r2, [pc, #20]	; (800023c <ADC1_Configure+0xec>)
 8000228:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800022c:	6093      	str	r3, [r2, #8]
}
 800022e:	bf00      	nop
 8000230:	3714      	adds	r7, #20
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	40021000 	.word	0x40021000
 800023c:	40012400 	.word	0x40012400

08000240 <DMA_ConfigureADC>:
 */

#include <DMA/DMA_Configure.h>
#include "stm32f1xx.h"

void DMA_ConfigureADC(uint32_t *buffer, uint8_t numberOfChannels) {
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	460b      	mov	r3, r1
 800024a:	70fb      	strb	r3, [r7, #3]
    RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 800024c:	4b13      	ldr	r3, [pc, #76]	; (800029c <DMA_ConfigureADC+0x5c>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	4a12      	ldr	r2, [pc, #72]	; (800029c <DMA_ConfigureADC+0x5c>)
 8000252:	f043 0301 	orr.w	r3, r3, #1
 8000256:	6153      	str	r3, [r2, #20]

    DMA1_Channel1->CPAR = (uint32_t)(&(ADC1->DR));
 8000258:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <DMA_ConfigureADC+0x60>)
 800025a:	4a12      	ldr	r2, [pc, #72]	; (80002a4 <DMA_ConfigureADC+0x64>)
 800025c:	609a      	str	r2, [r3, #8]
    DMA1_Channel1->CMAR = (uint32_t)(buffer);
 800025e:	4a10      	ldr	r2, [pc, #64]	; (80002a0 <DMA_ConfigureADC+0x60>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	60d3      	str	r3, [r2, #12]
    DMA1_Channel1->CNDTR = numberOfChannels;
 8000264:	4a0e      	ldr	r2, [pc, #56]	; (80002a0 <DMA_ConfigureADC+0x60>)
 8000266:	78fb      	ldrb	r3, [r7, #3]
 8000268:	6053      	str	r3, [r2, #4]
    DMA1_Channel1->CCR |= DMA_CCR_PSIZE_0 | DMA_CCR_MSIZE_0 | DMA_CCR_MINC | DMA_CCR_CIRC | DMA_CCR_EN;
 800026a:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <DMA_ConfigureADC+0x60>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a0c      	ldr	r2, [pc, #48]	; (80002a0 <DMA_ConfigureADC+0x60>)
 8000270:	f443 63b4 	orr.w	r3, r3, #1440	; 0x5a0
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	6013      	str	r3, [r2, #0]
    ADC1->CR2 |= ADC_CR2_DMA;
 800027a:	4b0b      	ldr	r3, [pc, #44]	; (80002a8 <DMA_ConfigureADC+0x68>)
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	4a0a      	ldr	r2, [pc, #40]	; (80002a8 <DMA_ConfigureADC+0x68>)
 8000280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000284:	6093      	str	r3, [r2, #8]
    DMA1_Channel1->CCR |= DMA_CCR_EN;
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <DMA_ConfigureADC+0x60>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a05      	ldr	r2, [pc, #20]	; (80002a0 <DMA_ConfigureADC+0x60>)
 800028c:	f043 0301 	orr.w	r3, r3, #1
 8000290:	6013      	str	r3, [r2, #0]
}
 8000292:	bf00      	nop
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr
 800029c:	40021000 	.word	0x40021000
 80002a0:	40020008 	.word	0x40020008
 80002a4:	4001244c 	.word	0x4001244c
 80002a8:	40012400 	.word	0x40012400

080002ac <GPIO_configureRCC>:
 *  Created on: Jun 5, 2023
 *      Author: nguye
 */
#include "GPIO_configure.h"

void GPIO_configureRCC(char* GPIOx){
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	while(*GPIOx){
 80002b4:	e020      	b.n	80002f8 <GPIO_configureRCC+0x4c>
		if(*GPIOx == 'C') RCC->APB2ENR |= (1 << 4);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2b43      	cmp	r3, #67	; 0x43
 80002bc:	d105      	bne.n	80002ca <GPIO_configureRCC+0x1e>
 80002be:	4b13      	ldr	r3, [pc, #76]	; (800030c <GPIO_configureRCC+0x60>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	4a12      	ldr	r2, [pc, #72]	; (800030c <GPIO_configureRCC+0x60>)
 80002c4:	f043 0310 	orr.w	r3, r3, #16
 80002c8:	6193      	str	r3, [r2, #24]
		if(*GPIOx == 'B') RCC->APB2ENR |= (1 << 3);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	2b42      	cmp	r3, #66	; 0x42
 80002d0:	d105      	bne.n	80002de <GPIO_configureRCC+0x32>
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <GPIO_configureRCC+0x60>)
 80002d4:	699b      	ldr	r3, [r3, #24]
 80002d6:	4a0d      	ldr	r2, [pc, #52]	; (800030c <GPIO_configureRCC+0x60>)
 80002d8:	f043 0308 	orr.w	r3, r3, #8
 80002dc:	6193      	str	r3, [r2, #24]
		if(*GPIOx == 'A') RCC->APB2ENR |= (1 << 2);
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	2b41      	cmp	r3, #65	; 0x41
 80002e4:	d105      	bne.n	80002f2 <GPIO_configureRCC+0x46>
 80002e6:	4b09      	ldr	r3, [pc, #36]	; (800030c <GPIO_configureRCC+0x60>)
 80002e8:	699b      	ldr	r3, [r3, #24]
 80002ea:	4a08      	ldr	r2, [pc, #32]	; (800030c <GPIO_configureRCC+0x60>)
 80002ec:	f043 0304 	orr.w	r3, r3, #4
 80002f0:	6193      	str	r3, [r2, #24]
		GPIOx++;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	3301      	adds	r3, #1
 80002f6:	607b      	str	r3, [r7, #4]
	while(*GPIOx){
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d1da      	bne.n	80002b6 <GPIO_configureRCC+0xa>
	}
}
 8000300:	bf00      	nop
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr
 800030c:	40021000 	.word	0x40021000

08000310 <GPIO_configure>:
void GPIO_configure(GPIO_TypeDef*GPIOx, uint8_t* Pin, uint8_t* mode){
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
	while(*Pin){
 800031c:	e03e      	b.n	800039c <GPIO_configure+0x8c>
		if(*Pin > 7){
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b07      	cmp	r3, #7
 8000324:	d91b      	bls.n	800035e <GPIO_configure+0x4e>
			GPIOx->CRH &= ~(15<<(*Pin * 4 - 32));
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	68ba      	ldr	r2, [r7, #8]
 800032c:	7812      	ldrb	r2, [r2, #0]
 800032e:	3a08      	subs	r2, #8
 8000330:	0092      	lsls	r2, r2, #2
 8000332:	210f      	movs	r1, #15
 8000334:	fa01 f202 	lsl.w	r2, r1, r2
 8000338:	43d2      	mvns	r2, r2
 800033a:	401a      	ands	r2, r3
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	605a      	str	r2, [r3, #4]
			GPIOx->CRH |= *mode << (*Pin * 4 - 32);
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	7812      	ldrb	r2, [r2, #0]
 8000348:	4611      	mov	r1, r2
 800034a:	68ba      	ldr	r2, [r7, #8]
 800034c:	7812      	ldrb	r2, [r2, #0]
 800034e:	3a08      	subs	r2, #8
 8000350:	0092      	lsls	r2, r2, #2
 8000352:	fa01 f202 	lsl.w	r2, r1, r2
 8000356:	431a      	orrs	r2, r3
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	e018      	b.n	8000390 <GPIO_configure+0x80>
		}else{
			GPIOx->CRL &= ~(15<<(*Pin * 4));
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	68ba      	ldr	r2, [r7, #8]
 8000364:	7812      	ldrb	r2, [r2, #0]
 8000366:	0092      	lsls	r2, r2, #2
 8000368:	210f      	movs	r1, #15
 800036a:	fa01 f202 	lsl.w	r2, r1, r2
 800036e:	43d2      	mvns	r2, r2
 8000370:	401a      	ands	r2, r3
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	601a      	str	r2, [r3, #0]
			GPIOx->CRL |= *mode << (*Pin * 4);
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	7812      	ldrb	r2, [r2, #0]
 800037e:	4611      	mov	r1, r2
 8000380:	68ba      	ldr	r2, [r7, #8]
 8000382:	7812      	ldrb	r2, [r2, #0]
 8000384:	0092      	lsls	r2, r2, #2
 8000386:	fa01 f202 	lsl.w	r2, r1, r2
 800038a:	431a      	orrs	r2, r3
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	601a      	str	r2, [r3, #0]
		}
		Pin++;
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	3301      	adds	r3, #1
 8000394:	60bb      	str	r3, [r7, #8]
		mode++;
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	3301      	adds	r3, #1
 800039a:	607b      	str	r3, [r7, #4]
	while(*Pin){
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1bc      	bne.n	800031e <GPIO_configure+0xe>
	}
}
 80003a4:	bf00      	nop
 80003a6:	bf00      	nop
 80003a8:	3714      	adds	r7, #20
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr

080003b0 <RCC_Configure>:
 *      Author: nguye
 */
#include "stm32f103.h"
#include "stm32f1xx.h"

void RCC_Configure(){
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON;
 80003b4:	4b27      	ldr	r3, [pc, #156]	; (8000454 <RCC_Configure+0xa4>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a26      	ldr	r2, [pc, #152]	; (8000454 <RCC_Configure+0xa4>)
 80003ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003be:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 80003c0:	bf00      	nop
 80003c2:	4b24      	ldr	r3, [pc, #144]	; (8000454 <RCC_Configure+0xa4>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d0f9      	beq.n	80003c2 <RCC_Configure+0x12>

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003ce:	4b21      	ldr	r3, [pc, #132]	; (8000454 <RCC_Configure+0xa4>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	4a20      	ldr	r2, [pc, #128]	; (8000454 <RCC_Configure+0xa4>)
 80003d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d8:	61d3      	str	r3, [r2, #28]

	FLASH->ACR |= FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 80003da:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <RCC_Configure+0xa8>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a1e      	ldr	r2, [pc, #120]	; (8000458 <RCC_Configure+0xa8>)
 80003e0:	f043 0312 	orr.w	r3, r3, #18
 80003e4:	6013      	str	r3, [r2, #0]
	while (!(FLASH->ACR & FLASH_ACR_PRFTBS));
 80003e6:	bf00      	nop
 80003e8:	4b1b      	ldr	r3, [pc, #108]	; (8000458 <RCC_Configure+0xa8>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f003 0320 	and.w	r3, r3, #32
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d0f9      	beq.n	80003e8 <RCC_Configure+0x38>

	RCC->CFGR |= RCC_CFGR_PLLSRC;
 80003f4:	4b17      	ldr	r3, [pc, #92]	; (8000454 <RCC_Configure+0xa4>)
 80003f6:	685b      	ldr	r3, [r3, #4]
 80003f8:	4a16      	ldr	r2, [pc, #88]	; (8000454 <RCC_Configure+0xa4>)
 80003fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003fe:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (7 << 18); // nhân RCC với 9
 8000400:	4b14      	ldr	r3, [pc, #80]	; (8000454 <RCC_Configure+0xa4>)
 8000402:	685b      	ldr	r3, [r3, #4]
 8000404:	4a13      	ldr	r2, [pc, #76]	; (8000454 <RCC_Configure+0xa4>)
 8000406:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800040a:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (4 << 8); // chia để bus APB1 max 36
 800040c:	4b11      	ldr	r3, [pc, #68]	; (8000454 <RCC_Configure+0xa4>)
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	4a10      	ldr	r2, [pc, #64]	; (8000454 <RCC_Configure+0xa4>)
 8000412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000416:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (3 << 14); // chia ADC cho 6 = 9M
 8000418:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <RCC_Configure+0xa4>)
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	4a0d      	ldr	r2, [pc, #52]	; (8000454 <RCC_Configure+0xa4>)
 800041e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000422:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 8000424:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <RCC_Configure+0xa4>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a0a      	ldr	r2, [pc, #40]	; (8000454 <RCC_Configure+0xa4>)
 800042a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800042e:	6013      	str	r3, [r2, #0]

	RCC->CFGR |= (2 << 0);
 8000430:	4b08      	ldr	r3, [pc, #32]	; (8000454 <RCC_Configure+0xa4>)
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	4a07      	ldr	r2, [pc, #28]	; (8000454 <RCC_Configure+0xa4>)
 8000436:	f043 0302 	orr.w	r3, r3, #2
 800043a:	6053      	str	r3, [r2, #4]
	while (!(RCC->CFGR & (2 << 2)));
 800043c:	bf00      	nop
 800043e:	4b05      	ldr	r3, [pc, #20]	; (8000454 <RCC_Configure+0xa4>)
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	f003 0308 	and.w	r3, r3, #8
 8000446:	2b00      	cmp	r3, #0
 8000448:	d0f9      	beq.n	800043e <RCC_Configure+0x8e>
}
 800044a:	bf00      	nop
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	40021000 	.word	0x40021000
 8000458:	40022000 	.word	0x40022000

0800045c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800046a:	2b00      	cmp	r3, #0
 800046c:	db0b      	blt.n	8000486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	f003 021f 	and.w	r2, r3, #31
 8000474:	4906      	ldr	r1, [pc, #24]	; (8000490 <__NVIC_EnableIRQ+0x34>)
 8000476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800047a:	095b      	lsrs	r3, r3, #5
 800047c:	2001      	movs	r0, #1
 800047e:	fa00 f202 	lsl.w	r2, r0, r2
 8000482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000486:	bf00      	nop
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr
 8000490:	e000e100 	.word	0xe000e100

08000494 <TIM2_Configure>:
 */

#include "TIM_Configure.h"
#include "stm32f1xx.h"

void TIM2_Configure(uint16_t PSC, uint32_t ARR){
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	6039      	str	r1, [r7, #0]
 800049e:	80fb      	strh	r3, [r7, #6]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <TIM2_Configure+0x54>)
 80004a2:	69db      	ldr	r3, [r3, #28]
 80004a4:	4a10      	ldr	r2, [pc, #64]	; (80004e8 <TIM2_Configure+0x54>)
 80004a6:	f043 0301 	orr.w	r3, r3, #1
 80004aa:	61d3      	str	r3, [r2, #28]
	TIM2->PSC = PSC;
 80004ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004b0:	88fb      	ldrh	r3, [r7, #6]
 80004b2:	6293      	str	r3, [r2, #40]	; 0x28
	TIM2->ARR = ARR;
 80004b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CR1 |= (1 << 0);
 80004bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004c6:	f043 0301 	orr.w	r3, r3, #1
 80004ca:	6013      	str	r3, [r2, #0]
	while (!(TIM2->SR & TIM_SR_UIF));
 80004cc:	bf00      	nop
 80004ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004d2:	691b      	ldr	r3, [r3, #16]
 80004d4:	f003 0301 	and.w	r3, r3, #1
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0f8      	beq.n	80004ce <TIM2_Configure+0x3a>
}
 80004dc:	bf00      	nop
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	40021000 	.word	0x40021000

080004ec <TIM4_Configure>:
	TIM1->PSC = PSC;
	TIM1->ARR = ARR;
	TIM1->CR1 |= (1 << 0);
	while (!(TIM1->SR & TIM_SR_UIF));
}
void TIM4_Configure(uint16_t PSC, uint32_t ARR){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	6039      	str	r1, [r7, #0]
 80004f6:	80fb      	strh	r3, [r7, #6]
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80004f8:	4b15      	ldr	r3, [pc, #84]	; (8000550 <TIM4_Configure+0x64>)
 80004fa:	69db      	ldr	r3, [r3, #28]
 80004fc:	4a14      	ldr	r2, [pc, #80]	; (8000550 <TIM4_Configure+0x64>)
 80004fe:	f043 0304 	orr.w	r3, r3, #4
 8000502:	61d3      	str	r3, [r2, #28]
	TIM4->PSC = PSC;
 8000504:	4a13      	ldr	r2, [pc, #76]	; (8000554 <TIM4_Configure+0x68>)
 8000506:	88fb      	ldrh	r3, [r7, #6]
 8000508:	6293      	str	r3, [r2, #40]	; 0x28
	TIM4->ARR = ARR;
 800050a:	4a12      	ldr	r2, [pc, #72]	; (8000554 <TIM4_Configure+0x68>)
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM4->DIER |= TIM_DIER_UIE;
 8000510:	4b10      	ldr	r3, [pc, #64]	; (8000554 <TIM4_Configure+0x68>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	4a0f      	ldr	r2, [pc, #60]	; (8000554 <TIM4_Configure+0x68>)
 8000516:	f043 0301 	orr.w	r3, r3, #1
 800051a:	60d3      	str	r3, [r2, #12]
	TIM4->CR1 |= TIM_CR1_ARPE | TIM_CR1_URS;
 800051c:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <TIM4_Configure+0x68>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <TIM4_Configure+0x68>)
 8000522:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8000526:	6013      	str	r3, [r2, #0]
	TIM4->EGR |= TIM_EGR_UG;
 8000528:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <TIM4_Configure+0x68>)
 800052a:	695b      	ldr	r3, [r3, #20]
 800052c:	4a09      	ldr	r2, [pc, #36]	; (8000554 <TIM4_Configure+0x68>)
 800052e:	f043 0301 	orr.w	r3, r3, #1
 8000532:	6153      	str	r3, [r2, #20]
	NVIC_EnableIRQ(TIM4_IRQn);
 8000534:	201e      	movs	r0, #30
 8000536:	f7ff ff91 	bl	800045c <__NVIC_EnableIRQ>
	TIM4->CR1 |= TIM_CR1_CEN;
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <TIM4_Configure+0x68>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a05      	ldr	r2, [pc, #20]	; (8000554 <TIM4_Configure+0x68>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6013      	str	r3, [r2, #0]
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000
 8000554:	40000800 	.word	0x40000800

08000558 <delay_us2>:
void delay_us2(uint16_t us){
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	80fb      	strh	r3, [r7, #6]
	TIM2->CNT = 0;
 8000562:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000566:	2200      	movs	r2, #0
 8000568:	625a      	str	r2, [r3, #36]	; 0x24
	while (TIM2->CNT < us);
 800056a:	bf00      	nop
 800056c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000572:	88fb      	ldrh	r3, [r7, #6]
 8000574:	429a      	cmp	r2, r3
 8000576:	d3f9      	bcc.n	800056c <delay_us2+0x14>
}
 8000578:	bf00      	nop
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <delay_ms2>:
void delay_us1(uint16_t us){
	TIM1->CNT = 0;
	while (TIM1->CNT < us);
}
void delay_ms2(uint16_t ms){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	80fb      	strh	r3, [r7, #6]
	while (ms--){
 800058e:	e003      	b.n	8000598 <delay_ms2+0x14>
		delay_us2(1000);
 8000590:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000594:	f7ff ffe0 	bl	8000558 <delay_us2>
	while (ms--){
 8000598:	88fb      	ldrh	r3, [r7, #6]
 800059a:	1e5a      	subs	r2, r3, #1
 800059c:	80fa      	strh	r2, [r7, #6]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1f6      	bne.n	8000590 <delay_ms2+0xc>
	}
}
 80005a2:	bf00      	nop
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <__NVIC_EnableIRQ>:
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db0b      	blt.n	80005d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	f003 021f 	and.w	r2, r3, #31
 80005c4:	4906      	ldr	r1, [pc, #24]	; (80005e0 <__NVIC_EnableIRQ+0x34>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	095b      	lsrs	r3, r3, #5
 80005cc:	2001      	movs	r0, #1
 80005ce:	fa00 f202 	lsl.w	r2, r0, r2
 80005d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr
 80005e0:	e000e100 	.word	0xe000e100

080005e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	6039      	str	r1, [r7, #0]
 80005ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	db0a      	blt.n	800060e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	490c      	ldr	r1, [pc, #48]	; (8000630 <__NVIC_SetPriority+0x4c>)
 80005fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000602:	0112      	lsls	r2, r2, #4
 8000604:	b2d2      	uxtb	r2, r2
 8000606:	440b      	add	r3, r1
 8000608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800060c:	e00a      	b.n	8000624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	b2da      	uxtb	r2, r3
 8000612:	4908      	ldr	r1, [pc, #32]	; (8000634 <__NVIC_SetPriority+0x50>)
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	f003 030f 	and.w	r3, r3, #15
 800061a:	3b04      	subs	r3, #4
 800061c:	0112      	lsls	r2, r2, #4
 800061e:	b2d2      	uxtb	r2, r2
 8000620:	440b      	add	r3, r1
 8000622:	761a      	strb	r2, [r3, #24]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000e100 	.word	0xe000e100
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <UART_Configure>:
 */

#include "UART_Configure.h"
#include "stm32f1xx.h"

void UART_Configure(void){
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <UART_Configure+0x94>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a22      	ldr	r2, [pc, #136]	; (80006cc <UART_Configure+0x94>)
 8000642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000646:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= 0xFFFFFF0F;
 8000648:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <UART_Configure+0x98>)
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	4a20      	ldr	r2, [pc, #128]	; (80006d0 <UART_Configure+0x98>)
 800064e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000652:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (11 << 4);  //TX PA9
 8000654:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <UART_Configure+0x98>)
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	4a1d      	ldr	r2, [pc, #116]	; (80006d0 <UART_Configure+0x98>)
 800065a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800065e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= 0xFFFFF0FF;
 8000660:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <UART_Configure+0x98>)
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	4a1a      	ldr	r2, [pc, #104]	; (80006d0 <UART_Configure+0x98>)
 8000666:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800066a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (1 << 10); //RX PA10
 800066c:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <UART_Configure+0x98>)
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <UART_Configure+0x98>)
 8000672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000676:	6053      	str	r3, [r2, #4]
	GPIOA->CRL &= 0xFFFF0FFF;
 8000678:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <UART_Configure+0x98>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <UART_Configure+0x98>)
 800067e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000682:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (2 << 12);
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <UART_Configure+0x98>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a11      	ldr	r2, [pc, #68]	; (80006d0 <UART_Configure+0x98>)
 800068a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800068e:	6013      	str	r3, [r2, #0]
	/* UART configure */
	USART1->BRR |= (39 << 4) | (1 << 0);
 8000690:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <UART_Configure+0x9c>)
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	4a0f      	ldr	r2, [pc, #60]	; (80006d4 <UART_Configure+0x9c>)
 8000696:	f443 731c 	orr.w	r3, r3, #624	; 0x270
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	6093      	str	r3, [r2, #8]
	USART1->CR1 |= (1 << 2) | (1 << 3) | (1 << 5) ;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <UART_Configure+0x9c>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <UART_Configure+0x9c>)
 80006a6:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 80006aa:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART1_IRQn);
 80006ac:	2025      	movs	r0, #37	; 0x25
 80006ae:	f7ff ff7d 	bl	80005ac <__NVIC_EnableIRQ>
	NVIC_SetPriority(USART1_IRQn, 1);
 80006b2:	2101      	movs	r1, #1
 80006b4:	2025      	movs	r0, #37	; 0x25
 80006b6:	f7ff ff95 	bl	80005e4 <__NVIC_SetPriority>
	USART1->CR1 |= (1 << 13);
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <UART_Configure+0x9c>)
 80006bc:	68db      	ldr	r3, [r3, #12]
 80006be:	4a05      	ldr	r2, [pc, #20]	; (80006d4 <UART_Configure+0x9c>)
 80006c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006c4:	60d3      	str	r3, [r2, #12]
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40010800 	.word	0x40010800
 80006d4:	40013800 	.word	0x40013800

080006d8 <UART_SendData>:
void UART_SendData(char* str){
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	while (*str){
 80006e0:	e00d      	b.n	80006fe <UART_SendData+0x26>
		while (!(USART1->SR & (1 << 7)));
 80006e2:	bf00      	nop
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <UART_SendData+0x48>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d0f9      	beq.n	80006e4 <UART_SendData+0xc>
		USART1->DR = *str;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	781a      	ldrb	r2, [r3, #0]
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <UART_SendData+0x48>)
 80006f6:	605a      	str	r2, [r3, #4]
		str++;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3301      	adds	r3, #1
 80006fc:	607b      	str	r3, [r7, #4]
	while (*str){
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d1ed      	bne.n	80006e2 <UART_SendData+0xa>
	}
	while (!(USART1->SR & (1 << 6)));
 8000706:	bf00      	nop
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <UART_SendData+0x48>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000710:	2b00      	cmp	r3, #0
 8000712:	d0f9      	beq.n	8000708 <UART_SendData+0x30>
}
 8000714:	bf00      	nop
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	40013800 	.word	0x40013800

08000724 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	4a06      	ldr	r2, [pc, #24]	; (800074c <vApplicationGetIdleTaskMemory+0x28>)
 8000734:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	4a05      	ldr	r2, [pc, #20]	; (8000750 <vApplicationGetIdleTaskMemory+0x2c>)
 800073a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2280      	movs	r2, #128	; 0x80
 8000740:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	20000098 	.word	0x20000098
 8000750:	2000014c 	.word	0x2000014c

08000754 <__io_putchar>:
#include "UART_Configure.h"
#include "DMA_Configure.h"
#include "ADC_Configure.h"
#include "cmsis_os.h"

int __io_putchar(int ch) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
    UART_SendData((char*)&ch);
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ffba 	bl	80006d8 <UART_SendData>
    return ch;
 8000764:	687b      	ldr	r3, [r7, #4]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <main>:
uint8_t GPIOB_mode[] = {1,1};
uint8_t GPIOA_Pin[] = {3,4};
uint8_t numberADC[2] = {3,4};
uint8_t GPIOA_mode[] = {0,0};
uint16_t buffer[2];
int main(void){
 8000770:	b5b0      	push	{r4, r5, r7, lr}
 8000772:	b08e      	sub	sp, #56	; 0x38
 8000774:	af00      	add	r7, sp, #0
	RCC_Configure();
 8000776:	f7ff fe1b 	bl	80003b0 <RCC_Configure>
	TIM4_Configure(7199, 999);
 800077a:	f240 31e7 	movw	r1, #999	; 0x3e7
 800077e:	f641 401f 	movw	r0, #7199	; 0x1c1f
 8000782:	f7ff feb3 	bl	80004ec <TIM4_Configure>
	GPIO_configureRCC("AB");
 8000786:	4827      	ldr	r0, [pc, #156]	; (8000824 <main+0xb4>)
 8000788:	f7ff fd90 	bl	80002ac <GPIO_configureRCC>
	GPIO_configure((GPIO_TypeDef*)GPIOB, (uint8_t*)GPIOB_Pin ,(uint8_t*)GPIOB_mode);
 800078c:	4a26      	ldr	r2, [pc, #152]	; (8000828 <main+0xb8>)
 800078e:	4927      	ldr	r1, [pc, #156]	; (800082c <main+0xbc>)
 8000790:	4827      	ldr	r0, [pc, #156]	; (8000830 <main+0xc0>)
 8000792:	f7ff fdbd 	bl	8000310 <GPIO_configure>
	GPIO_configure((GPIO_TypeDef*)GPIOA, (uint8_t*)GPIOA_Pin ,(uint8_t*)GPIOA_mode);
 8000796:	4a27      	ldr	r2, [pc, #156]	; (8000834 <main+0xc4>)
 8000798:	4927      	ldr	r1, [pc, #156]	; (8000838 <main+0xc8>)
 800079a:	4828      	ldr	r0, [pc, #160]	; (800083c <main+0xcc>)
 800079c:	f7ff fdb8 	bl	8000310 <GPIO_configure>
	TIM2_Configure(71, 0xFFFF);
 80007a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80007a4:	2047      	movs	r0, #71	; 0x47
 80007a6:	f7ff fe75 	bl	8000494 <TIM2_Configure>
	UART_Configure();
 80007aa:	f7ff ff45 	bl	8000638 <UART_Configure>
	ADC1_Configure((uint8_t*)numberADC, 5, 2);
 80007ae:	2202      	movs	r2, #2
 80007b0:	2105      	movs	r1, #5
 80007b2:	4823      	ldr	r0, [pc, #140]	; (8000840 <main+0xd0>)
 80007b4:	f7ff fccc 	bl	8000150 <ADC1_Configure>
	DMA_ConfigureADC((uint32_t*)buffer, 2);
 80007b8:	2102      	movs	r1, #2
 80007ba:	4822      	ldr	r0, [pc, #136]	; (8000844 <main+0xd4>)
 80007bc:	f7ff fd40 	bl	8000240 <DMA_ConfigureADC>
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007c0:	4b21      	ldr	r3, [pc, #132]	; (8000848 <main+0xd8>)
 80007c2:	f107 041c 	add.w	r4, r7, #28
 80007c6:	461d      	mov	r5, r3
 80007c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 f9a3 	bl	8000b26 <osThreadCreate>
 80007e0:	4603      	mov	r3, r0
 80007e2:	4a1a      	ldr	r2, [pc, #104]	; (800084c <main+0xdc>)
 80007e4:	6013      	str	r3, [r2, #0]
	osThreadDef(task2, StartDefaultTask2, osPriorityBelowNormal, 0, 128);
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <main+0xe0>)
 80007e8:	463c      	mov	r4, r7
 80007ea:	461d      	mov	r5, r3
 80007ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	task2 = osThreadCreate(osThread(task2), NULL);
 80007f8:	463b      	mov	r3, r7
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 f992 	bl	8000b26 <osThreadCreate>
 8000802:	4603      	mov	r3, r0
 8000804:	4a13      	ldr	r2, [pc, #76]	; (8000854 <main+0xe4>)
 8000806:	6013      	str	r3, [r2, #0]
	osKernelStart();
 8000808:	f000 f986 	bl	8000b18 <osKernelStart>
	while(1){
		GPIOB->ODR^=(1<<13);
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <main+0xc0>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	4a07      	ldr	r2, [pc, #28]	; (8000830 <main+0xc0>)
 8000812:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000816:	60d3      	str	r3, [r2, #12]
//		Read_ADC1((uint16_t*)buffer, 2);
		delay_ms2(2000);
 8000818:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800081c:	f7ff feb2 	bl	8000584 <delay_ms2>
		GPIOB->ODR^=(1<<13);
 8000820:	e7f4      	b.n	800080c <main+0x9c>
 8000822:	bf00      	nop
 8000824:	0800307c 	.word	0x0800307c
 8000828:	20000004 	.word	0x20000004
 800082c:	20000000 	.word	0x20000000
 8000830:	40010c00 	.word	0x40010c00
 8000834:	20000360 	.word	0x20000360
 8000838:	20000008 	.word	0x20000008
 800083c:	40010800 	.word	0x40010800
 8000840:	2000000c 	.word	0x2000000c
 8000844:	20000364 	.word	0x20000364
 8000848:	08003080 	.word	0x08003080
 800084c:	2000034c 	.word	0x2000034c
 8000850:	0800309c 	.word	0x0800309c
 8000854:	20000350 	.word	0x20000350

08000858 <StartDefaultTask>:
	}
}
void StartDefaultTask(void const * argument)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  for(;;)
  {

	GPIOB->ODR ^= (1<<13);
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <StartDefaultTask+0x24>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	4a05      	ldr	r2, [pc, #20]	; (800087c <StartDefaultTask+0x24>)
 8000866:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800086a:	60d3      	str	r3, [r2, #12]
	printf("canhanh1\n");
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <StartDefaultTask+0x28>)
 800086e:	f001 fd8d 	bl	800238c <puts>
	osDelay(1000);
 8000872:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000876:	f000 f9a2 	bl	8000bbe <osDelay>
	GPIOB->ODR ^= (1<<13);
 800087a:	e7f1      	b.n	8000860 <StartDefaultTask+0x8>
 800087c:	40010c00 	.word	0x40010c00
 8000880:	080030b8 	.word	0x080030b8

08000884 <StartDefaultTask2>:
  }
}
void StartDefaultTask2(void const * argument)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	printf("canhanh2\n");
 800088c:	4803      	ldr	r0, [pc, #12]	; (800089c <StartDefaultTask2+0x18>)
 800088e:	f001 fd7d 	bl	800238c <puts>
    osDelay(1000);
 8000892:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000896:	f000 f992 	bl	8000bbe <osDelay>
	printf("canhanh2\n");
 800089a:	e7f7      	b.n	800088c <StartDefaultTask2+0x8>
 800089c:	080030c4 	.word	0x080030c4

080008a0 <TIM4_IRQHandler>:
  }
}
void TIM4_IRQHandler(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	if (TIM4->SR & TIM_SR_UIF) {
 80008a4:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <TIM4_IRQHandler+0x24>)
 80008a6:	691b      	ldr	r3, [r3, #16]
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d007      	beq.n	80008c0 <TIM4_IRQHandler+0x20>
		xPortSysTickHandler();
 80008b0:	f001 f90a 	bl	8001ac8 <SysTick_Handler>
		TIM4->SR &= ~TIM_SR_UIF;
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <TIM4_IRQHandler+0x24>)
 80008b6:	691b      	ldr	r3, [r3, #16]
 80008b8:	4a02      	ldr	r2, [pc, #8]	; (80008c4 <TIM4_IRQHandler+0x24>)
 80008ba:	f023 0301 	bic.w	r3, r3, #1
 80008be:	6113      	str	r3, [r2, #16]
	}
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40000800 	.word	0x40000800

080008c8 <USART1_IRQHandler>:
void USART1_IRQHandler(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
	if (USART1->SR & USART_SR_RXNE) {
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <USART1_IRQHandler+0x50>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f003 0320 	and.w	r3, r3, #32
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d01a      	beq.n	8000910 <USART1_IRQHandler+0x48>
	    char receivedChar = USART1->DR;
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <USART1_IRQHandler+0x50>)
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	71fb      	strb	r3, [r7, #7]
	    receivedData[dataIndex++] = receivedChar;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <USART1_IRQHandler+0x54>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	1c5a      	adds	r2, r3, #1
 80008e8:	b2d1      	uxtb	r1, r2
 80008ea:	4a0c      	ldr	r2, [pc, #48]	; (800091c <USART1_IRQHandler+0x54>)
 80008ec:	7011      	strb	r1, [r2, #0]
 80008ee:	4619      	mov	r1, r3
 80008f0:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <USART1_IRQHandler+0x58>)
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	5453      	strb	r3, [r2, r1]
	    if (receivedChar == '\n') {
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b0a      	cmp	r3, #10
 80008fa:	d109      	bne.n	8000910 <USART1_IRQHandler+0x48>
	      dataReceivedFlag=1;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <USART1_IRQHandler+0x5c>)
 80008fe:	2201      	movs	r2, #1
 8000900:	701a      	strb	r2, [r3, #0]
	      printf("chuoi nhan duoc la: %s\n",receivedData);
 8000902:	4907      	ldr	r1, [pc, #28]	; (8000920 <USART1_IRQHandler+0x58>)
 8000904:	4808      	ldr	r0, [pc, #32]	; (8000928 <USART1_IRQHandler+0x60>)
 8000906:	f001 fcbb 	bl	8002280 <iprintf>
	      dataIndex = 0;
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <USART1_IRQHandler+0x54>)
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
	    }
	  }
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40013800 	.word	0x40013800
 800091c:	2000035e 	.word	0x2000035e
 8000920:	20000354 	.word	0x20000354
 8000924:	2000035f 	.word	0x2000035f
 8000928:	080030d0 	.word	0x080030d0

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <NMI_Handler+0x4>

08000932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <MemManage_Handler+0x4>

0800093e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <UsageFault_Handler+0x4>

0800094a <DebugMon_Handler>:
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    /* USER CODE END W1_UsageFault_IRQn 0 */
  }
}
void DebugMon_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr

08000956 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b086      	sub	sp, #24
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	e00a      	b.n	800097e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000968:	f3af 8000 	nop.w
 800096c:	4601      	mov	r1, r0
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	1c5a      	adds	r2, r3, #1
 8000972:	60ba      	str	r2, [r7, #8]
 8000974:	b2ca      	uxtb	r2, r1
 8000976:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	3301      	adds	r3, #1
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	429a      	cmp	r2, r3
 8000984:	dbf0      	blt.n	8000968 <_read+0x12>
  }

  return len;
 8000986:	687b      	ldr	r3, [r7, #4]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	e009      	b.n	80009b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	1c5a      	adds	r2, r3, #1
 80009a6:	60ba      	str	r2, [r7, #8]
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fed2 	bl	8000754 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	3301      	adds	r3, #1
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	697a      	ldr	r2, [r7, #20]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	dbf1      	blt.n	80009a2 <_write+0x12>
  }
  return len;
 80009be:	687b      	ldr	r3, [r7, #4]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <_close>:

int _close(int file)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr

080009de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
 80009e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ee:	605a      	str	r2, [r3, #4]
  return 0;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <_isatty>:

int _isatty(int file)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a04:	2301      	movs	r3, #1
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a30:	4a14      	ldr	r2, [pc, #80]	; (8000a84 <_sbrk+0x5c>)
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <_sbrk+0x60>)
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <_sbrk+0x64>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d102      	bne.n	8000a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <_sbrk+0x64>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <_sbrk+0x68>)
 8000a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <_sbrk+0x64>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d207      	bcs.n	8000a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a58:	f001 fa52 	bl	8001f00 <__errno>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	220c      	movs	r2, #12
 8000a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	e009      	b.n	8000a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <_sbrk+0x64>)
 8000a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20005000 	.word	0x20005000
 8000a88:	00000400 	.word	0x00000400
 8000a8c:	20000368 	.word	0x20000368
 8000a90:	200010c8 	.word	0x200010c8

08000a94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aa0:	f7ff fff8 	bl	8000a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa4:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aa6:	490c      	ldr	r1, [pc, #48]	; (8000ad8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000aa8:	4a0c      	ldr	r2, [pc, #48]	; (8000adc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aac:	e002      	b.n	8000ab4 <LoopCopyDataInit>

08000aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab2:	3304      	adds	r3, #4

08000ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab8:	d3f9      	bcc.n	8000aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aba:	4a09      	ldr	r2, [pc, #36]	; (8000ae0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000abc:	4c09      	ldr	r4, [pc, #36]	; (8000ae4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac0:	e001      	b.n	8000ac6 <LoopFillZerobss>

08000ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac4:	3204      	adds	r2, #4

08000ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac8:	d3fb      	bcc.n	8000ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aca:	f001 fb15 	bl	80020f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ace:	f7ff fe4f 	bl	8000770 <main>
  bx lr
 8000ad2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000adc:	08003190 	.word	0x08003190
  ldr r2, =_sbss
 8000ae0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ae4:	200010c8 	.word	0x200010c8

08000ae8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC1_2_IRQHandler>

08000aea <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b085      	sub	sp, #20
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	4603      	mov	r3, r0
 8000af2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8000af8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000afc:	2b84      	cmp	r3, #132	; 0x84
 8000afe:	d005      	beq.n	8000b0c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8000b00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4413      	add	r3, r2
 8000b08:	3303      	adds	r3, #3
 8000b0a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr

08000b18 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8000b1c:	f000 faea 	bl	80010f4 <vTaskStartScheduler>
  
  return osOK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000b26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b28:	b089      	sub	sp, #36	; 0x24
 8000b2a:	af04      	add	r7, sp, #16
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d020      	beq.n	8000b7a <osThreadCreate+0x54>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d01c      	beq.n	8000b7a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685c      	ldr	r4, [r3, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681d      	ldr	r5, [r3, #0]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	691e      	ldr	r6, [r3, #16]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ffc9 	bl	8000aea <makeFreeRtosPriority>
 8000b58:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000b62:	9202      	str	r2, [sp, #8]
 8000b64:	9301      	str	r3, [sp, #4]
 8000b66:	9100      	str	r1, [sp, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	4632      	mov	r2, r6
 8000b6c:	4629      	mov	r1, r5
 8000b6e:	4620      	mov	r0, r4
 8000b70:	f000 f8eb 	bl	8000d4a <xTaskCreateStatic>
 8000b74:	4603      	mov	r3, r0
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	e01c      	b.n	8000bb4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	685c      	ldr	r4, [r3, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000b86:	b29e      	uxth	r6, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ffab 	bl	8000aea <makeFreeRtosPriority>
 8000b94:	4602      	mov	r2, r0
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	9301      	str	r3, [sp, #4]
 8000b9c:	9200      	str	r2, [sp, #0]
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	4632      	mov	r2, r6
 8000ba2:	4629      	mov	r1, r5
 8000ba4:	4620      	mov	r0, r4
 8000ba6:	f000 f92c 	bl	8000e02 <xTaskCreate>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d001      	beq.n	8000bb4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	e000      	b.n	8000bb6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000bbe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b084      	sub	sp, #16
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec*5;
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	4413      	add	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <osDelay+0x1c>
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	e000      	b.n	8000bdc <osDelay+0x1e>
 8000bda:	2301      	movs	r3, #1
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 fa55 	bl	800108c <vTaskDelay>
  
  return osOK;
 8000be2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f103 0208 	add.w	r2, r3, #8
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295
 8000c04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f103 0208 	add.w	r2, r3, #8
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f103 0208 	add.w	r2, r3, #8
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr

08000c2a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr

08000c42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000c42:	b480      	push	{r7}
 8000c44:	b085      	sub	sp, #20
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
 8000c4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	683a      	ldr	r2, [r7, #0]
 8000c6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	1c5a      	adds	r2, r3, #1
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	601a      	str	r2, [r3, #0]
}
 8000c7e:	bf00      	nop
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c9e:	d103      	bne.n	8000ca8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	691b      	ldr	r3, [r3, #16]
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	e00c      	b.n	8000cc2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3308      	adds	r3, #8
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	e002      	b.n	8000cb6 <vListInsert+0x2e>
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d2f6      	bcs.n	8000cb0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	1c5a      	adds	r2, r3, #1
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	601a      	str	r2, [r3, #0]
}
 8000cee:	bf00      	nop
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr

08000cf8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	691b      	ldr	r3, [r3, #16]
 8000d04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	6892      	ldr	r2, [r2, #8]
 8000d0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	6852      	ldr	r2, [r2, #4]
 8000d18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d103      	bne.n	8000d2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	1e5a      	subs	r2, r3, #1
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr

08000d4a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b08e      	sub	sp, #56	; 0x38
 8000d4e:	af04      	add	r7, sp, #16
 8000d50:	60f8      	str	r0, [r7, #12]
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	607a      	str	r2, [r7, #4]
 8000d56:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8000d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d10a      	bne.n	8000d74 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d62:	f383 8811 	msr	BASEPRI, r3
 8000d66:	f3bf 8f6f 	isb	sy
 8000d6a:	f3bf 8f4f 	dsb	sy
 8000d6e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000d70:	bf00      	nop
 8000d72:	e7fe      	b.n	8000d72 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8000d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10a      	bne.n	8000d90 <xTaskCreateStatic+0x46>
	__asm volatile
 8000d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d7e:	f383 8811 	msr	BASEPRI, r3
 8000d82:	f3bf 8f6f 	isb	sy
 8000d86:	f3bf 8f4f 	dsb	sy
 8000d8a:	61fb      	str	r3, [r7, #28]
}
 8000d8c:	bf00      	nop
 8000d8e:	e7fe      	b.n	8000d8e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8000d90:	23b4      	movs	r3, #180	; 0xb4
 8000d92:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	2bb4      	cmp	r3, #180	; 0xb4
 8000d98:	d00a      	beq.n	8000db0 <xTaskCreateStatic+0x66>
	__asm volatile
 8000d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d9e:	f383 8811 	msr	BASEPRI, r3
 8000da2:	f3bf 8f6f 	isb	sy
 8000da6:	f3bf 8f4f 	dsb	sy
 8000daa:	61bb      	str	r3, [r7, #24]
}
 8000dac:	bf00      	nop
 8000dae:	e7fe      	b.n	8000dae <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8000db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d01e      	beq.n	8000df4 <xTaskCreateStatic+0xaa>
 8000db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d01b      	beq.n	8000df4 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000dc4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	2202      	movs	r2, #2
 8000dca:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8000dce:	2300      	movs	r3, #0
 8000dd0:	9303      	str	r3, [sp, #12]
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	9302      	str	r3, [sp, #8]
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	9301      	str	r3, [sp, #4]
 8000ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	68f8      	ldr	r0, [r7, #12]
 8000de8:	f000 f850 	bl	8000e8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000dec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000dee:	f000 f8e3 	bl	8000fb8 <prvAddNewTaskToReadyList>
 8000df2:	e001      	b.n	8000df8 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8000df8:	697b      	ldr	r3, [r7, #20]
	}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3728      	adds	r7, #40	; 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b08c      	sub	sp, #48	; 0x30
 8000e06:	af04      	add	r7, sp, #16
 8000e08:	60f8      	str	r0, [r7, #12]
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 fe9a 	bl	8001b50 <pvPortMalloc>
 8000e1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d00e      	beq.n	8000e42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8000e24:	20b4      	movs	r0, #180	; 0xb4
 8000e26:	f000 fe93 	bl	8001b50 <pvPortMalloc>
 8000e2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	631a      	str	r2, [r3, #48]	; 0x30
 8000e38:	e005      	b.n	8000e46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000e3a:	6978      	ldr	r0, [r7, #20]
 8000e3c:	f000 ff4c 	bl	8001cd8 <vPortFree>
 8000e40:	e001      	b.n	8000e46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d017      	beq.n	8000e7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000e54:	88fa      	ldrh	r2, [r7, #6]
 8000e56:	2300      	movs	r3, #0
 8000e58:	9303      	str	r3, [sp, #12]
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	9302      	str	r3, [sp, #8]
 8000e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e60:	9301      	str	r3, [sp, #4]
 8000e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	68b9      	ldr	r1, [r7, #8]
 8000e6a:	68f8      	ldr	r0, [r7, #12]
 8000e6c:	f000 f80e 	bl	8000e8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000e70:	69f8      	ldr	r0, [r7, #28]
 8000e72:	f000 f8a1 	bl	8000fb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000e76:	2301      	movs	r3, #1
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	e002      	b.n	8000e82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000e82:	69bb      	ldr	r3, [r7, #24]
	}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3720      	adds	r7, #32
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8000e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4413      	add	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	f023 0307 	bic.w	r3, r3, #7
 8000eb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d00a      	beq.n	8000ed4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8000ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ec2:	f383 8811 	msr	BASEPRI, r3
 8000ec6:	f3bf 8f6f 	isb	sy
 8000eca:	f3bf 8f4f 	dsb	sy
 8000ece:	617b      	str	r3, [r7, #20]
}
 8000ed0:	bf00      	nop
 8000ed2:	e7fe      	b.n	8000ed2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
 8000ed8:	e012      	b.n	8000f00 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	4413      	add	r3, r2
 8000ee0:	7819      	ldrb	r1, [r3, #0]
 8000ee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	3334      	adds	r3, #52	; 0x34
 8000eea:	460a      	mov	r2, r1
 8000eec:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d006      	beq.n	8000f08 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3301      	adds	r3, #1
 8000efe:	61fb      	str	r3, [r7, #28]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	2b0f      	cmp	r3, #15
 8000f04:	d9e9      	bls.n	8000eda <prvInitialiseNewTask+0x4e>
 8000f06:	e000      	b.n	8000f0a <prvInitialiseNewTask+0x7e>
		{
			break;
 8000f08:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f14:	2b06      	cmp	r3, #6
 8000f16:	d901      	bls.n	8000f1c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000f18:	2306      	movs	r3, #6
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f26:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8000f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f30:	3304      	adds	r3, #4
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fe79 	bl	8000c2a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f3a:	3318      	adds	r3, #24
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fe74 	bl	8000c2a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f4a:	f1c3 0207 	rsb	r2, r3, #7
 8000f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8000f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f6a:	334c      	adds	r3, #76	; 0x4c
 8000f6c:	2260      	movs	r2, #96	; 0x60
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f001 f8e8 	bl	8002146 <memset>
 8000f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f78:	4a0c      	ldr	r2, [pc, #48]	; (8000fac <prvInitialiseNewTask+0x120>)
 8000f7a:	651a      	str	r2, [r3, #80]	; 0x50
 8000f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f7e:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <prvInitialiseNewTask+0x124>)
 8000f80:	655a      	str	r2, [r3, #84]	; 0x54
 8000f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f84:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <prvInitialiseNewTask+0x128>)
 8000f86:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	68f9      	ldr	r1, [r7, #12]
 8000f8c:	69b8      	ldr	r0, [r7, #24]
 8000f8e:	f000 fc29 	bl	80017e4 <pxPortInitialiseStack>
 8000f92:	4602      	mov	r2, r0
 8000f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f96:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8000f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fa2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000fa4:	bf00      	nop
 8000fa6:	3720      	adds	r7, #32
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	08003110 	.word	0x08003110
 8000fb0:	08003130 	.word	0x08003130
 8000fb4:	080030f0 	.word	0x080030f0

08000fb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000fc0:	f000 fd04 	bl	80019cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000fc4:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <prvAddNewTaskToReadyList+0xb8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	4a29      	ldr	r2, [pc, #164]	; (8001070 <prvAddNewTaskToReadyList+0xb8>)
 8000fcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000fce:	4b29      	ldr	r3, [pc, #164]	; (8001074 <prvAddNewTaskToReadyList+0xbc>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d109      	bne.n	8000fea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000fd6:	4a27      	ldr	r2, [pc, #156]	; (8001074 <prvAddNewTaskToReadyList+0xbc>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000fdc:	4b24      	ldr	r3, [pc, #144]	; (8001070 <prvAddNewTaskToReadyList+0xb8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d110      	bne.n	8001006 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000fe4:	f000 fad2 	bl	800158c <prvInitialiseTaskLists>
 8000fe8:	e00d      	b.n	8001006 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000fea:	4b23      	ldr	r3, [pc, #140]	; (8001078 <prvAddNewTaskToReadyList+0xc0>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d109      	bne.n	8001006 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <prvAddNewTaskToReadyList+0xbc>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d802      	bhi.n	8001006 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001000:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <prvAddNewTaskToReadyList+0xbc>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001006:	4b1d      	ldr	r3, [pc, #116]	; (800107c <prvAddNewTaskToReadyList+0xc4>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	3301      	adds	r3, #1
 800100c:	4a1b      	ldr	r2, [pc, #108]	; (800107c <prvAddNewTaskToReadyList+0xc4>)
 800100e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001014:	2201      	movs	r2, #1
 8001016:	409a      	lsls	r2, r3
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <prvAddNewTaskToReadyList+0xc8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4313      	orrs	r3, r2
 800101e:	4a18      	ldr	r2, [pc, #96]	; (8001080 <prvAddNewTaskToReadyList+0xc8>)
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4a15      	ldr	r2, [pc, #84]	; (8001084 <prvAddNewTaskToReadyList+0xcc>)
 8001030:	441a      	add	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3304      	adds	r3, #4
 8001036:	4619      	mov	r1, r3
 8001038:	4610      	mov	r0, r2
 800103a:	f7ff fe02 	bl	8000c42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800103e:	f000 fcf5 	bl	8001a2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <prvAddNewTaskToReadyList+0xc0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00e      	beq.n	8001068 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <prvAddNewTaskToReadyList+0xbc>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001054:	429a      	cmp	r2, r3
 8001056:	d207      	bcs.n	8001068 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <prvAddNewTaskToReadyList+0xd0>)
 800105a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	f3bf 8f4f 	dsb	sy
 8001064:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	2000046c 	.word	0x2000046c
 8001074:	2000036c 	.word	0x2000036c
 8001078:	20000478 	.word	0x20000478
 800107c:	20000488 	.word	0x20000488
 8001080:	20000474 	.word	0x20000474
 8001084:	20000370 	.word	0x20000370
 8001088:	e000ed04 	.word	0xe000ed04

0800108c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d017      	beq.n	80010ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <vTaskDelay+0x60>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00a      	beq.n	80010bc <vTaskDelay+0x30>
	__asm volatile
 80010a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010aa:	f383 8811 	msr	BASEPRI, r3
 80010ae:	f3bf 8f6f 	isb	sy
 80010b2:	f3bf 8f4f 	dsb	sy
 80010b6:	60bb      	str	r3, [r7, #8]
}
 80010b8:	bf00      	nop
 80010ba:	e7fe      	b.n	80010ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80010bc:	f000 f884 	bl	80011c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80010c0:	2100      	movs	r1, #0
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 fb28 	bl	8001718 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80010c8:	f000 f88c 	bl	80011e4 <xTaskResumeAll>
 80010cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d107      	bne.n	80010e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <vTaskDelay+0x64>)
 80010d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	f3bf 8f4f 	dsb	sy
 80010e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000494 	.word	0x20000494
 80010f0:	e000ed04 	.word	0xe000ed04

080010f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001102:	463a      	mov	r2, r7
 8001104:	1d39      	adds	r1, r7, #4
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fb0a 	bl	8000724 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001110:	6839      	ldr	r1, [r7, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	9202      	str	r2, [sp, #8]
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	2300      	movs	r3, #0
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2300      	movs	r3, #0
 8001120:	460a      	mov	r2, r1
 8001122:	4921      	ldr	r1, [pc, #132]	; (80011a8 <vTaskStartScheduler+0xb4>)
 8001124:	4821      	ldr	r0, [pc, #132]	; (80011ac <vTaskStartScheduler+0xb8>)
 8001126:	f7ff fe10 	bl	8000d4a <xTaskCreateStatic>
 800112a:	4603      	mov	r3, r0
 800112c:	4a20      	ldr	r2, [pc, #128]	; (80011b0 <vTaskStartScheduler+0xbc>)
 800112e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001130:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <vTaskStartScheduler+0xbc>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d002      	beq.n	800113e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001138:	2301      	movs	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	e001      	b.n	8001142 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d11b      	bne.n	8001180 <vTaskStartScheduler+0x8c>
	__asm volatile
 8001148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800114c:	f383 8811 	msr	BASEPRI, r3
 8001150:	f3bf 8f6f 	isb	sy
 8001154:	f3bf 8f4f 	dsb	sy
 8001158:	613b      	str	r3, [r7, #16]
}
 800115a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <vTaskStartScheduler+0xc0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	334c      	adds	r3, #76	; 0x4c
 8001162:	4a15      	ldr	r2, [pc, #84]	; (80011b8 <vTaskStartScheduler+0xc4>)
 8001164:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <vTaskStartScheduler+0xc8>)
 8001168:	f04f 32ff 	mov.w	r2, #4294967295
 800116c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <vTaskStartScheduler+0xcc>)
 8001170:	2201      	movs	r2, #1
 8001172:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <vTaskStartScheduler+0xd0>)
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800117a:	f000 fbb5 	bl	80018e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800117e:	e00e      	b.n	800119e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001186:	d10a      	bne.n	800119e <vTaskStartScheduler+0xaa>
	__asm volatile
 8001188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800118c:	f383 8811 	msr	BASEPRI, r3
 8001190:	f3bf 8f6f 	isb	sy
 8001194:	f3bf 8f4f 	dsb	sy
 8001198:	60fb      	str	r3, [r7, #12]
}
 800119a:	bf00      	nop
 800119c:	e7fe      	b.n	800119c <vTaskStartScheduler+0xa8>
}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	080030e8 	.word	0x080030e8
 80011ac:	0800155d 	.word	0x0800155d
 80011b0:	20000490 	.word	0x20000490
 80011b4:	2000036c 	.word	0x2000036c
 80011b8:	20000018 	.word	0x20000018
 80011bc:	2000048c 	.word	0x2000048c
 80011c0:	20000478 	.word	0x20000478
 80011c4:	20000470 	.word	0x20000470

080011c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <vTaskSuspendAll+0x18>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	4a03      	ldr	r2, [pc, #12]	; (80011e0 <vTaskSuspendAll+0x18>)
 80011d4:	6013      	str	r3, [r2, #0]
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000494 	.word	0x20000494

080011e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80011f2:	4b41      	ldr	r3, [pc, #260]	; (80012f8 <xTaskResumeAll+0x114>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10a      	bne.n	8001210 <xTaskResumeAll+0x2c>
	__asm volatile
 80011fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011fe:	f383 8811 	msr	BASEPRI, r3
 8001202:	f3bf 8f6f 	isb	sy
 8001206:	f3bf 8f4f 	dsb	sy
 800120a:	603b      	str	r3, [r7, #0]
}
 800120c:	bf00      	nop
 800120e:	e7fe      	b.n	800120e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001210:	f000 fbdc 	bl	80019cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001214:	4b38      	ldr	r3, [pc, #224]	; (80012f8 <xTaskResumeAll+0x114>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	3b01      	subs	r3, #1
 800121a:	4a37      	ldr	r2, [pc, #220]	; (80012f8 <xTaskResumeAll+0x114>)
 800121c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800121e:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <xTaskResumeAll+0x114>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d161      	bne.n	80012ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001226:	4b35      	ldr	r3, [pc, #212]	; (80012fc <xTaskResumeAll+0x118>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d05d      	beq.n	80012ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800122e:	e02e      	b.n	800128e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001230:	4b33      	ldr	r3, [pc, #204]	; (8001300 <xTaskResumeAll+0x11c>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3318      	adds	r3, #24
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fd5b 	bl	8000cf8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	3304      	adds	r3, #4
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fd56 	bl	8000cf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001250:	2201      	movs	r2, #1
 8001252:	409a      	lsls	r2, r3
 8001254:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <xTaskResumeAll+0x120>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4313      	orrs	r3, r2
 800125a:	4a2a      	ldr	r2, [pc, #168]	; (8001304 <xTaskResumeAll+0x120>)
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4a27      	ldr	r2, [pc, #156]	; (8001308 <xTaskResumeAll+0x124>)
 800126c:	441a      	add	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3304      	adds	r3, #4
 8001272:	4619      	mov	r1, r3
 8001274:	4610      	mov	r0, r2
 8001276:	f7ff fce4 	bl	8000c42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800127e:	4b23      	ldr	r3, [pc, #140]	; (800130c <xTaskResumeAll+0x128>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001284:	429a      	cmp	r2, r3
 8001286:	d302      	bcc.n	800128e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8001288:	4b21      	ldr	r3, [pc, #132]	; (8001310 <xTaskResumeAll+0x12c>)
 800128a:	2201      	movs	r2, #1
 800128c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <xTaskResumeAll+0x11c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1cc      	bne.n	8001230 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800129c:	f000 fa18 	bl	80016d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80012a0:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <xTaskResumeAll+0x130>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d010      	beq.n	80012ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80012ac:	f000 f836 	bl	800131c <xTaskIncrementTick>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <xTaskResumeAll+0x12c>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f1      	bne.n	80012ac <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <xTaskResumeAll+0x130>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <xTaskResumeAll+0x12c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d009      	beq.n	80012ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80012d6:	2301      	movs	r3, #1
 80012d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <xTaskResumeAll+0x134>)
 80012dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	f3bf 8f4f 	dsb	sy
 80012e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80012ea:	f000 fb9f 	bl	8001a2c <vPortExitCritical>

	return xAlreadyYielded;
 80012ee:	68bb      	ldr	r3, [r7, #8]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000494 	.word	0x20000494
 80012fc:	2000046c 	.word	0x2000046c
 8001300:	2000042c 	.word	0x2000042c
 8001304:	20000474 	.word	0x20000474
 8001308:	20000370 	.word	0x20000370
 800130c:	2000036c 	.word	0x2000036c
 8001310:	20000480 	.word	0x20000480
 8001314:	2000047c 	.word	0x2000047c
 8001318:	e000ed04 	.word	0xe000ed04

0800131c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001326:	4b51      	ldr	r3, [pc, #324]	; (800146c <xTaskIncrementTick+0x150>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	f040 808d 	bne.w	800144a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001330:	4b4f      	ldr	r3, [pc, #316]	; (8001470 <xTaskIncrementTick+0x154>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	3301      	adds	r3, #1
 8001336:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001338:	4a4d      	ldr	r2, [pc, #308]	; (8001470 <xTaskIncrementTick+0x154>)
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d120      	bne.n	8001386 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001344:	4b4b      	ldr	r3, [pc, #300]	; (8001474 <xTaskIncrementTick+0x158>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00a      	beq.n	8001364 <xTaskIncrementTick+0x48>
	__asm volatile
 800134e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001352:	f383 8811 	msr	BASEPRI, r3
 8001356:	f3bf 8f6f 	isb	sy
 800135a:	f3bf 8f4f 	dsb	sy
 800135e:	603b      	str	r3, [r7, #0]
}
 8001360:	bf00      	nop
 8001362:	e7fe      	b.n	8001362 <xTaskIncrementTick+0x46>
 8001364:	4b43      	ldr	r3, [pc, #268]	; (8001474 <xTaskIncrementTick+0x158>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b43      	ldr	r3, [pc, #268]	; (8001478 <xTaskIncrementTick+0x15c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a41      	ldr	r2, [pc, #260]	; (8001474 <xTaskIncrementTick+0x158>)
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	4a41      	ldr	r2, [pc, #260]	; (8001478 <xTaskIncrementTick+0x15c>)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b40      	ldr	r3, [pc, #256]	; (800147c <xTaskIncrementTick+0x160>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	4a3f      	ldr	r2, [pc, #252]	; (800147c <xTaskIncrementTick+0x160>)
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	f000 f9a5 	bl	80016d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001386:	4b3e      	ldr	r3, [pc, #248]	; (8001480 <xTaskIncrementTick+0x164>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	429a      	cmp	r2, r3
 800138e:	d34d      	bcc.n	800142c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001390:	4b38      	ldr	r3, [pc, #224]	; (8001474 <xTaskIncrementTick+0x158>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <xTaskIncrementTick+0x82>
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <xTaskIncrementTick+0x84>
 800139e:	2300      	movs	r3, #0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d004      	beq.n	80013ae <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80013a4:	4b36      	ldr	r3, [pc, #216]	; (8001480 <xTaskIncrementTick+0x164>)
 80013a6:	f04f 32ff 	mov.w	r2, #4294967295
 80013aa:	601a      	str	r2, [r3, #0]
					break;
 80013ac:	e03e      	b.n	800142c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80013ae:	4b31      	ldr	r3, [pc, #196]	; (8001474 <xTaskIncrementTick+0x158>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d203      	bcs.n	80013ce <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80013c6:	4a2e      	ldr	r2, [pc, #184]	; (8001480 <xTaskIncrementTick+0x164>)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6013      	str	r3, [r2, #0]
						break;
 80013cc:	e02e      	b.n	800142c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	3304      	adds	r3, #4
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fc90 	bl	8000cf8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d004      	beq.n	80013ea <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	3318      	adds	r3, #24
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fc87 	bl	8000cf8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ee:	2201      	movs	r2, #1
 80013f0:	409a      	lsls	r2, r3
 80013f2:	4b24      	ldr	r3, [pc, #144]	; (8001484 <xTaskIncrementTick+0x168>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	4a22      	ldr	r2, [pc, #136]	; (8001484 <xTaskIncrementTick+0x168>)
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4a1f      	ldr	r2, [pc, #124]	; (8001488 <xTaskIncrementTick+0x16c>)
 800140a:	441a      	add	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	3304      	adds	r3, #4
 8001410:	4619      	mov	r1, r3
 8001412:	4610      	mov	r0, r2
 8001414:	f7ff fc15 	bl	8000c42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <xTaskIncrementTick+0x170>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001422:	429a      	cmp	r2, r3
 8001424:	d3b4      	bcc.n	8001390 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001426:	2301      	movs	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800142a:	e7b1      	b.n	8001390 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800142c:	4b17      	ldr	r3, [pc, #92]	; (800148c <xTaskIncrementTick+0x170>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001432:	4915      	ldr	r1, [pc, #84]	; (8001488 <xTaskIncrementTick+0x16c>)
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d907      	bls.n	8001454 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8001444:	2301      	movs	r3, #1
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	e004      	b.n	8001454 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <xTaskIncrementTick+0x174>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	3301      	adds	r3, #1
 8001450:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <xTaskIncrementTick+0x174>)
 8001452:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <xTaskIncrementTick+0x178>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800145c:	2301      	movs	r3, #1
 800145e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001460:	697b      	ldr	r3, [r7, #20]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000494 	.word	0x20000494
 8001470:	20000470 	.word	0x20000470
 8001474:	20000424 	.word	0x20000424
 8001478:	20000428 	.word	0x20000428
 800147c:	20000484 	.word	0x20000484
 8001480:	2000048c 	.word	0x2000048c
 8001484:	20000474 	.word	0x20000474
 8001488:	20000370 	.word	0x20000370
 800148c:	2000036c 	.word	0x2000036c
 8001490:	2000047c 	.word	0x2000047c
 8001494:	20000480 	.word	0x20000480

08001498 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001498:	b480      	push	{r7}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800149e:	4b29      	ldr	r3, [pc, #164]	; (8001544 <vTaskSwitchContext+0xac>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80014a6:	4b28      	ldr	r3, [pc, #160]	; (8001548 <vTaskSwitchContext+0xb0>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80014ac:	e044      	b.n	8001538 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80014ae:	4b26      	ldr	r3, [pc, #152]	; (8001548 <vTaskSwitchContext+0xb0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80014b4:	4b25      	ldr	r3, [pc, #148]	; (800154c <vTaskSwitchContext+0xb4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	fab3 f383 	clz	r3, r3
 80014c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80014c2:	7afb      	ldrb	r3, [r7, #11]
 80014c4:	f1c3 031f 	rsb	r3, r3, #31
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	4921      	ldr	r1, [pc, #132]	; (8001550 <vTaskSwitchContext+0xb8>)
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	440b      	add	r3, r1
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10a      	bne.n	80014f4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80014de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014e2:	f383 8811 	msr	BASEPRI, r3
 80014e6:	f3bf 8f6f 	isb	sy
 80014ea:	f3bf 8f4f 	dsb	sy
 80014ee:	607b      	str	r3, [r7, #4]
}
 80014f0:	bf00      	nop
 80014f2:	e7fe      	b.n	80014f2 <vTaskSwitchContext+0x5a>
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4a14      	ldr	r2, [pc, #80]	; (8001550 <vTaskSwitchContext+0xb8>)
 8001500:	4413      	add	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	3308      	adds	r3, #8
 8001516:	429a      	cmp	r2, r3
 8001518:	d104      	bne.n	8001524 <vTaskSwitchContext+0x8c>
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <vTaskSwitchContext+0xbc>)
 800152c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <vTaskSwitchContext+0xbc>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	334c      	adds	r3, #76	; 0x4c
 8001534:	4a08      	ldr	r2, [pc, #32]	; (8001558 <vTaskSwitchContext+0xc0>)
 8001536:	6013      	str	r3, [r2, #0]
}
 8001538:	bf00      	nop
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000494 	.word	0x20000494
 8001548:	20000480 	.word	0x20000480
 800154c:	20000474 	.word	0x20000474
 8001550:	20000370 	.word	0x20000370
 8001554:	2000036c 	.word	0x2000036c
 8001558:	20000018 	.word	0x20000018

0800155c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001564:	f000 f852 	bl	800160c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <prvIdleTask+0x28>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d9f9      	bls.n	8001564 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <prvIdleTask+0x2c>)
 8001572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	f3bf 8f4f 	dsb	sy
 800157c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001580:	e7f0      	b.n	8001564 <prvIdleTask+0x8>
 8001582:	bf00      	nop
 8001584:	20000370 	.word	0x20000370
 8001588:	e000ed04 	.word	0xe000ed04

0800158c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	e00c      	b.n	80015b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <prvInitialiseTaskLists+0x60>)
 80015a4:	4413      	add	r3, r2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fb20 	bl	8000bec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3301      	adds	r3, #1
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b06      	cmp	r3, #6
 80015b6:	d9ef      	bls.n	8001598 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80015b8:	480d      	ldr	r0, [pc, #52]	; (80015f0 <prvInitialiseTaskLists+0x64>)
 80015ba:	f7ff fb17 	bl	8000bec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80015be:	480d      	ldr	r0, [pc, #52]	; (80015f4 <prvInitialiseTaskLists+0x68>)
 80015c0:	f7ff fb14 	bl	8000bec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80015c4:	480c      	ldr	r0, [pc, #48]	; (80015f8 <prvInitialiseTaskLists+0x6c>)
 80015c6:	f7ff fb11 	bl	8000bec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80015ca:	480c      	ldr	r0, [pc, #48]	; (80015fc <prvInitialiseTaskLists+0x70>)
 80015cc:	f7ff fb0e 	bl	8000bec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80015d0:	480b      	ldr	r0, [pc, #44]	; (8001600 <prvInitialiseTaskLists+0x74>)
 80015d2:	f7ff fb0b 	bl	8000bec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <prvInitialiseTaskLists+0x78>)
 80015d8:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <prvInitialiseTaskLists+0x64>)
 80015da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <prvInitialiseTaskLists+0x7c>)
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <prvInitialiseTaskLists+0x68>)
 80015e0:	601a      	str	r2, [r3, #0]
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000370 	.word	0x20000370
 80015f0:	200003fc 	.word	0x200003fc
 80015f4:	20000410 	.word	0x20000410
 80015f8:	2000042c 	.word	0x2000042c
 80015fc:	20000440 	.word	0x20000440
 8001600:	20000458 	.word	0x20000458
 8001604:	20000424 	.word	0x20000424
 8001608:	20000428 	.word	0x20000428

0800160c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001612:	e019      	b.n	8001648 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001614:	f000 f9da 	bl	80019cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001618:	4b10      	ldr	r3, [pc, #64]	; (800165c <prvCheckTasksWaitingTermination+0x50>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3304      	adds	r3, #4
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fb67 	bl	8000cf8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <prvCheckTasksWaitingTermination+0x54>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	3b01      	subs	r3, #1
 8001630:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <prvCheckTasksWaitingTermination+0x54>)
 8001632:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <prvCheckTasksWaitingTermination+0x58>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	3b01      	subs	r3, #1
 800163a:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <prvCheckTasksWaitingTermination+0x58>)
 800163c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800163e:	f000 f9f5 	bl	8001a2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f810 	bl	8001668 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <prvCheckTasksWaitingTermination+0x58>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1e1      	bne.n	8001614 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000440 	.word	0x20000440
 8001660:	2000046c 	.word	0x2000046c
 8001664:	20000454 	.word	0x20000454

08001668 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	334c      	adds	r3, #76	; 0x4c
 8001674:	4618      	mov	r0, r3
 8001676:	f000 fe9f 	bl	80023b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8001680:	2b00      	cmp	r3, #0
 8001682:	d108      	bne.n	8001696 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	4618      	mov	r0, r3
 800168a:	f000 fb25 	bl	8001cd8 <vPortFree>
				vPortFree( pxTCB );
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 fb22 	bl	8001cd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001694:	e018      	b.n	80016c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800169c:	2b01      	cmp	r3, #1
 800169e:	d103      	bne.n	80016a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 fb19 	bl	8001cd8 <vPortFree>
	}
 80016a6:	e00f      	b.n	80016c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d00a      	beq.n	80016c8 <prvDeleteTCB+0x60>
	__asm volatile
 80016b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016b6:	f383 8811 	msr	BASEPRI, r3
 80016ba:	f3bf 8f6f 	isb	sy
 80016be:	f3bf 8f4f 	dsb	sy
 80016c2:	60fb      	str	r3, [r7, #12]
}
 80016c4:	bf00      	nop
 80016c6:	e7fe      	b.n	80016c6 <prvDeleteTCB+0x5e>
	}
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <prvResetNextTaskUnblockTime+0x40>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <prvResetNextTaskUnblockTime+0x14>
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <prvResetNextTaskUnblockTime+0x16>
 80016e4:	2300      	movs	r3, #0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d004      	beq.n	80016f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <prvResetNextTaskUnblockTime+0x44>)
 80016ec:	f04f 32ff 	mov.w	r2, #4294967295
 80016f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80016f2:	e008      	b.n	8001706 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <prvResetNextTaskUnblockTime+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4a04      	ldr	r2, [pc, #16]	; (8001714 <prvResetNextTaskUnblockTime+0x44>)
 8001704:	6013      	str	r3, [r2, #0]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	20000424 	.word	0x20000424
 8001714:	2000048c 	.word	0x2000048c

08001718 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001722:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001728:	4b28      	ldr	r3, [pc, #160]	; (80017cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	3304      	adds	r3, #4
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fae2 	bl	8000cf8 <uxListRemove>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10b      	bne.n	8001752 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800173a:	4b24      	ldr	r3, [pc, #144]	; (80017cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001740:	2201      	movs	r2, #1
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4013      	ands	r3, r2
 800174e:	4a20      	ldr	r2, [pc, #128]	; (80017d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001750:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001758:	d10a      	bne.n	8001770 <prvAddCurrentTaskToDelayedList+0x58>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d007      	beq.n	8001770 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001760:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	3304      	adds	r3, #4
 8001766:	4619      	mov	r1, r3
 8001768:	481a      	ldr	r0, [pc, #104]	; (80017d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800176a:	f7ff fa6a 	bl	8000c42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800176e:	e026      	b.n	80017be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d209      	bcs.n	800179c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	3304      	adds	r3, #4
 8001792:	4619      	mov	r1, r3
 8001794:	4610      	mov	r0, r2
 8001796:	f7ff fa77 	bl	8000c88 <vListInsert>
}
 800179a:	e010      	b.n	80017be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	3304      	adds	r3, #4
 80017a6:	4619      	mov	r1, r3
 80017a8:	4610      	mov	r0, r2
 80017aa:	f7ff fa6d 	bl	8000c88 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d202      	bcs.n	80017be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80017b8:	4a09      	ldr	r2, [pc, #36]	; (80017e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	6013      	str	r3, [r2, #0]
}
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000470 	.word	0x20000470
 80017cc:	2000036c 	.word	0x2000036c
 80017d0:	20000474 	.word	0x20000474
 80017d4:	20000458 	.word	0x20000458
 80017d8:	20000428 	.word	0x20000428
 80017dc:	20000424 	.word	0x20000424
 80017e0:	2000048c 	.word	0x2000048c

080017e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	3b04      	subs	r3, #4
 80017f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3b04      	subs	r3, #4
 8001802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	f023 0201 	bic.w	r2, r3, #1
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	3b04      	subs	r3, #4
 8001812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001814:	4a08      	ldr	r2, [pc, #32]	; (8001838 <pxPortInitialiseStack+0x54>)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3b14      	subs	r3, #20
 800181e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3b20      	subs	r3, #32
 800182a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800182c:	68fb      	ldr	r3, [r7, #12]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	0800183d 	.word	0x0800183d

0800183c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001846:	4b12      	ldr	r3, [pc, #72]	; (8001890 <prvTaskExitError+0x54>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184e:	d00a      	beq.n	8001866 <prvTaskExitError+0x2a>
	__asm volatile
 8001850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001854:	f383 8811 	msr	BASEPRI, r3
 8001858:	f3bf 8f6f 	isb	sy
 800185c:	f3bf 8f4f 	dsb	sy
 8001860:	60fb      	str	r3, [r7, #12]
}
 8001862:	bf00      	nop
 8001864:	e7fe      	b.n	8001864 <prvTaskExitError+0x28>
	__asm volatile
 8001866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800186a:	f383 8811 	msr	BASEPRI, r3
 800186e:	f3bf 8f6f 	isb	sy
 8001872:	f3bf 8f4f 	dsb	sy
 8001876:	60bb      	str	r3, [r7, #8]
}
 8001878:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800187a:	bf00      	nop
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0fc      	beq.n	800187c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001882:	bf00      	nop
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000014 	.word	0x20000014
	...

080018a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <pxCurrentTCBConst2>)
 80018a2:	6819      	ldr	r1, [r3, #0]
 80018a4:	6808      	ldr	r0, [r1, #0]
 80018a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80018aa:	f380 8809 	msr	PSP, r0
 80018ae:	f3bf 8f6f 	isb	sy
 80018b2:	f04f 0000 	mov.w	r0, #0
 80018b6:	f380 8811 	msr	BASEPRI, r0
 80018ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80018be:	4770      	bx	lr

080018c0 <pxCurrentTCBConst2>:
 80018c0:	2000036c 	.word	0x2000036c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop

080018c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80018c8:	4806      	ldr	r0, [pc, #24]	; (80018e4 <prvPortStartFirstTask+0x1c>)
 80018ca:	6800      	ldr	r0, [r0, #0]
 80018cc:	6800      	ldr	r0, [r0, #0]
 80018ce:	f380 8808 	msr	MSP, r0
 80018d2:	b662      	cpsie	i
 80018d4:	b661      	cpsie	f
 80018d6:	f3bf 8f4f 	dsb	sy
 80018da:	f3bf 8f6f 	isb	sy
 80018de:	df00      	svc	0
 80018e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80018e2:	bf00      	nop
 80018e4:	e000ed08 	.word	0xe000ed08

080018e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80018ee:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <xPortStartScheduler+0xd0>)
 80018f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	22ff      	movs	r2, #255	; 0xff
 80018fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <xPortStartScheduler+0xd4>)
 8001914:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001916:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <xPortStartScheduler+0xd8>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800191c:	e009      	b.n	8001932 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800191e:	4b28      	ldr	r3, [pc, #160]	; (80019c0 <xPortStartScheduler+0xd8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	3b01      	subs	r3, #1
 8001924:	4a26      	ldr	r2, [pc, #152]	; (80019c0 <xPortStartScheduler+0xd8>)
 8001926:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	b2db      	uxtb	r3, r3
 8001930:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800193a:	2b80      	cmp	r3, #128	; 0x80
 800193c:	d0ef      	beq.n	800191e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <xPortStartScheduler+0xd8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f1c3 0307 	rsb	r3, r3, #7
 8001946:	2b04      	cmp	r3, #4
 8001948:	d00a      	beq.n	8001960 <xPortStartScheduler+0x78>
	__asm volatile
 800194a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800194e:	f383 8811 	msr	BASEPRI, r3
 8001952:	f3bf 8f6f 	isb	sy
 8001956:	f3bf 8f4f 	dsb	sy
 800195a:	60bb      	str	r3, [r7, #8]
}
 800195c:	bf00      	nop
 800195e:	e7fe      	b.n	800195e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001960:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <xPortStartScheduler+0xd8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	4a16      	ldr	r2, [pc, #88]	; (80019c0 <xPortStartScheduler+0xd8>)
 8001968:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <xPortStartScheduler+0xd8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001972:	4a13      	ldr	r2, [pc, #76]	; (80019c0 <xPortStartScheduler+0xd8>)
 8001974:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <xPortStartScheduler+0xdc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <xPortStartScheduler+0xdc>)
 8001984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001988:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <xPortStartScheduler+0xdc>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a0d      	ldr	r2, [pc, #52]	; (80019c4 <xPortStartScheduler+0xdc>)
 8001990:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001994:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001996:	f000 f8b9 	bl	8001b0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <xPortStartScheduler+0xe0>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80019a0:	f7ff ff92 	bl	80018c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80019a4:	f7ff fd78 	bl	8001498 <vTaskSwitchContext>
	prvTaskExitError();
 80019a8:	f7ff ff48 	bl	800183c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	e000e400 	.word	0xe000e400
 80019bc:	20000498 	.word	0x20000498
 80019c0:	2000049c 	.word	0x2000049c
 80019c4:	e000ed20 	.word	0xe000ed20
 80019c8:	20000014 	.word	0x20000014

080019cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
	__asm volatile
 80019d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019d6:	f383 8811 	msr	BASEPRI, r3
 80019da:	f3bf 8f6f 	isb	sy
 80019de:	f3bf 8f4f 	dsb	sy
 80019e2:	607b      	str	r3, [r7, #4]
}
 80019e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80019e6:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <vPortEnterCritical+0x58>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	3301      	adds	r3, #1
 80019ec:	4a0d      	ldr	r2, [pc, #52]	; (8001a24 <vPortEnterCritical+0x58>)
 80019ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <vPortEnterCritical+0x58>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d10f      	bne.n	8001a18 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <vPortEnterCritical+0x5c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00a      	beq.n	8001a18 <vPortEnterCritical+0x4c>
	__asm volatile
 8001a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a06:	f383 8811 	msr	BASEPRI, r3
 8001a0a:	f3bf 8f6f 	isb	sy
 8001a0e:	f3bf 8f4f 	dsb	sy
 8001a12:	603b      	str	r3, [r7, #0]
}
 8001a14:	bf00      	nop
 8001a16:	e7fe      	b.n	8001a16 <vPortEnterCritical+0x4a>
	}
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000014 	.word	0x20000014
 8001a28:	e000ed04 	.word	0xe000ed04

08001a2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <vPortExitCritical+0x4c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10a      	bne.n	8001a50 <vPortExitCritical+0x24>
	__asm volatile
 8001a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a3e:	f383 8811 	msr	BASEPRI, r3
 8001a42:	f3bf 8f6f 	isb	sy
 8001a46:	f3bf 8f4f 	dsb	sy
 8001a4a:	607b      	str	r3, [r7, #4]
}
 8001a4c:	bf00      	nop
 8001a4e:	e7fe      	b.n	8001a4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <vPortExitCritical+0x4c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	4a08      	ldr	r2, [pc, #32]	; (8001a78 <vPortExitCritical+0x4c>)
 8001a58:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <vPortExitCritical+0x4c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d105      	bne.n	8001a6e <vPortExitCritical+0x42>
 8001a62:	2300      	movs	r3, #0
 8001a64:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001a6c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	20000014 	.word	0x20000014
 8001a7c:	00000000 	.word	0x00000000

08001a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001a80:	f3ef 8009 	mrs	r0, PSP
 8001a84:	f3bf 8f6f 	isb	sy
 8001a88:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <pxCurrentTCBConst>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001a90:	6010      	str	r0, [r2, #0]
 8001a92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001a96:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a9a:	f380 8811 	msr	BASEPRI, r0
 8001a9e:	f7ff fcfb 	bl	8001498 <vTaskSwitchContext>
 8001aa2:	f04f 0000 	mov.w	r0, #0
 8001aa6:	f380 8811 	msr	BASEPRI, r0
 8001aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001aae:	6819      	ldr	r1, [r3, #0]
 8001ab0:	6808      	ldr	r0, [r1, #0]
 8001ab2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001ab6:	f380 8809 	msr	PSP, r0
 8001aba:	f3bf 8f6f 	isb	sy
 8001abe:	4770      	bx	lr

08001ac0 <pxCurrentTCBConst>:
 8001ac0:	2000036c 	.word	0x2000036c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop

08001ac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
	__asm volatile
 8001ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad2:	f383 8811 	msr	BASEPRI, r3
 8001ad6:	f3bf 8f6f 	isb	sy
 8001ada:	f3bf 8f4f 	dsb	sy
 8001ade:	607b      	str	r3, [r7, #4]
}
 8001ae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001ae2:	f7ff fc1b 	bl	800131c <xTaskIncrementTick>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <SysTick_Handler+0x40>)
 8001aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	2300      	movs	r3, #0
 8001af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	f383 8811 	msr	BASEPRI, r3
}
 8001afe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	e000ed04 	.word	0xe000ed04

08001b0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001b10:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <vPortSetupTimerInterrupt+0x30>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <vPortSetupTimerInterrupt+0x34>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <vPortSetupTimerInterrupt+0x38>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a09      	ldr	r2, [pc, #36]	; (8001b48 <vPortSetupTimerInterrupt+0x3c>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	099b      	lsrs	r3, r3, #6
 8001b28:	4a08      	ldr	r2, [pc, #32]	; (8001b4c <vPortSetupTimerInterrupt+0x40>)
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001b2e:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <vPortSetupTimerInterrupt+0x30>)
 8001b30:	2207      	movs	r2, #7
 8001b32:	601a      	str	r2, [r3, #0]
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	e000e010 	.word	0xe000e010
 8001b40:	e000e018 	.word	0xe000e018
 8001b44:	20000010 	.word	0x20000010
 8001b48:	10624dd3 	.word	0x10624dd3
 8001b4c:	e000e014 	.word	0xe000e014

08001b50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001b5c:	f7ff fb34 	bl	80011c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001b60:	4b58      	ldr	r3, [pc, #352]	; (8001cc4 <pvPortMalloc+0x174>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001b68:	f000 f910 	bl	8001d8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001b6c:	4b56      	ldr	r3, [pc, #344]	; (8001cc8 <pvPortMalloc+0x178>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f040 808e 	bne.w	8001c96 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d01d      	beq.n	8001bbc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8001b80:	2208      	movs	r2, #8
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d014      	beq.n	8001bbc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f023 0307 	bic.w	r3, r3, #7
 8001b98:	3308      	adds	r3, #8
 8001b9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00a      	beq.n	8001bbc <pvPortMalloc+0x6c>
	__asm volatile
 8001ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001baa:	f383 8811 	msr	BASEPRI, r3
 8001bae:	f3bf 8f6f 	isb	sy
 8001bb2:	f3bf 8f4f 	dsb	sy
 8001bb6:	617b      	str	r3, [r7, #20]
}
 8001bb8:	bf00      	nop
 8001bba:	e7fe      	b.n	8001bba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d069      	beq.n	8001c96 <pvPortMalloc+0x146>
 8001bc2:	4b42      	ldr	r3, [pc, #264]	; (8001ccc <pvPortMalloc+0x17c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d864      	bhi.n	8001c96 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001bcc:	4b40      	ldr	r3, [pc, #256]	; (8001cd0 <pvPortMalloc+0x180>)
 8001bce:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001bd0:	4b3f      	ldr	r3, [pc, #252]	; (8001cd0 <pvPortMalloc+0x180>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001bd6:	e004      	b.n	8001be2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d903      	bls.n	8001bf4 <pvPortMalloc+0xa4>
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1f1      	bne.n	8001bd8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001bf4:	4b33      	ldr	r3, [pc, #204]	; (8001cc4 <pvPortMalloc+0x174>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d04b      	beq.n	8001c96 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2208      	movs	r2, #8
 8001c04:	4413      	add	r3, r2
 8001c06:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	1ad2      	subs	r2, r2, r3
 8001c18:	2308      	movs	r3, #8
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d91f      	bls.n	8001c60 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00a      	beq.n	8001c48 <pvPortMalloc+0xf8>
	__asm volatile
 8001c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c36:	f383 8811 	msr	BASEPRI, r3
 8001c3a:	f3bf 8f6f 	isb	sy
 8001c3e:	f3bf 8f4f 	dsb	sy
 8001c42:	613b      	str	r3, [r7, #16]
}
 8001c44:	bf00      	nop
 8001c46:	e7fe      	b.n	8001c46 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	1ad2      	subs	r2, r2, r3
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001c5a:	69b8      	ldr	r0, [r7, #24]
 8001c5c:	f000 f8f8 	bl	8001e50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001c60:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <pvPortMalloc+0x17c>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	4a18      	ldr	r2, [pc, #96]	; (8001ccc <pvPortMalloc+0x17c>)
 8001c6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001c6e:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <pvPortMalloc+0x17c>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <pvPortMalloc+0x184>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d203      	bcs.n	8001c82 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001c7a:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <pvPortMalloc+0x17c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a15      	ldr	r2, [pc, #84]	; (8001cd4 <pvPortMalloc+0x184>)
 8001c80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <pvPortMalloc+0x178>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001c96:	f7ff faa5 	bl	80011e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00a      	beq.n	8001cba <pvPortMalloc+0x16a>
	__asm volatile
 8001ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca8:	f383 8811 	msr	BASEPRI, r3
 8001cac:	f3bf 8f6f 	isb	sy
 8001cb0:	f3bf 8f4f 	dsb	sy
 8001cb4:	60fb      	str	r3, [r7, #12]
}
 8001cb6:	bf00      	nop
 8001cb8:	e7fe      	b.n	8001cb8 <pvPortMalloc+0x168>
	return pvReturn;
 8001cba:	69fb      	ldr	r3, [r7, #28]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3728      	adds	r7, #40	; 0x28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200010a8 	.word	0x200010a8
 8001cc8:	200010b4 	.word	0x200010b4
 8001ccc:	200010ac 	.word	0x200010ac
 8001cd0:	200010a0 	.word	0x200010a0
 8001cd4:	200010b0 	.word	0x200010b0

08001cd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d048      	beq.n	8001d7c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001cea:	2308      	movs	r3, #8
 8001cec:	425b      	negs	r3, r3
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <vPortFree+0xac>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10a      	bne.n	8001d1c <vPortFree+0x44>
	__asm volatile
 8001d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d0a:	f383 8811 	msr	BASEPRI, r3
 8001d0e:	f3bf 8f6f 	isb	sy
 8001d12:	f3bf 8f4f 	dsb	sy
 8001d16:	60fb      	str	r3, [r7, #12]
}
 8001d18:	bf00      	nop
 8001d1a:	e7fe      	b.n	8001d1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00a      	beq.n	8001d3a <vPortFree+0x62>
	__asm volatile
 8001d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d28:	f383 8811 	msr	BASEPRI, r3
 8001d2c:	f3bf 8f6f 	isb	sy
 8001d30:	f3bf 8f4f 	dsb	sy
 8001d34:	60bb      	str	r3, [r7, #8]
}
 8001d36:	bf00      	nop
 8001d38:	e7fe      	b.n	8001d38 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <vPortFree+0xac>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d019      	beq.n	8001d7c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d115      	bne.n	8001d7c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <vPortFree+0xac>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001d60:	f7ff fa32 	bl	80011c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <vPortFree+0xb0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	4a06      	ldr	r2, [pc, #24]	; (8001d88 <vPortFree+0xb0>)
 8001d70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001d72:	6938      	ldr	r0, [r7, #16]
 8001d74:	f000 f86c 	bl	8001e50 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001d78:	f7ff fa34 	bl	80011e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001d7c:	bf00      	nop
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	200010b4 	.word	0x200010b4
 8001d88:	200010ac 	.word	0x200010ac

08001d8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001d92:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001d98:	4b27      	ldr	r3, [pc, #156]	; (8001e38 <prvHeapInit+0xac>)
 8001d9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00c      	beq.n	8001dc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3307      	adds	r3, #7
 8001daa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f023 0307 	bic.w	r3, r3, #7
 8001db2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	4a1f      	ldr	r2, [pc, #124]	; (8001e38 <prvHeapInit+0xac>)
 8001dbc:	4413      	add	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001dc4:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <prvHeapInit+0xb0>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001dca:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <prvHeapInit+0xb0>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001dd8:	2208      	movs	r2, #8
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f023 0307 	bic.w	r3, r3, #7
 8001de6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4a15      	ldr	r2, [pc, #84]	; (8001e40 <prvHeapInit+0xb4>)
 8001dec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <prvHeapInit+0xb4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2200      	movs	r2, #0
 8001df4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <prvHeapInit+0xb4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	1ad2      	subs	r2, r2, r3
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <prvHeapInit+0xb4>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <prvHeapInit+0xb8>)
 8001e1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	4a09      	ldr	r2, [pc, #36]	; (8001e48 <prvHeapInit+0xbc>)
 8001e22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <prvHeapInit+0xc0>)
 8001e26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e2a:	601a      	str	r2, [r3, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	200004a0 	.word	0x200004a0
 8001e3c:	200010a0 	.word	0x200010a0
 8001e40:	200010a8 	.word	0x200010a8
 8001e44:	200010b0 	.word	0x200010b0
 8001e48:	200010ac 	.word	0x200010ac
 8001e4c:	200010b4 	.word	0x200010b4

08001e50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001e58:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <prvInsertBlockIntoFreeList+0xa8>)
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	e002      	b.n	8001e64 <prvInsertBlockIntoFreeList+0x14>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d8f7      	bhi.n	8001e5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	4413      	add	r3, r2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d108      	bne.n	8001e92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	441a      	add	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	441a      	add	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d118      	bne.n	8001ed8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <prvInsertBlockIntoFreeList+0xac>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d00d      	beq.n	8001ece <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	441a      	add	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	e008      	b.n	8001ee0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001ece:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <prvInsertBlockIntoFreeList+0xac>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e003      	b.n	8001ee0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d002      	beq.n	8001eee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr
 8001ef8:	200010a0 	.word	0x200010a0
 8001efc:	200010a8 	.word	0x200010a8

08001f00 <__errno>:
 8001f00:	4b01      	ldr	r3, [pc, #4]	; (8001f08 <__errno+0x8>)
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20000018 	.word	0x20000018

08001f0c <std>:
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	b510      	push	{r4, lr}
 8001f10:	4604      	mov	r4, r0
 8001f12:	e9c0 3300 	strd	r3, r3, [r0]
 8001f16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f1a:	6083      	str	r3, [r0, #8]
 8001f1c:	8181      	strh	r1, [r0, #12]
 8001f1e:	6643      	str	r3, [r0, #100]	; 0x64
 8001f20:	81c2      	strh	r2, [r0, #14]
 8001f22:	6183      	str	r3, [r0, #24]
 8001f24:	4619      	mov	r1, r3
 8001f26:	2208      	movs	r2, #8
 8001f28:	305c      	adds	r0, #92	; 0x5c
 8001f2a:	f000 f90c 	bl	8002146 <memset>
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <std+0x38>)
 8001f30:	6224      	str	r4, [r4, #32]
 8001f32:	6263      	str	r3, [r4, #36]	; 0x24
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <std+0x3c>)
 8001f36:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <std+0x40>)
 8001f3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <std+0x44>)
 8001f3e:	6323      	str	r3, [r4, #48]	; 0x30
 8001f40:	bd10      	pop	{r4, pc}
 8001f42:	bf00      	nop
 8001f44:	08002491 	.word	0x08002491
 8001f48:	080024b3 	.word	0x080024b3
 8001f4c:	080024eb 	.word	0x080024eb
 8001f50:	0800250f 	.word	0x0800250f

08001f54 <_cleanup_r>:
 8001f54:	4901      	ldr	r1, [pc, #4]	; (8001f5c <_cleanup_r+0x8>)
 8001f56:	f000 b8af 	b.w	80020b8 <_fwalk_reent>
 8001f5a:	bf00      	nop
 8001f5c:	080027e1 	.word	0x080027e1

08001f60 <__sfmoreglue>:
 8001f60:	2268      	movs	r2, #104	; 0x68
 8001f62:	b570      	push	{r4, r5, r6, lr}
 8001f64:	1e4d      	subs	r5, r1, #1
 8001f66:	4355      	muls	r5, r2
 8001f68:	460e      	mov	r6, r1
 8001f6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001f6e:	f000 f913 	bl	8002198 <_malloc_r>
 8001f72:	4604      	mov	r4, r0
 8001f74:	b140      	cbz	r0, 8001f88 <__sfmoreglue+0x28>
 8001f76:	2100      	movs	r1, #0
 8001f78:	e9c0 1600 	strd	r1, r6, [r0]
 8001f7c:	300c      	adds	r0, #12
 8001f7e:	60a0      	str	r0, [r4, #8]
 8001f80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001f84:	f000 f8df 	bl	8002146 <memset>
 8001f88:	4620      	mov	r0, r4
 8001f8a:	bd70      	pop	{r4, r5, r6, pc}

08001f8c <__sfp_lock_acquire>:
 8001f8c:	4801      	ldr	r0, [pc, #4]	; (8001f94 <__sfp_lock_acquire+0x8>)
 8001f8e:	f000 b8d8 	b.w	8002142 <__retarget_lock_acquire_recursive>
 8001f92:	bf00      	nop
 8001f94:	200010b9 	.word	0x200010b9

08001f98 <__sfp_lock_release>:
 8001f98:	4801      	ldr	r0, [pc, #4]	; (8001fa0 <__sfp_lock_release+0x8>)
 8001f9a:	f000 b8d3 	b.w	8002144 <__retarget_lock_release_recursive>
 8001f9e:	bf00      	nop
 8001fa0:	200010b9 	.word	0x200010b9

08001fa4 <__sinit_lock_acquire>:
 8001fa4:	4801      	ldr	r0, [pc, #4]	; (8001fac <__sinit_lock_acquire+0x8>)
 8001fa6:	f000 b8cc 	b.w	8002142 <__retarget_lock_acquire_recursive>
 8001faa:	bf00      	nop
 8001fac:	200010ba 	.word	0x200010ba

08001fb0 <__sinit_lock_release>:
 8001fb0:	4801      	ldr	r0, [pc, #4]	; (8001fb8 <__sinit_lock_release+0x8>)
 8001fb2:	f000 b8c7 	b.w	8002144 <__retarget_lock_release_recursive>
 8001fb6:	bf00      	nop
 8001fb8:	200010ba 	.word	0x200010ba

08001fbc <__sinit>:
 8001fbc:	b510      	push	{r4, lr}
 8001fbe:	4604      	mov	r4, r0
 8001fc0:	f7ff fff0 	bl	8001fa4 <__sinit_lock_acquire>
 8001fc4:	69a3      	ldr	r3, [r4, #24]
 8001fc6:	b11b      	cbz	r3, 8001fd0 <__sinit+0x14>
 8001fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fcc:	f7ff bff0 	b.w	8001fb0 <__sinit_lock_release>
 8001fd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001fd4:	6523      	str	r3, [r4, #80]	; 0x50
 8001fd6:	4b13      	ldr	r3, [pc, #76]	; (8002024 <__sinit+0x68>)
 8001fd8:	4a13      	ldr	r2, [pc, #76]	; (8002028 <__sinit+0x6c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	62a2      	str	r2, [r4, #40]	; 0x28
 8001fde:	42a3      	cmp	r3, r4
 8001fe0:	bf08      	it	eq
 8001fe2:	2301      	moveq	r3, #1
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	bf08      	it	eq
 8001fe8:	61a3      	streq	r3, [r4, #24]
 8001fea:	f000 f81f 	bl	800202c <__sfp>
 8001fee:	6060      	str	r0, [r4, #4]
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	f000 f81b 	bl	800202c <__sfp>
 8001ff6:	60a0      	str	r0, [r4, #8]
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f000 f817 	bl	800202c <__sfp>
 8001ffe:	2200      	movs	r2, #0
 8002000:	2104      	movs	r1, #4
 8002002:	60e0      	str	r0, [r4, #12]
 8002004:	6860      	ldr	r0, [r4, #4]
 8002006:	f7ff ff81 	bl	8001f0c <std>
 800200a:	2201      	movs	r2, #1
 800200c:	2109      	movs	r1, #9
 800200e:	68a0      	ldr	r0, [r4, #8]
 8002010:	f7ff ff7c 	bl	8001f0c <std>
 8002014:	2202      	movs	r2, #2
 8002016:	2112      	movs	r1, #18
 8002018:	68e0      	ldr	r0, [r4, #12]
 800201a:	f7ff ff77 	bl	8001f0c <std>
 800201e:	2301      	movs	r3, #1
 8002020:	61a3      	str	r3, [r4, #24]
 8002022:	e7d1      	b.n	8001fc8 <__sinit+0xc>
 8002024:	08003150 	.word	0x08003150
 8002028:	08001f55 	.word	0x08001f55

0800202c <__sfp>:
 800202c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800202e:	4607      	mov	r7, r0
 8002030:	f7ff ffac 	bl	8001f8c <__sfp_lock_acquire>
 8002034:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <__sfp+0x84>)
 8002036:	681e      	ldr	r6, [r3, #0]
 8002038:	69b3      	ldr	r3, [r6, #24]
 800203a:	b913      	cbnz	r3, 8002042 <__sfp+0x16>
 800203c:	4630      	mov	r0, r6
 800203e:	f7ff ffbd 	bl	8001fbc <__sinit>
 8002042:	3648      	adds	r6, #72	; 0x48
 8002044:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002048:	3b01      	subs	r3, #1
 800204a:	d503      	bpl.n	8002054 <__sfp+0x28>
 800204c:	6833      	ldr	r3, [r6, #0]
 800204e:	b30b      	cbz	r3, 8002094 <__sfp+0x68>
 8002050:	6836      	ldr	r6, [r6, #0]
 8002052:	e7f7      	b.n	8002044 <__sfp+0x18>
 8002054:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002058:	b9d5      	cbnz	r5, 8002090 <__sfp+0x64>
 800205a:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <__sfp+0x88>)
 800205c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002060:	60e3      	str	r3, [r4, #12]
 8002062:	6665      	str	r5, [r4, #100]	; 0x64
 8002064:	f000 f86c 	bl	8002140 <__retarget_lock_init_recursive>
 8002068:	f7ff ff96 	bl	8001f98 <__sfp_lock_release>
 800206c:	2208      	movs	r2, #8
 800206e:	4629      	mov	r1, r5
 8002070:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002074:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002078:	6025      	str	r5, [r4, #0]
 800207a:	61a5      	str	r5, [r4, #24]
 800207c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002080:	f000 f861 	bl	8002146 <memset>
 8002084:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002088:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800208c:	4620      	mov	r0, r4
 800208e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002090:	3468      	adds	r4, #104	; 0x68
 8002092:	e7d9      	b.n	8002048 <__sfp+0x1c>
 8002094:	2104      	movs	r1, #4
 8002096:	4638      	mov	r0, r7
 8002098:	f7ff ff62 	bl	8001f60 <__sfmoreglue>
 800209c:	4604      	mov	r4, r0
 800209e:	6030      	str	r0, [r6, #0]
 80020a0:	2800      	cmp	r0, #0
 80020a2:	d1d5      	bne.n	8002050 <__sfp+0x24>
 80020a4:	f7ff ff78 	bl	8001f98 <__sfp_lock_release>
 80020a8:	230c      	movs	r3, #12
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	e7ee      	b.n	800208c <__sfp+0x60>
 80020ae:	bf00      	nop
 80020b0:	08003150 	.word	0x08003150
 80020b4:	ffff0001 	.word	0xffff0001

080020b8 <_fwalk_reent>:
 80020b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020bc:	4606      	mov	r6, r0
 80020be:	4688      	mov	r8, r1
 80020c0:	2700      	movs	r7, #0
 80020c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80020c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80020ca:	f1b9 0901 	subs.w	r9, r9, #1
 80020ce:	d505      	bpl.n	80020dc <_fwalk_reent+0x24>
 80020d0:	6824      	ldr	r4, [r4, #0]
 80020d2:	2c00      	cmp	r4, #0
 80020d4:	d1f7      	bne.n	80020c6 <_fwalk_reent+0xe>
 80020d6:	4638      	mov	r0, r7
 80020d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80020dc:	89ab      	ldrh	r3, [r5, #12]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d907      	bls.n	80020f2 <_fwalk_reent+0x3a>
 80020e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80020e6:	3301      	adds	r3, #1
 80020e8:	d003      	beq.n	80020f2 <_fwalk_reent+0x3a>
 80020ea:	4629      	mov	r1, r5
 80020ec:	4630      	mov	r0, r6
 80020ee:	47c0      	blx	r8
 80020f0:	4307      	orrs	r7, r0
 80020f2:	3568      	adds	r5, #104	; 0x68
 80020f4:	e7e9      	b.n	80020ca <_fwalk_reent+0x12>
	...

080020f8 <__libc_init_array>:
 80020f8:	b570      	push	{r4, r5, r6, lr}
 80020fa:	2600      	movs	r6, #0
 80020fc:	4d0c      	ldr	r5, [pc, #48]	; (8002130 <__libc_init_array+0x38>)
 80020fe:	4c0d      	ldr	r4, [pc, #52]	; (8002134 <__libc_init_array+0x3c>)
 8002100:	1b64      	subs	r4, r4, r5
 8002102:	10a4      	asrs	r4, r4, #2
 8002104:	42a6      	cmp	r6, r4
 8002106:	d109      	bne.n	800211c <__libc_init_array+0x24>
 8002108:	f000 ffa2 	bl	8003050 <_init>
 800210c:	2600      	movs	r6, #0
 800210e:	4d0a      	ldr	r5, [pc, #40]	; (8002138 <__libc_init_array+0x40>)
 8002110:	4c0a      	ldr	r4, [pc, #40]	; (800213c <__libc_init_array+0x44>)
 8002112:	1b64      	subs	r4, r4, r5
 8002114:	10a4      	asrs	r4, r4, #2
 8002116:	42a6      	cmp	r6, r4
 8002118:	d105      	bne.n	8002126 <__libc_init_array+0x2e>
 800211a:	bd70      	pop	{r4, r5, r6, pc}
 800211c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002120:	4798      	blx	r3
 8002122:	3601      	adds	r6, #1
 8002124:	e7ee      	b.n	8002104 <__libc_init_array+0xc>
 8002126:	f855 3b04 	ldr.w	r3, [r5], #4
 800212a:	4798      	blx	r3
 800212c:	3601      	adds	r6, #1
 800212e:	e7f2      	b.n	8002116 <__libc_init_array+0x1e>
 8002130:	08003188 	.word	0x08003188
 8002134:	08003188 	.word	0x08003188
 8002138:	08003188 	.word	0x08003188
 800213c:	0800318c 	.word	0x0800318c

08002140 <__retarget_lock_init_recursive>:
 8002140:	4770      	bx	lr

08002142 <__retarget_lock_acquire_recursive>:
 8002142:	4770      	bx	lr

08002144 <__retarget_lock_release_recursive>:
 8002144:	4770      	bx	lr

08002146 <memset>:
 8002146:	4603      	mov	r3, r0
 8002148:	4402      	add	r2, r0
 800214a:	4293      	cmp	r3, r2
 800214c:	d100      	bne.n	8002150 <memset+0xa>
 800214e:	4770      	bx	lr
 8002150:	f803 1b01 	strb.w	r1, [r3], #1
 8002154:	e7f9      	b.n	800214a <memset+0x4>
	...

08002158 <sbrk_aligned>:
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	4e0e      	ldr	r6, [pc, #56]	; (8002194 <sbrk_aligned+0x3c>)
 800215c:	460c      	mov	r4, r1
 800215e:	6831      	ldr	r1, [r6, #0]
 8002160:	4605      	mov	r5, r0
 8002162:	b911      	cbnz	r1, 800216a <sbrk_aligned+0x12>
 8002164:	f000 f984 	bl	8002470 <_sbrk_r>
 8002168:	6030      	str	r0, [r6, #0]
 800216a:	4621      	mov	r1, r4
 800216c:	4628      	mov	r0, r5
 800216e:	f000 f97f 	bl	8002470 <_sbrk_r>
 8002172:	1c43      	adds	r3, r0, #1
 8002174:	d00a      	beq.n	800218c <sbrk_aligned+0x34>
 8002176:	1cc4      	adds	r4, r0, #3
 8002178:	f024 0403 	bic.w	r4, r4, #3
 800217c:	42a0      	cmp	r0, r4
 800217e:	d007      	beq.n	8002190 <sbrk_aligned+0x38>
 8002180:	1a21      	subs	r1, r4, r0
 8002182:	4628      	mov	r0, r5
 8002184:	f000 f974 	bl	8002470 <_sbrk_r>
 8002188:	3001      	adds	r0, #1
 800218a:	d101      	bne.n	8002190 <sbrk_aligned+0x38>
 800218c:	f04f 34ff 	mov.w	r4, #4294967295
 8002190:	4620      	mov	r0, r4
 8002192:	bd70      	pop	{r4, r5, r6, pc}
 8002194:	200010c0 	.word	0x200010c0

08002198 <_malloc_r>:
 8002198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800219c:	1ccd      	adds	r5, r1, #3
 800219e:	f025 0503 	bic.w	r5, r5, #3
 80021a2:	3508      	adds	r5, #8
 80021a4:	2d0c      	cmp	r5, #12
 80021a6:	bf38      	it	cc
 80021a8:	250c      	movcc	r5, #12
 80021aa:	2d00      	cmp	r5, #0
 80021ac:	4607      	mov	r7, r0
 80021ae:	db01      	blt.n	80021b4 <_malloc_r+0x1c>
 80021b0:	42a9      	cmp	r1, r5
 80021b2:	d905      	bls.n	80021c0 <_malloc_r+0x28>
 80021b4:	230c      	movs	r3, #12
 80021b6:	2600      	movs	r6, #0
 80021b8:	603b      	str	r3, [r7, #0]
 80021ba:	4630      	mov	r0, r6
 80021bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021c0:	4e2e      	ldr	r6, [pc, #184]	; (800227c <_malloc_r+0xe4>)
 80021c2:	f000 fbc1 	bl	8002948 <__malloc_lock>
 80021c6:	6833      	ldr	r3, [r6, #0]
 80021c8:	461c      	mov	r4, r3
 80021ca:	bb34      	cbnz	r4, 800221a <_malloc_r+0x82>
 80021cc:	4629      	mov	r1, r5
 80021ce:	4638      	mov	r0, r7
 80021d0:	f7ff ffc2 	bl	8002158 <sbrk_aligned>
 80021d4:	1c43      	adds	r3, r0, #1
 80021d6:	4604      	mov	r4, r0
 80021d8:	d14d      	bne.n	8002276 <_malloc_r+0xde>
 80021da:	6834      	ldr	r4, [r6, #0]
 80021dc:	4626      	mov	r6, r4
 80021de:	2e00      	cmp	r6, #0
 80021e0:	d140      	bne.n	8002264 <_malloc_r+0xcc>
 80021e2:	6823      	ldr	r3, [r4, #0]
 80021e4:	4631      	mov	r1, r6
 80021e6:	4638      	mov	r0, r7
 80021e8:	eb04 0803 	add.w	r8, r4, r3
 80021ec:	f000 f940 	bl	8002470 <_sbrk_r>
 80021f0:	4580      	cmp	r8, r0
 80021f2:	d13a      	bne.n	800226a <_malloc_r+0xd2>
 80021f4:	6821      	ldr	r1, [r4, #0]
 80021f6:	3503      	adds	r5, #3
 80021f8:	1a6d      	subs	r5, r5, r1
 80021fa:	f025 0503 	bic.w	r5, r5, #3
 80021fe:	3508      	adds	r5, #8
 8002200:	2d0c      	cmp	r5, #12
 8002202:	bf38      	it	cc
 8002204:	250c      	movcc	r5, #12
 8002206:	4638      	mov	r0, r7
 8002208:	4629      	mov	r1, r5
 800220a:	f7ff ffa5 	bl	8002158 <sbrk_aligned>
 800220e:	3001      	adds	r0, #1
 8002210:	d02b      	beq.n	800226a <_malloc_r+0xd2>
 8002212:	6823      	ldr	r3, [r4, #0]
 8002214:	442b      	add	r3, r5
 8002216:	6023      	str	r3, [r4, #0]
 8002218:	e00e      	b.n	8002238 <_malloc_r+0xa0>
 800221a:	6822      	ldr	r2, [r4, #0]
 800221c:	1b52      	subs	r2, r2, r5
 800221e:	d41e      	bmi.n	800225e <_malloc_r+0xc6>
 8002220:	2a0b      	cmp	r2, #11
 8002222:	d916      	bls.n	8002252 <_malloc_r+0xba>
 8002224:	1961      	adds	r1, r4, r5
 8002226:	42a3      	cmp	r3, r4
 8002228:	6025      	str	r5, [r4, #0]
 800222a:	bf18      	it	ne
 800222c:	6059      	strne	r1, [r3, #4]
 800222e:	6863      	ldr	r3, [r4, #4]
 8002230:	bf08      	it	eq
 8002232:	6031      	streq	r1, [r6, #0]
 8002234:	5162      	str	r2, [r4, r5]
 8002236:	604b      	str	r3, [r1, #4]
 8002238:	4638      	mov	r0, r7
 800223a:	f104 060b 	add.w	r6, r4, #11
 800223e:	f000 fb89 	bl	8002954 <__malloc_unlock>
 8002242:	f026 0607 	bic.w	r6, r6, #7
 8002246:	1d23      	adds	r3, r4, #4
 8002248:	1af2      	subs	r2, r6, r3
 800224a:	d0b6      	beq.n	80021ba <_malloc_r+0x22>
 800224c:	1b9b      	subs	r3, r3, r6
 800224e:	50a3      	str	r3, [r4, r2]
 8002250:	e7b3      	b.n	80021ba <_malloc_r+0x22>
 8002252:	6862      	ldr	r2, [r4, #4]
 8002254:	42a3      	cmp	r3, r4
 8002256:	bf0c      	ite	eq
 8002258:	6032      	streq	r2, [r6, #0]
 800225a:	605a      	strne	r2, [r3, #4]
 800225c:	e7ec      	b.n	8002238 <_malloc_r+0xa0>
 800225e:	4623      	mov	r3, r4
 8002260:	6864      	ldr	r4, [r4, #4]
 8002262:	e7b2      	b.n	80021ca <_malloc_r+0x32>
 8002264:	4634      	mov	r4, r6
 8002266:	6876      	ldr	r6, [r6, #4]
 8002268:	e7b9      	b.n	80021de <_malloc_r+0x46>
 800226a:	230c      	movs	r3, #12
 800226c:	4638      	mov	r0, r7
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	f000 fb70 	bl	8002954 <__malloc_unlock>
 8002274:	e7a1      	b.n	80021ba <_malloc_r+0x22>
 8002276:	6025      	str	r5, [r4, #0]
 8002278:	e7de      	b.n	8002238 <_malloc_r+0xa0>
 800227a:	bf00      	nop
 800227c:	200010bc 	.word	0x200010bc

08002280 <iprintf>:
 8002280:	b40f      	push	{r0, r1, r2, r3}
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <iprintf+0x2c>)
 8002284:	b513      	push	{r0, r1, r4, lr}
 8002286:	681c      	ldr	r4, [r3, #0]
 8002288:	b124      	cbz	r4, 8002294 <iprintf+0x14>
 800228a:	69a3      	ldr	r3, [r4, #24]
 800228c:	b913      	cbnz	r3, 8002294 <iprintf+0x14>
 800228e:	4620      	mov	r0, r4
 8002290:	f7ff fe94 	bl	8001fbc <__sinit>
 8002294:	ab05      	add	r3, sp, #20
 8002296:	4620      	mov	r0, r4
 8002298:	9a04      	ldr	r2, [sp, #16]
 800229a:	68a1      	ldr	r1, [r4, #8]
 800229c:	9301      	str	r3, [sp, #4]
 800229e:	f000 fbcf 	bl	8002a40 <_vfiprintf_r>
 80022a2:	b002      	add	sp, #8
 80022a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022a8:	b004      	add	sp, #16
 80022aa:	4770      	bx	lr
 80022ac:	20000018 	.word	0x20000018

080022b0 <_puts_r>:
 80022b0:	b570      	push	{r4, r5, r6, lr}
 80022b2:	460e      	mov	r6, r1
 80022b4:	4605      	mov	r5, r0
 80022b6:	b118      	cbz	r0, 80022c0 <_puts_r+0x10>
 80022b8:	6983      	ldr	r3, [r0, #24]
 80022ba:	b90b      	cbnz	r3, 80022c0 <_puts_r+0x10>
 80022bc:	f7ff fe7e 	bl	8001fbc <__sinit>
 80022c0:	69ab      	ldr	r3, [r5, #24]
 80022c2:	68ac      	ldr	r4, [r5, #8]
 80022c4:	b913      	cbnz	r3, 80022cc <_puts_r+0x1c>
 80022c6:	4628      	mov	r0, r5
 80022c8:	f7ff fe78 	bl	8001fbc <__sinit>
 80022cc:	4b2c      	ldr	r3, [pc, #176]	; (8002380 <_puts_r+0xd0>)
 80022ce:	429c      	cmp	r4, r3
 80022d0:	d120      	bne.n	8002314 <_puts_r+0x64>
 80022d2:	686c      	ldr	r4, [r5, #4]
 80022d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022d6:	07db      	lsls	r3, r3, #31
 80022d8:	d405      	bmi.n	80022e6 <_puts_r+0x36>
 80022da:	89a3      	ldrh	r3, [r4, #12]
 80022dc:	0598      	lsls	r0, r3, #22
 80022de:	d402      	bmi.n	80022e6 <_puts_r+0x36>
 80022e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022e2:	f7ff ff2e 	bl	8002142 <__retarget_lock_acquire_recursive>
 80022e6:	89a3      	ldrh	r3, [r4, #12]
 80022e8:	0719      	lsls	r1, r3, #28
 80022ea:	d51d      	bpl.n	8002328 <_puts_r+0x78>
 80022ec:	6923      	ldr	r3, [r4, #16]
 80022ee:	b1db      	cbz	r3, 8002328 <_puts_r+0x78>
 80022f0:	3e01      	subs	r6, #1
 80022f2:	68a3      	ldr	r3, [r4, #8]
 80022f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80022f8:	3b01      	subs	r3, #1
 80022fa:	60a3      	str	r3, [r4, #8]
 80022fc:	bb39      	cbnz	r1, 800234e <_puts_r+0x9e>
 80022fe:	2b00      	cmp	r3, #0
 8002300:	da38      	bge.n	8002374 <_puts_r+0xc4>
 8002302:	4622      	mov	r2, r4
 8002304:	210a      	movs	r1, #10
 8002306:	4628      	mov	r0, r5
 8002308:	f000 f906 	bl	8002518 <__swbuf_r>
 800230c:	3001      	adds	r0, #1
 800230e:	d011      	beq.n	8002334 <_puts_r+0x84>
 8002310:	250a      	movs	r5, #10
 8002312:	e011      	b.n	8002338 <_puts_r+0x88>
 8002314:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <_puts_r+0xd4>)
 8002316:	429c      	cmp	r4, r3
 8002318:	d101      	bne.n	800231e <_puts_r+0x6e>
 800231a:	68ac      	ldr	r4, [r5, #8]
 800231c:	e7da      	b.n	80022d4 <_puts_r+0x24>
 800231e:	4b1a      	ldr	r3, [pc, #104]	; (8002388 <_puts_r+0xd8>)
 8002320:	429c      	cmp	r4, r3
 8002322:	bf08      	it	eq
 8002324:	68ec      	ldreq	r4, [r5, #12]
 8002326:	e7d5      	b.n	80022d4 <_puts_r+0x24>
 8002328:	4621      	mov	r1, r4
 800232a:	4628      	mov	r0, r5
 800232c:	f000 f958 	bl	80025e0 <__swsetup_r>
 8002330:	2800      	cmp	r0, #0
 8002332:	d0dd      	beq.n	80022f0 <_puts_r+0x40>
 8002334:	f04f 35ff 	mov.w	r5, #4294967295
 8002338:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800233a:	07da      	lsls	r2, r3, #31
 800233c:	d405      	bmi.n	800234a <_puts_r+0x9a>
 800233e:	89a3      	ldrh	r3, [r4, #12]
 8002340:	059b      	lsls	r3, r3, #22
 8002342:	d402      	bmi.n	800234a <_puts_r+0x9a>
 8002344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002346:	f7ff fefd 	bl	8002144 <__retarget_lock_release_recursive>
 800234a:	4628      	mov	r0, r5
 800234c:	bd70      	pop	{r4, r5, r6, pc}
 800234e:	2b00      	cmp	r3, #0
 8002350:	da04      	bge.n	800235c <_puts_r+0xac>
 8002352:	69a2      	ldr	r2, [r4, #24]
 8002354:	429a      	cmp	r2, r3
 8002356:	dc06      	bgt.n	8002366 <_puts_r+0xb6>
 8002358:	290a      	cmp	r1, #10
 800235a:	d004      	beq.n	8002366 <_puts_r+0xb6>
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	6022      	str	r2, [r4, #0]
 8002362:	7019      	strb	r1, [r3, #0]
 8002364:	e7c5      	b.n	80022f2 <_puts_r+0x42>
 8002366:	4622      	mov	r2, r4
 8002368:	4628      	mov	r0, r5
 800236a:	f000 f8d5 	bl	8002518 <__swbuf_r>
 800236e:	3001      	adds	r0, #1
 8002370:	d1bf      	bne.n	80022f2 <_puts_r+0x42>
 8002372:	e7df      	b.n	8002334 <_puts_r+0x84>
 8002374:	250a      	movs	r5, #10
 8002376:	6823      	ldr	r3, [r4, #0]
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	6022      	str	r2, [r4, #0]
 800237c:	701d      	strb	r5, [r3, #0]
 800237e:	e7db      	b.n	8002338 <_puts_r+0x88>
 8002380:	08003110 	.word	0x08003110
 8002384:	08003130 	.word	0x08003130
 8002388:	080030f0 	.word	0x080030f0

0800238c <puts>:
 800238c:	4b02      	ldr	r3, [pc, #8]	; (8002398 <puts+0xc>)
 800238e:	4601      	mov	r1, r0
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	f7ff bf8d 	b.w	80022b0 <_puts_r>
 8002396:	bf00      	nop
 8002398:	20000018 	.word	0x20000018

0800239c <cleanup_glue>:
 800239c:	b538      	push	{r3, r4, r5, lr}
 800239e:	460c      	mov	r4, r1
 80023a0:	6809      	ldr	r1, [r1, #0]
 80023a2:	4605      	mov	r5, r0
 80023a4:	b109      	cbz	r1, 80023aa <cleanup_glue+0xe>
 80023a6:	f7ff fff9 	bl	800239c <cleanup_glue>
 80023aa:	4621      	mov	r1, r4
 80023ac:	4628      	mov	r0, r5
 80023ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023b2:	f000 bad5 	b.w	8002960 <_free_r>
	...

080023b8 <_reclaim_reent>:
 80023b8:	4b2c      	ldr	r3, [pc, #176]	; (800246c <_reclaim_reent+0xb4>)
 80023ba:	b570      	push	{r4, r5, r6, lr}
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4604      	mov	r4, r0
 80023c0:	4283      	cmp	r3, r0
 80023c2:	d051      	beq.n	8002468 <_reclaim_reent+0xb0>
 80023c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023c6:	b143      	cbz	r3, 80023da <_reclaim_reent+0x22>
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d14a      	bne.n	8002464 <_reclaim_reent+0xac>
 80023ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023d0:	6819      	ldr	r1, [r3, #0]
 80023d2:	b111      	cbz	r1, 80023da <_reclaim_reent+0x22>
 80023d4:	4620      	mov	r0, r4
 80023d6:	f000 fac3 	bl	8002960 <_free_r>
 80023da:	6961      	ldr	r1, [r4, #20]
 80023dc:	b111      	cbz	r1, 80023e4 <_reclaim_reent+0x2c>
 80023de:	4620      	mov	r0, r4
 80023e0:	f000 fabe 	bl	8002960 <_free_r>
 80023e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80023e6:	b111      	cbz	r1, 80023ee <_reclaim_reent+0x36>
 80023e8:	4620      	mov	r0, r4
 80023ea:	f000 fab9 	bl	8002960 <_free_r>
 80023ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80023f0:	b111      	cbz	r1, 80023f8 <_reclaim_reent+0x40>
 80023f2:	4620      	mov	r0, r4
 80023f4:	f000 fab4 	bl	8002960 <_free_r>
 80023f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80023fa:	b111      	cbz	r1, 8002402 <_reclaim_reent+0x4a>
 80023fc:	4620      	mov	r0, r4
 80023fe:	f000 faaf 	bl	8002960 <_free_r>
 8002402:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002404:	b111      	cbz	r1, 800240c <_reclaim_reent+0x54>
 8002406:	4620      	mov	r0, r4
 8002408:	f000 faaa 	bl	8002960 <_free_r>
 800240c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800240e:	b111      	cbz	r1, 8002416 <_reclaim_reent+0x5e>
 8002410:	4620      	mov	r0, r4
 8002412:	f000 faa5 	bl	8002960 <_free_r>
 8002416:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002418:	b111      	cbz	r1, 8002420 <_reclaim_reent+0x68>
 800241a:	4620      	mov	r0, r4
 800241c:	f000 faa0 	bl	8002960 <_free_r>
 8002420:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002422:	b111      	cbz	r1, 800242a <_reclaim_reent+0x72>
 8002424:	4620      	mov	r0, r4
 8002426:	f000 fa9b 	bl	8002960 <_free_r>
 800242a:	69a3      	ldr	r3, [r4, #24]
 800242c:	b1e3      	cbz	r3, 8002468 <_reclaim_reent+0xb0>
 800242e:	4620      	mov	r0, r4
 8002430:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002432:	4798      	blx	r3
 8002434:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002436:	b1b9      	cbz	r1, 8002468 <_reclaim_reent+0xb0>
 8002438:	4620      	mov	r0, r4
 800243a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800243e:	f7ff bfad 	b.w	800239c <cleanup_glue>
 8002442:	5949      	ldr	r1, [r1, r5]
 8002444:	b941      	cbnz	r1, 8002458 <_reclaim_reent+0xa0>
 8002446:	3504      	adds	r5, #4
 8002448:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800244a:	2d80      	cmp	r5, #128	; 0x80
 800244c:	68d9      	ldr	r1, [r3, #12]
 800244e:	d1f8      	bne.n	8002442 <_reclaim_reent+0x8a>
 8002450:	4620      	mov	r0, r4
 8002452:	f000 fa85 	bl	8002960 <_free_r>
 8002456:	e7ba      	b.n	80023ce <_reclaim_reent+0x16>
 8002458:	680e      	ldr	r6, [r1, #0]
 800245a:	4620      	mov	r0, r4
 800245c:	f000 fa80 	bl	8002960 <_free_r>
 8002460:	4631      	mov	r1, r6
 8002462:	e7ef      	b.n	8002444 <_reclaim_reent+0x8c>
 8002464:	2500      	movs	r5, #0
 8002466:	e7ef      	b.n	8002448 <_reclaim_reent+0x90>
 8002468:	bd70      	pop	{r4, r5, r6, pc}
 800246a:	bf00      	nop
 800246c:	20000018 	.word	0x20000018

08002470 <_sbrk_r>:
 8002470:	b538      	push	{r3, r4, r5, lr}
 8002472:	2300      	movs	r3, #0
 8002474:	4d05      	ldr	r5, [pc, #20]	; (800248c <_sbrk_r+0x1c>)
 8002476:	4604      	mov	r4, r0
 8002478:	4608      	mov	r0, r1
 800247a:	602b      	str	r3, [r5, #0]
 800247c:	f7fe fad4 	bl	8000a28 <_sbrk>
 8002480:	1c43      	adds	r3, r0, #1
 8002482:	d102      	bne.n	800248a <_sbrk_r+0x1a>
 8002484:	682b      	ldr	r3, [r5, #0]
 8002486:	b103      	cbz	r3, 800248a <_sbrk_r+0x1a>
 8002488:	6023      	str	r3, [r4, #0]
 800248a:	bd38      	pop	{r3, r4, r5, pc}
 800248c:	200010c4 	.word	0x200010c4

08002490 <__sread>:
 8002490:	b510      	push	{r4, lr}
 8002492:	460c      	mov	r4, r1
 8002494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002498:	f000 fd98 	bl	8002fcc <_read_r>
 800249c:	2800      	cmp	r0, #0
 800249e:	bfab      	itete	ge
 80024a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80024a2:	89a3      	ldrhlt	r3, [r4, #12]
 80024a4:	181b      	addge	r3, r3, r0
 80024a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80024aa:	bfac      	ite	ge
 80024ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80024ae:	81a3      	strhlt	r3, [r4, #12]
 80024b0:	bd10      	pop	{r4, pc}

080024b2 <__swrite>:
 80024b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024b6:	461f      	mov	r7, r3
 80024b8:	898b      	ldrh	r3, [r1, #12]
 80024ba:	4605      	mov	r5, r0
 80024bc:	05db      	lsls	r3, r3, #23
 80024be:	460c      	mov	r4, r1
 80024c0:	4616      	mov	r6, r2
 80024c2:	d505      	bpl.n	80024d0 <__swrite+0x1e>
 80024c4:	2302      	movs	r3, #2
 80024c6:	2200      	movs	r2, #0
 80024c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024cc:	f000 f9c4 	bl	8002858 <_lseek_r>
 80024d0:	89a3      	ldrh	r3, [r4, #12]
 80024d2:	4632      	mov	r2, r6
 80024d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024d8:	81a3      	strh	r3, [r4, #12]
 80024da:	4628      	mov	r0, r5
 80024dc:	463b      	mov	r3, r7
 80024de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024e6:	f000 b869 	b.w	80025bc <_write_r>

080024ea <__sseek>:
 80024ea:	b510      	push	{r4, lr}
 80024ec:	460c      	mov	r4, r1
 80024ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024f2:	f000 f9b1 	bl	8002858 <_lseek_r>
 80024f6:	1c43      	adds	r3, r0, #1
 80024f8:	89a3      	ldrh	r3, [r4, #12]
 80024fa:	bf15      	itete	ne
 80024fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80024fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002502:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002506:	81a3      	strheq	r3, [r4, #12]
 8002508:	bf18      	it	ne
 800250a:	81a3      	strhne	r3, [r4, #12]
 800250c:	bd10      	pop	{r4, pc}

0800250e <__sclose>:
 800250e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002512:	f000 b8d3 	b.w	80026bc <_close_r>
	...

08002518 <__swbuf_r>:
 8002518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800251a:	460e      	mov	r6, r1
 800251c:	4614      	mov	r4, r2
 800251e:	4605      	mov	r5, r0
 8002520:	b118      	cbz	r0, 800252a <__swbuf_r+0x12>
 8002522:	6983      	ldr	r3, [r0, #24]
 8002524:	b90b      	cbnz	r3, 800252a <__swbuf_r+0x12>
 8002526:	f7ff fd49 	bl	8001fbc <__sinit>
 800252a:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <__swbuf_r+0x98>)
 800252c:	429c      	cmp	r4, r3
 800252e:	d12b      	bne.n	8002588 <__swbuf_r+0x70>
 8002530:	686c      	ldr	r4, [r5, #4]
 8002532:	69a3      	ldr	r3, [r4, #24]
 8002534:	60a3      	str	r3, [r4, #8]
 8002536:	89a3      	ldrh	r3, [r4, #12]
 8002538:	071a      	lsls	r2, r3, #28
 800253a:	d52f      	bpl.n	800259c <__swbuf_r+0x84>
 800253c:	6923      	ldr	r3, [r4, #16]
 800253e:	b36b      	cbz	r3, 800259c <__swbuf_r+0x84>
 8002540:	6923      	ldr	r3, [r4, #16]
 8002542:	6820      	ldr	r0, [r4, #0]
 8002544:	b2f6      	uxtb	r6, r6
 8002546:	1ac0      	subs	r0, r0, r3
 8002548:	6963      	ldr	r3, [r4, #20]
 800254a:	4637      	mov	r7, r6
 800254c:	4283      	cmp	r3, r0
 800254e:	dc04      	bgt.n	800255a <__swbuf_r+0x42>
 8002550:	4621      	mov	r1, r4
 8002552:	4628      	mov	r0, r5
 8002554:	f000 f944 	bl	80027e0 <_fflush_r>
 8002558:	bb30      	cbnz	r0, 80025a8 <__swbuf_r+0x90>
 800255a:	68a3      	ldr	r3, [r4, #8]
 800255c:	3001      	adds	r0, #1
 800255e:	3b01      	subs	r3, #1
 8002560:	60a3      	str	r3, [r4, #8]
 8002562:	6823      	ldr	r3, [r4, #0]
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	6022      	str	r2, [r4, #0]
 8002568:	701e      	strb	r6, [r3, #0]
 800256a:	6963      	ldr	r3, [r4, #20]
 800256c:	4283      	cmp	r3, r0
 800256e:	d004      	beq.n	800257a <__swbuf_r+0x62>
 8002570:	89a3      	ldrh	r3, [r4, #12]
 8002572:	07db      	lsls	r3, r3, #31
 8002574:	d506      	bpl.n	8002584 <__swbuf_r+0x6c>
 8002576:	2e0a      	cmp	r6, #10
 8002578:	d104      	bne.n	8002584 <__swbuf_r+0x6c>
 800257a:	4621      	mov	r1, r4
 800257c:	4628      	mov	r0, r5
 800257e:	f000 f92f 	bl	80027e0 <_fflush_r>
 8002582:	b988      	cbnz	r0, 80025a8 <__swbuf_r+0x90>
 8002584:	4638      	mov	r0, r7
 8002586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002588:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <__swbuf_r+0x9c>)
 800258a:	429c      	cmp	r4, r3
 800258c:	d101      	bne.n	8002592 <__swbuf_r+0x7a>
 800258e:	68ac      	ldr	r4, [r5, #8]
 8002590:	e7cf      	b.n	8002532 <__swbuf_r+0x1a>
 8002592:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <__swbuf_r+0xa0>)
 8002594:	429c      	cmp	r4, r3
 8002596:	bf08      	it	eq
 8002598:	68ec      	ldreq	r4, [r5, #12]
 800259a:	e7ca      	b.n	8002532 <__swbuf_r+0x1a>
 800259c:	4621      	mov	r1, r4
 800259e:	4628      	mov	r0, r5
 80025a0:	f000 f81e 	bl	80025e0 <__swsetup_r>
 80025a4:	2800      	cmp	r0, #0
 80025a6:	d0cb      	beq.n	8002540 <__swbuf_r+0x28>
 80025a8:	f04f 37ff 	mov.w	r7, #4294967295
 80025ac:	e7ea      	b.n	8002584 <__swbuf_r+0x6c>
 80025ae:	bf00      	nop
 80025b0:	08003110 	.word	0x08003110
 80025b4:	08003130 	.word	0x08003130
 80025b8:	080030f0 	.word	0x080030f0

080025bc <_write_r>:
 80025bc:	b538      	push	{r3, r4, r5, lr}
 80025be:	4604      	mov	r4, r0
 80025c0:	4608      	mov	r0, r1
 80025c2:	4611      	mov	r1, r2
 80025c4:	2200      	movs	r2, #0
 80025c6:	4d05      	ldr	r5, [pc, #20]	; (80025dc <_write_r+0x20>)
 80025c8:	602a      	str	r2, [r5, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	f7fe f9e0 	bl	8000990 <_write>
 80025d0:	1c43      	adds	r3, r0, #1
 80025d2:	d102      	bne.n	80025da <_write_r+0x1e>
 80025d4:	682b      	ldr	r3, [r5, #0]
 80025d6:	b103      	cbz	r3, 80025da <_write_r+0x1e>
 80025d8:	6023      	str	r3, [r4, #0]
 80025da:	bd38      	pop	{r3, r4, r5, pc}
 80025dc:	200010c4 	.word	0x200010c4

080025e0 <__swsetup_r>:
 80025e0:	4b32      	ldr	r3, [pc, #200]	; (80026ac <__swsetup_r+0xcc>)
 80025e2:	b570      	push	{r4, r5, r6, lr}
 80025e4:	681d      	ldr	r5, [r3, #0]
 80025e6:	4606      	mov	r6, r0
 80025e8:	460c      	mov	r4, r1
 80025ea:	b125      	cbz	r5, 80025f6 <__swsetup_r+0x16>
 80025ec:	69ab      	ldr	r3, [r5, #24]
 80025ee:	b913      	cbnz	r3, 80025f6 <__swsetup_r+0x16>
 80025f0:	4628      	mov	r0, r5
 80025f2:	f7ff fce3 	bl	8001fbc <__sinit>
 80025f6:	4b2e      	ldr	r3, [pc, #184]	; (80026b0 <__swsetup_r+0xd0>)
 80025f8:	429c      	cmp	r4, r3
 80025fa:	d10f      	bne.n	800261c <__swsetup_r+0x3c>
 80025fc:	686c      	ldr	r4, [r5, #4]
 80025fe:	89a3      	ldrh	r3, [r4, #12]
 8002600:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002604:	0719      	lsls	r1, r3, #28
 8002606:	d42c      	bmi.n	8002662 <__swsetup_r+0x82>
 8002608:	06dd      	lsls	r5, r3, #27
 800260a:	d411      	bmi.n	8002630 <__swsetup_r+0x50>
 800260c:	2309      	movs	r3, #9
 800260e:	6033      	str	r3, [r6, #0]
 8002610:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002614:	f04f 30ff 	mov.w	r0, #4294967295
 8002618:	81a3      	strh	r3, [r4, #12]
 800261a:	e03e      	b.n	800269a <__swsetup_r+0xba>
 800261c:	4b25      	ldr	r3, [pc, #148]	; (80026b4 <__swsetup_r+0xd4>)
 800261e:	429c      	cmp	r4, r3
 8002620:	d101      	bne.n	8002626 <__swsetup_r+0x46>
 8002622:	68ac      	ldr	r4, [r5, #8]
 8002624:	e7eb      	b.n	80025fe <__swsetup_r+0x1e>
 8002626:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <__swsetup_r+0xd8>)
 8002628:	429c      	cmp	r4, r3
 800262a:	bf08      	it	eq
 800262c:	68ec      	ldreq	r4, [r5, #12]
 800262e:	e7e6      	b.n	80025fe <__swsetup_r+0x1e>
 8002630:	0758      	lsls	r0, r3, #29
 8002632:	d512      	bpl.n	800265a <__swsetup_r+0x7a>
 8002634:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002636:	b141      	cbz	r1, 800264a <__swsetup_r+0x6a>
 8002638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800263c:	4299      	cmp	r1, r3
 800263e:	d002      	beq.n	8002646 <__swsetup_r+0x66>
 8002640:	4630      	mov	r0, r6
 8002642:	f000 f98d 	bl	8002960 <_free_r>
 8002646:	2300      	movs	r3, #0
 8002648:	6363      	str	r3, [r4, #52]	; 0x34
 800264a:	89a3      	ldrh	r3, [r4, #12]
 800264c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002650:	81a3      	strh	r3, [r4, #12]
 8002652:	2300      	movs	r3, #0
 8002654:	6063      	str	r3, [r4, #4]
 8002656:	6923      	ldr	r3, [r4, #16]
 8002658:	6023      	str	r3, [r4, #0]
 800265a:	89a3      	ldrh	r3, [r4, #12]
 800265c:	f043 0308 	orr.w	r3, r3, #8
 8002660:	81a3      	strh	r3, [r4, #12]
 8002662:	6923      	ldr	r3, [r4, #16]
 8002664:	b94b      	cbnz	r3, 800267a <__swsetup_r+0x9a>
 8002666:	89a3      	ldrh	r3, [r4, #12]
 8002668:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800266c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002670:	d003      	beq.n	800267a <__swsetup_r+0x9a>
 8002672:	4621      	mov	r1, r4
 8002674:	4630      	mov	r0, r6
 8002676:	f000 f927 	bl	80028c8 <__smakebuf_r>
 800267a:	89a0      	ldrh	r0, [r4, #12]
 800267c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002680:	f010 0301 	ands.w	r3, r0, #1
 8002684:	d00a      	beq.n	800269c <__swsetup_r+0xbc>
 8002686:	2300      	movs	r3, #0
 8002688:	60a3      	str	r3, [r4, #8]
 800268a:	6963      	ldr	r3, [r4, #20]
 800268c:	425b      	negs	r3, r3
 800268e:	61a3      	str	r3, [r4, #24]
 8002690:	6923      	ldr	r3, [r4, #16]
 8002692:	b943      	cbnz	r3, 80026a6 <__swsetup_r+0xc6>
 8002694:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002698:	d1ba      	bne.n	8002610 <__swsetup_r+0x30>
 800269a:	bd70      	pop	{r4, r5, r6, pc}
 800269c:	0781      	lsls	r1, r0, #30
 800269e:	bf58      	it	pl
 80026a0:	6963      	ldrpl	r3, [r4, #20]
 80026a2:	60a3      	str	r3, [r4, #8]
 80026a4:	e7f4      	b.n	8002690 <__swsetup_r+0xb0>
 80026a6:	2000      	movs	r0, #0
 80026a8:	e7f7      	b.n	800269a <__swsetup_r+0xba>
 80026aa:	bf00      	nop
 80026ac:	20000018 	.word	0x20000018
 80026b0:	08003110 	.word	0x08003110
 80026b4:	08003130 	.word	0x08003130
 80026b8:	080030f0 	.word	0x080030f0

080026bc <_close_r>:
 80026bc:	b538      	push	{r3, r4, r5, lr}
 80026be:	2300      	movs	r3, #0
 80026c0:	4d05      	ldr	r5, [pc, #20]	; (80026d8 <_close_r+0x1c>)
 80026c2:	4604      	mov	r4, r0
 80026c4:	4608      	mov	r0, r1
 80026c6:	602b      	str	r3, [r5, #0]
 80026c8:	f7fe f97e 	bl	80009c8 <_close>
 80026cc:	1c43      	adds	r3, r0, #1
 80026ce:	d102      	bne.n	80026d6 <_close_r+0x1a>
 80026d0:	682b      	ldr	r3, [r5, #0]
 80026d2:	b103      	cbz	r3, 80026d6 <_close_r+0x1a>
 80026d4:	6023      	str	r3, [r4, #0]
 80026d6:	bd38      	pop	{r3, r4, r5, pc}
 80026d8:	200010c4 	.word	0x200010c4

080026dc <__sflush_r>:
 80026dc:	898a      	ldrh	r2, [r1, #12]
 80026de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e0:	4605      	mov	r5, r0
 80026e2:	0710      	lsls	r0, r2, #28
 80026e4:	460c      	mov	r4, r1
 80026e6:	d457      	bmi.n	8002798 <__sflush_r+0xbc>
 80026e8:	684b      	ldr	r3, [r1, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	dc04      	bgt.n	80026f8 <__sflush_r+0x1c>
 80026ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	dc01      	bgt.n	80026f8 <__sflush_r+0x1c>
 80026f4:	2000      	movs	r0, #0
 80026f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80026fa:	2e00      	cmp	r6, #0
 80026fc:	d0fa      	beq.n	80026f4 <__sflush_r+0x18>
 80026fe:	2300      	movs	r3, #0
 8002700:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002704:	682f      	ldr	r7, [r5, #0]
 8002706:	602b      	str	r3, [r5, #0]
 8002708:	d032      	beq.n	8002770 <__sflush_r+0x94>
 800270a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800270c:	89a3      	ldrh	r3, [r4, #12]
 800270e:	075a      	lsls	r2, r3, #29
 8002710:	d505      	bpl.n	800271e <__sflush_r+0x42>
 8002712:	6863      	ldr	r3, [r4, #4]
 8002714:	1ac0      	subs	r0, r0, r3
 8002716:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002718:	b10b      	cbz	r3, 800271e <__sflush_r+0x42>
 800271a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800271c:	1ac0      	subs	r0, r0, r3
 800271e:	2300      	movs	r3, #0
 8002720:	4602      	mov	r2, r0
 8002722:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002724:	4628      	mov	r0, r5
 8002726:	6a21      	ldr	r1, [r4, #32]
 8002728:	47b0      	blx	r6
 800272a:	1c43      	adds	r3, r0, #1
 800272c:	89a3      	ldrh	r3, [r4, #12]
 800272e:	d106      	bne.n	800273e <__sflush_r+0x62>
 8002730:	6829      	ldr	r1, [r5, #0]
 8002732:	291d      	cmp	r1, #29
 8002734:	d82c      	bhi.n	8002790 <__sflush_r+0xb4>
 8002736:	4a29      	ldr	r2, [pc, #164]	; (80027dc <__sflush_r+0x100>)
 8002738:	40ca      	lsrs	r2, r1
 800273a:	07d6      	lsls	r6, r2, #31
 800273c:	d528      	bpl.n	8002790 <__sflush_r+0xb4>
 800273e:	2200      	movs	r2, #0
 8002740:	6062      	str	r2, [r4, #4]
 8002742:	6922      	ldr	r2, [r4, #16]
 8002744:	04d9      	lsls	r1, r3, #19
 8002746:	6022      	str	r2, [r4, #0]
 8002748:	d504      	bpl.n	8002754 <__sflush_r+0x78>
 800274a:	1c42      	adds	r2, r0, #1
 800274c:	d101      	bne.n	8002752 <__sflush_r+0x76>
 800274e:	682b      	ldr	r3, [r5, #0]
 8002750:	b903      	cbnz	r3, 8002754 <__sflush_r+0x78>
 8002752:	6560      	str	r0, [r4, #84]	; 0x54
 8002754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002756:	602f      	str	r7, [r5, #0]
 8002758:	2900      	cmp	r1, #0
 800275a:	d0cb      	beq.n	80026f4 <__sflush_r+0x18>
 800275c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002760:	4299      	cmp	r1, r3
 8002762:	d002      	beq.n	800276a <__sflush_r+0x8e>
 8002764:	4628      	mov	r0, r5
 8002766:	f000 f8fb 	bl	8002960 <_free_r>
 800276a:	2000      	movs	r0, #0
 800276c:	6360      	str	r0, [r4, #52]	; 0x34
 800276e:	e7c2      	b.n	80026f6 <__sflush_r+0x1a>
 8002770:	6a21      	ldr	r1, [r4, #32]
 8002772:	2301      	movs	r3, #1
 8002774:	4628      	mov	r0, r5
 8002776:	47b0      	blx	r6
 8002778:	1c41      	adds	r1, r0, #1
 800277a:	d1c7      	bne.n	800270c <__sflush_r+0x30>
 800277c:	682b      	ldr	r3, [r5, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0c4      	beq.n	800270c <__sflush_r+0x30>
 8002782:	2b1d      	cmp	r3, #29
 8002784:	d001      	beq.n	800278a <__sflush_r+0xae>
 8002786:	2b16      	cmp	r3, #22
 8002788:	d101      	bne.n	800278e <__sflush_r+0xb2>
 800278a:	602f      	str	r7, [r5, #0]
 800278c:	e7b2      	b.n	80026f4 <__sflush_r+0x18>
 800278e:	89a3      	ldrh	r3, [r4, #12]
 8002790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002794:	81a3      	strh	r3, [r4, #12]
 8002796:	e7ae      	b.n	80026f6 <__sflush_r+0x1a>
 8002798:	690f      	ldr	r7, [r1, #16]
 800279a:	2f00      	cmp	r7, #0
 800279c:	d0aa      	beq.n	80026f4 <__sflush_r+0x18>
 800279e:	0793      	lsls	r3, r2, #30
 80027a0:	bf18      	it	ne
 80027a2:	2300      	movne	r3, #0
 80027a4:	680e      	ldr	r6, [r1, #0]
 80027a6:	bf08      	it	eq
 80027a8:	694b      	ldreq	r3, [r1, #20]
 80027aa:	1bf6      	subs	r6, r6, r7
 80027ac:	600f      	str	r7, [r1, #0]
 80027ae:	608b      	str	r3, [r1, #8]
 80027b0:	2e00      	cmp	r6, #0
 80027b2:	dd9f      	ble.n	80026f4 <__sflush_r+0x18>
 80027b4:	4633      	mov	r3, r6
 80027b6:	463a      	mov	r2, r7
 80027b8:	4628      	mov	r0, r5
 80027ba:	6a21      	ldr	r1, [r4, #32]
 80027bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80027c0:	47e0      	blx	ip
 80027c2:	2800      	cmp	r0, #0
 80027c4:	dc06      	bgt.n	80027d4 <__sflush_r+0xf8>
 80027c6:	89a3      	ldrh	r3, [r4, #12]
 80027c8:	f04f 30ff 	mov.w	r0, #4294967295
 80027cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027d0:	81a3      	strh	r3, [r4, #12]
 80027d2:	e790      	b.n	80026f6 <__sflush_r+0x1a>
 80027d4:	4407      	add	r7, r0
 80027d6:	1a36      	subs	r6, r6, r0
 80027d8:	e7ea      	b.n	80027b0 <__sflush_r+0xd4>
 80027da:	bf00      	nop
 80027dc:	20400001 	.word	0x20400001

080027e0 <_fflush_r>:
 80027e0:	b538      	push	{r3, r4, r5, lr}
 80027e2:	690b      	ldr	r3, [r1, #16]
 80027e4:	4605      	mov	r5, r0
 80027e6:	460c      	mov	r4, r1
 80027e8:	b913      	cbnz	r3, 80027f0 <_fflush_r+0x10>
 80027ea:	2500      	movs	r5, #0
 80027ec:	4628      	mov	r0, r5
 80027ee:	bd38      	pop	{r3, r4, r5, pc}
 80027f0:	b118      	cbz	r0, 80027fa <_fflush_r+0x1a>
 80027f2:	6983      	ldr	r3, [r0, #24]
 80027f4:	b90b      	cbnz	r3, 80027fa <_fflush_r+0x1a>
 80027f6:	f7ff fbe1 	bl	8001fbc <__sinit>
 80027fa:	4b14      	ldr	r3, [pc, #80]	; (800284c <_fflush_r+0x6c>)
 80027fc:	429c      	cmp	r4, r3
 80027fe:	d11b      	bne.n	8002838 <_fflush_r+0x58>
 8002800:	686c      	ldr	r4, [r5, #4]
 8002802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0ef      	beq.n	80027ea <_fflush_r+0xa>
 800280a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800280c:	07d0      	lsls	r0, r2, #31
 800280e:	d404      	bmi.n	800281a <_fflush_r+0x3a>
 8002810:	0599      	lsls	r1, r3, #22
 8002812:	d402      	bmi.n	800281a <_fflush_r+0x3a>
 8002814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002816:	f7ff fc94 	bl	8002142 <__retarget_lock_acquire_recursive>
 800281a:	4628      	mov	r0, r5
 800281c:	4621      	mov	r1, r4
 800281e:	f7ff ff5d 	bl	80026dc <__sflush_r>
 8002822:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002824:	4605      	mov	r5, r0
 8002826:	07da      	lsls	r2, r3, #31
 8002828:	d4e0      	bmi.n	80027ec <_fflush_r+0xc>
 800282a:	89a3      	ldrh	r3, [r4, #12]
 800282c:	059b      	lsls	r3, r3, #22
 800282e:	d4dd      	bmi.n	80027ec <_fflush_r+0xc>
 8002830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002832:	f7ff fc87 	bl	8002144 <__retarget_lock_release_recursive>
 8002836:	e7d9      	b.n	80027ec <_fflush_r+0xc>
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <_fflush_r+0x70>)
 800283a:	429c      	cmp	r4, r3
 800283c:	d101      	bne.n	8002842 <_fflush_r+0x62>
 800283e:	68ac      	ldr	r4, [r5, #8]
 8002840:	e7df      	b.n	8002802 <_fflush_r+0x22>
 8002842:	4b04      	ldr	r3, [pc, #16]	; (8002854 <_fflush_r+0x74>)
 8002844:	429c      	cmp	r4, r3
 8002846:	bf08      	it	eq
 8002848:	68ec      	ldreq	r4, [r5, #12]
 800284a:	e7da      	b.n	8002802 <_fflush_r+0x22>
 800284c:	08003110 	.word	0x08003110
 8002850:	08003130 	.word	0x08003130
 8002854:	080030f0 	.word	0x080030f0

08002858 <_lseek_r>:
 8002858:	b538      	push	{r3, r4, r5, lr}
 800285a:	4604      	mov	r4, r0
 800285c:	4608      	mov	r0, r1
 800285e:	4611      	mov	r1, r2
 8002860:	2200      	movs	r2, #0
 8002862:	4d05      	ldr	r5, [pc, #20]	; (8002878 <_lseek_r+0x20>)
 8002864:	602a      	str	r2, [r5, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	f7fe f8d2 	bl	8000a10 <_lseek>
 800286c:	1c43      	adds	r3, r0, #1
 800286e:	d102      	bne.n	8002876 <_lseek_r+0x1e>
 8002870:	682b      	ldr	r3, [r5, #0]
 8002872:	b103      	cbz	r3, 8002876 <_lseek_r+0x1e>
 8002874:	6023      	str	r3, [r4, #0]
 8002876:	bd38      	pop	{r3, r4, r5, pc}
 8002878:	200010c4 	.word	0x200010c4

0800287c <__swhatbuf_r>:
 800287c:	b570      	push	{r4, r5, r6, lr}
 800287e:	460e      	mov	r6, r1
 8002880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002884:	4614      	mov	r4, r2
 8002886:	2900      	cmp	r1, #0
 8002888:	461d      	mov	r5, r3
 800288a:	b096      	sub	sp, #88	; 0x58
 800288c:	da08      	bge.n	80028a0 <__swhatbuf_r+0x24>
 800288e:	2200      	movs	r2, #0
 8002890:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002894:	602a      	str	r2, [r5, #0]
 8002896:	061a      	lsls	r2, r3, #24
 8002898:	d410      	bmi.n	80028bc <__swhatbuf_r+0x40>
 800289a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800289e:	e00e      	b.n	80028be <__swhatbuf_r+0x42>
 80028a0:	466a      	mov	r2, sp
 80028a2:	f000 fba5 	bl	8002ff0 <_fstat_r>
 80028a6:	2800      	cmp	r0, #0
 80028a8:	dbf1      	blt.n	800288e <__swhatbuf_r+0x12>
 80028aa:	9a01      	ldr	r2, [sp, #4]
 80028ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80028b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80028b4:	425a      	negs	r2, r3
 80028b6:	415a      	adcs	r2, r3
 80028b8:	602a      	str	r2, [r5, #0]
 80028ba:	e7ee      	b.n	800289a <__swhatbuf_r+0x1e>
 80028bc:	2340      	movs	r3, #64	; 0x40
 80028be:	2000      	movs	r0, #0
 80028c0:	6023      	str	r3, [r4, #0]
 80028c2:	b016      	add	sp, #88	; 0x58
 80028c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080028c8 <__smakebuf_r>:
 80028c8:	898b      	ldrh	r3, [r1, #12]
 80028ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80028cc:	079d      	lsls	r5, r3, #30
 80028ce:	4606      	mov	r6, r0
 80028d0:	460c      	mov	r4, r1
 80028d2:	d507      	bpl.n	80028e4 <__smakebuf_r+0x1c>
 80028d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80028d8:	6023      	str	r3, [r4, #0]
 80028da:	6123      	str	r3, [r4, #16]
 80028dc:	2301      	movs	r3, #1
 80028de:	6163      	str	r3, [r4, #20]
 80028e0:	b002      	add	sp, #8
 80028e2:	bd70      	pop	{r4, r5, r6, pc}
 80028e4:	466a      	mov	r2, sp
 80028e6:	ab01      	add	r3, sp, #4
 80028e8:	f7ff ffc8 	bl	800287c <__swhatbuf_r>
 80028ec:	9900      	ldr	r1, [sp, #0]
 80028ee:	4605      	mov	r5, r0
 80028f0:	4630      	mov	r0, r6
 80028f2:	f7ff fc51 	bl	8002198 <_malloc_r>
 80028f6:	b948      	cbnz	r0, 800290c <__smakebuf_r+0x44>
 80028f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028fc:	059a      	lsls	r2, r3, #22
 80028fe:	d4ef      	bmi.n	80028e0 <__smakebuf_r+0x18>
 8002900:	f023 0303 	bic.w	r3, r3, #3
 8002904:	f043 0302 	orr.w	r3, r3, #2
 8002908:	81a3      	strh	r3, [r4, #12]
 800290a:	e7e3      	b.n	80028d4 <__smakebuf_r+0xc>
 800290c:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <__smakebuf_r+0x7c>)
 800290e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002910:	89a3      	ldrh	r3, [r4, #12]
 8002912:	6020      	str	r0, [r4, #0]
 8002914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002918:	81a3      	strh	r3, [r4, #12]
 800291a:	9b00      	ldr	r3, [sp, #0]
 800291c:	6120      	str	r0, [r4, #16]
 800291e:	6163      	str	r3, [r4, #20]
 8002920:	9b01      	ldr	r3, [sp, #4]
 8002922:	b15b      	cbz	r3, 800293c <__smakebuf_r+0x74>
 8002924:	4630      	mov	r0, r6
 8002926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800292a:	f000 fb73 	bl	8003014 <_isatty_r>
 800292e:	b128      	cbz	r0, 800293c <__smakebuf_r+0x74>
 8002930:	89a3      	ldrh	r3, [r4, #12]
 8002932:	f023 0303 	bic.w	r3, r3, #3
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	81a3      	strh	r3, [r4, #12]
 800293c:	89a0      	ldrh	r0, [r4, #12]
 800293e:	4305      	orrs	r5, r0
 8002940:	81a5      	strh	r5, [r4, #12]
 8002942:	e7cd      	b.n	80028e0 <__smakebuf_r+0x18>
 8002944:	08001f55 	.word	0x08001f55

08002948 <__malloc_lock>:
 8002948:	4801      	ldr	r0, [pc, #4]	; (8002950 <__malloc_lock+0x8>)
 800294a:	f7ff bbfa 	b.w	8002142 <__retarget_lock_acquire_recursive>
 800294e:	bf00      	nop
 8002950:	200010b8 	.word	0x200010b8

08002954 <__malloc_unlock>:
 8002954:	4801      	ldr	r0, [pc, #4]	; (800295c <__malloc_unlock+0x8>)
 8002956:	f7ff bbf5 	b.w	8002144 <__retarget_lock_release_recursive>
 800295a:	bf00      	nop
 800295c:	200010b8 	.word	0x200010b8

08002960 <_free_r>:
 8002960:	b538      	push	{r3, r4, r5, lr}
 8002962:	4605      	mov	r5, r0
 8002964:	2900      	cmp	r1, #0
 8002966:	d040      	beq.n	80029ea <_free_r+0x8a>
 8002968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800296c:	1f0c      	subs	r4, r1, #4
 800296e:	2b00      	cmp	r3, #0
 8002970:	bfb8      	it	lt
 8002972:	18e4      	addlt	r4, r4, r3
 8002974:	f7ff ffe8 	bl	8002948 <__malloc_lock>
 8002978:	4a1c      	ldr	r2, [pc, #112]	; (80029ec <_free_r+0x8c>)
 800297a:	6813      	ldr	r3, [r2, #0]
 800297c:	b933      	cbnz	r3, 800298c <_free_r+0x2c>
 800297e:	6063      	str	r3, [r4, #4]
 8002980:	6014      	str	r4, [r2, #0]
 8002982:	4628      	mov	r0, r5
 8002984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002988:	f7ff bfe4 	b.w	8002954 <__malloc_unlock>
 800298c:	42a3      	cmp	r3, r4
 800298e:	d908      	bls.n	80029a2 <_free_r+0x42>
 8002990:	6820      	ldr	r0, [r4, #0]
 8002992:	1821      	adds	r1, r4, r0
 8002994:	428b      	cmp	r3, r1
 8002996:	bf01      	itttt	eq
 8002998:	6819      	ldreq	r1, [r3, #0]
 800299a:	685b      	ldreq	r3, [r3, #4]
 800299c:	1809      	addeq	r1, r1, r0
 800299e:	6021      	streq	r1, [r4, #0]
 80029a0:	e7ed      	b.n	800297e <_free_r+0x1e>
 80029a2:	461a      	mov	r2, r3
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	b10b      	cbz	r3, 80029ac <_free_r+0x4c>
 80029a8:	42a3      	cmp	r3, r4
 80029aa:	d9fa      	bls.n	80029a2 <_free_r+0x42>
 80029ac:	6811      	ldr	r1, [r2, #0]
 80029ae:	1850      	adds	r0, r2, r1
 80029b0:	42a0      	cmp	r0, r4
 80029b2:	d10b      	bne.n	80029cc <_free_r+0x6c>
 80029b4:	6820      	ldr	r0, [r4, #0]
 80029b6:	4401      	add	r1, r0
 80029b8:	1850      	adds	r0, r2, r1
 80029ba:	4283      	cmp	r3, r0
 80029bc:	6011      	str	r1, [r2, #0]
 80029be:	d1e0      	bne.n	8002982 <_free_r+0x22>
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	4401      	add	r1, r0
 80029c6:	6011      	str	r1, [r2, #0]
 80029c8:	6053      	str	r3, [r2, #4]
 80029ca:	e7da      	b.n	8002982 <_free_r+0x22>
 80029cc:	d902      	bls.n	80029d4 <_free_r+0x74>
 80029ce:	230c      	movs	r3, #12
 80029d0:	602b      	str	r3, [r5, #0]
 80029d2:	e7d6      	b.n	8002982 <_free_r+0x22>
 80029d4:	6820      	ldr	r0, [r4, #0]
 80029d6:	1821      	adds	r1, r4, r0
 80029d8:	428b      	cmp	r3, r1
 80029da:	bf01      	itttt	eq
 80029dc:	6819      	ldreq	r1, [r3, #0]
 80029de:	685b      	ldreq	r3, [r3, #4]
 80029e0:	1809      	addeq	r1, r1, r0
 80029e2:	6021      	streq	r1, [r4, #0]
 80029e4:	6063      	str	r3, [r4, #4]
 80029e6:	6054      	str	r4, [r2, #4]
 80029e8:	e7cb      	b.n	8002982 <_free_r+0x22>
 80029ea:	bd38      	pop	{r3, r4, r5, pc}
 80029ec:	200010bc 	.word	0x200010bc

080029f0 <__sfputc_r>:
 80029f0:	6893      	ldr	r3, [r2, #8]
 80029f2:	b410      	push	{r4}
 80029f4:	3b01      	subs	r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	6093      	str	r3, [r2, #8]
 80029fa:	da07      	bge.n	8002a0c <__sfputc_r+0x1c>
 80029fc:	6994      	ldr	r4, [r2, #24]
 80029fe:	42a3      	cmp	r3, r4
 8002a00:	db01      	blt.n	8002a06 <__sfputc_r+0x16>
 8002a02:	290a      	cmp	r1, #10
 8002a04:	d102      	bne.n	8002a0c <__sfputc_r+0x1c>
 8002a06:	bc10      	pop	{r4}
 8002a08:	f7ff bd86 	b.w	8002518 <__swbuf_r>
 8002a0c:	6813      	ldr	r3, [r2, #0]
 8002a0e:	1c58      	adds	r0, r3, #1
 8002a10:	6010      	str	r0, [r2, #0]
 8002a12:	7019      	strb	r1, [r3, #0]
 8002a14:	4608      	mov	r0, r1
 8002a16:	bc10      	pop	{r4}
 8002a18:	4770      	bx	lr

08002a1a <__sfputs_r>:
 8002a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1c:	4606      	mov	r6, r0
 8002a1e:	460f      	mov	r7, r1
 8002a20:	4614      	mov	r4, r2
 8002a22:	18d5      	adds	r5, r2, r3
 8002a24:	42ac      	cmp	r4, r5
 8002a26:	d101      	bne.n	8002a2c <__sfputs_r+0x12>
 8002a28:	2000      	movs	r0, #0
 8002a2a:	e007      	b.n	8002a3c <__sfputs_r+0x22>
 8002a2c:	463a      	mov	r2, r7
 8002a2e:	4630      	mov	r0, r6
 8002a30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a34:	f7ff ffdc 	bl	80029f0 <__sfputc_r>
 8002a38:	1c43      	adds	r3, r0, #1
 8002a3a:	d1f3      	bne.n	8002a24 <__sfputs_r+0xa>
 8002a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a40 <_vfiprintf_r>:
 8002a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a44:	460d      	mov	r5, r1
 8002a46:	4614      	mov	r4, r2
 8002a48:	4698      	mov	r8, r3
 8002a4a:	4606      	mov	r6, r0
 8002a4c:	b09d      	sub	sp, #116	; 0x74
 8002a4e:	b118      	cbz	r0, 8002a58 <_vfiprintf_r+0x18>
 8002a50:	6983      	ldr	r3, [r0, #24]
 8002a52:	b90b      	cbnz	r3, 8002a58 <_vfiprintf_r+0x18>
 8002a54:	f7ff fab2 	bl	8001fbc <__sinit>
 8002a58:	4b89      	ldr	r3, [pc, #548]	; (8002c80 <_vfiprintf_r+0x240>)
 8002a5a:	429d      	cmp	r5, r3
 8002a5c:	d11b      	bne.n	8002a96 <_vfiprintf_r+0x56>
 8002a5e:	6875      	ldr	r5, [r6, #4]
 8002a60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a62:	07d9      	lsls	r1, r3, #31
 8002a64:	d405      	bmi.n	8002a72 <_vfiprintf_r+0x32>
 8002a66:	89ab      	ldrh	r3, [r5, #12]
 8002a68:	059a      	lsls	r2, r3, #22
 8002a6a:	d402      	bmi.n	8002a72 <_vfiprintf_r+0x32>
 8002a6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a6e:	f7ff fb68 	bl	8002142 <__retarget_lock_acquire_recursive>
 8002a72:	89ab      	ldrh	r3, [r5, #12]
 8002a74:	071b      	lsls	r3, r3, #28
 8002a76:	d501      	bpl.n	8002a7c <_vfiprintf_r+0x3c>
 8002a78:	692b      	ldr	r3, [r5, #16]
 8002a7a:	b9eb      	cbnz	r3, 8002ab8 <_vfiprintf_r+0x78>
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	4630      	mov	r0, r6
 8002a80:	f7ff fdae 	bl	80025e0 <__swsetup_r>
 8002a84:	b1c0      	cbz	r0, 8002ab8 <_vfiprintf_r+0x78>
 8002a86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a88:	07dc      	lsls	r4, r3, #31
 8002a8a:	d50e      	bpl.n	8002aaa <_vfiprintf_r+0x6a>
 8002a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a90:	b01d      	add	sp, #116	; 0x74
 8002a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a96:	4b7b      	ldr	r3, [pc, #492]	; (8002c84 <_vfiprintf_r+0x244>)
 8002a98:	429d      	cmp	r5, r3
 8002a9a:	d101      	bne.n	8002aa0 <_vfiprintf_r+0x60>
 8002a9c:	68b5      	ldr	r5, [r6, #8]
 8002a9e:	e7df      	b.n	8002a60 <_vfiprintf_r+0x20>
 8002aa0:	4b79      	ldr	r3, [pc, #484]	; (8002c88 <_vfiprintf_r+0x248>)
 8002aa2:	429d      	cmp	r5, r3
 8002aa4:	bf08      	it	eq
 8002aa6:	68f5      	ldreq	r5, [r6, #12]
 8002aa8:	e7da      	b.n	8002a60 <_vfiprintf_r+0x20>
 8002aaa:	89ab      	ldrh	r3, [r5, #12]
 8002aac:	0598      	lsls	r0, r3, #22
 8002aae:	d4ed      	bmi.n	8002a8c <_vfiprintf_r+0x4c>
 8002ab0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ab2:	f7ff fb47 	bl	8002144 <__retarget_lock_release_recursive>
 8002ab6:	e7e9      	b.n	8002a8c <_vfiprintf_r+0x4c>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	9309      	str	r3, [sp, #36]	; 0x24
 8002abc:	2320      	movs	r3, #32
 8002abe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ac2:	2330      	movs	r3, #48	; 0x30
 8002ac4:	f04f 0901 	mov.w	r9, #1
 8002ac8:	f8cd 800c 	str.w	r8, [sp, #12]
 8002acc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002c8c <_vfiprintf_r+0x24c>
 8002ad0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ad4:	4623      	mov	r3, r4
 8002ad6:	469a      	mov	sl, r3
 8002ad8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002adc:	b10a      	cbz	r2, 8002ae2 <_vfiprintf_r+0xa2>
 8002ade:	2a25      	cmp	r2, #37	; 0x25
 8002ae0:	d1f9      	bne.n	8002ad6 <_vfiprintf_r+0x96>
 8002ae2:	ebba 0b04 	subs.w	fp, sl, r4
 8002ae6:	d00b      	beq.n	8002b00 <_vfiprintf_r+0xc0>
 8002ae8:	465b      	mov	r3, fp
 8002aea:	4622      	mov	r2, r4
 8002aec:	4629      	mov	r1, r5
 8002aee:	4630      	mov	r0, r6
 8002af0:	f7ff ff93 	bl	8002a1a <__sfputs_r>
 8002af4:	3001      	adds	r0, #1
 8002af6:	f000 80aa 	beq.w	8002c4e <_vfiprintf_r+0x20e>
 8002afa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002afc:	445a      	add	r2, fp
 8002afe:	9209      	str	r2, [sp, #36]	; 0x24
 8002b00:	f89a 3000 	ldrb.w	r3, [sl]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 80a2 	beq.w	8002c4e <_vfiprintf_r+0x20e>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b14:	f10a 0a01 	add.w	sl, sl, #1
 8002b18:	9304      	str	r3, [sp, #16]
 8002b1a:	9307      	str	r3, [sp, #28]
 8002b1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b20:	931a      	str	r3, [sp, #104]	; 0x68
 8002b22:	4654      	mov	r4, sl
 8002b24:	2205      	movs	r2, #5
 8002b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b2a:	4858      	ldr	r0, [pc, #352]	; (8002c8c <_vfiprintf_r+0x24c>)
 8002b2c:	f000 fa82 	bl	8003034 <memchr>
 8002b30:	9a04      	ldr	r2, [sp, #16]
 8002b32:	b9d8      	cbnz	r0, 8002b6c <_vfiprintf_r+0x12c>
 8002b34:	06d1      	lsls	r1, r2, #27
 8002b36:	bf44      	itt	mi
 8002b38:	2320      	movmi	r3, #32
 8002b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b3e:	0713      	lsls	r3, r2, #28
 8002b40:	bf44      	itt	mi
 8002b42:	232b      	movmi	r3, #43	; 0x2b
 8002b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b48:	f89a 3000 	ldrb.w	r3, [sl]
 8002b4c:	2b2a      	cmp	r3, #42	; 0x2a
 8002b4e:	d015      	beq.n	8002b7c <_vfiprintf_r+0x13c>
 8002b50:	4654      	mov	r4, sl
 8002b52:	2000      	movs	r0, #0
 8002b54:	f04f 0c0a 	mov.w	ip, #10
 8002b58:	9a07      	ldr	r2, [sp, #28]
 8002b5a:	4621      	mov	r1, r4
 8002b5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b60:	3b30      	subs	r3, #48	; 0x30
 8002b62:	2b09      	cmp	r3, #9
 8002b64:	d94e      	bls.n	8002c04 <_vfiprintf_r+0x1c4>
 8002b66:	b1b0      	cbz	r0, 8002b96 <_vfiprintf_r+0x156>
 8002b68:	9207      	str	r2, [sp, #28]
 8002b6a:	e014      	b.n	8002b96 <_vfiprintf_r+0x156>
 8002b6c:	eba0 0308 	sub.w	r3, r0, r8
 8002b70:	fa09 f303 	lsl.w	r3, r9, r3
 8002b74:	4313      	orrs	r3, r2
 8002b76:	46a2      	mov	sl, r4
 8002b78:	9304      	str	r3, [sp, #16]
 8002b7a:	e7d2      	b.n	8002b22 <_vfiprintf_r+0xe2>
 8002b7c:	9b03      	ldr	r3, [sp, #12]
 8002b7e:	1d19      	adds	r1, r3, #4
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	9103      	str	r1, [sp, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bfbb      	ittet	lt
 8002b88:	425b      	neglt	r3, r3
 8002b8a:	f042 0202 	orrlt.w	r2, r2, #2
 8002b8e:	9307      	strge	r3, [sp, #28]
 8002b90:	9307      	strlt	r3, [sp, #28]
 8002b92:	bfb8      	it	lt
 8002b94:	9204      	strlt	r2, [sp, #16]
 8002b96:	7823      	ldrb	r3, [r4, #0]
 8002b98:	2b2e      	cmp	r3, #46	; 0x2e
 8002b9a:	d10c      	bne.n	8002bb6 <_vfiprintf_r+0x176>
 8002b9c:	7863      	ldrb	r3, [r4, #1]
 8002b9e:	2b2a      	cmp	r3, #42	; 0x2a
 8002ba0:	d135      	bne.n	8002c0e <_vfiprintf_r+0x1ce>
 8002ba2:	9b03      	ldr	r3, [sp, #12]
 8002ba4:	3402      	adds	r4, #2
 8002ba6:	1d1a      	adds	r2, r3, #4
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	9203      	str	r2, [sp, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bfb8      	it	lt
 8002bb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8002bb4:	9305      	str	r3, [sp, #20]
 8002bb6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002c90 <_vfiprintf_r+0x250>
 8002bba:	2203      	movs	r2, #3
 8002bbc:	4650      	mov	r0, sl
 8002bbe:	7821      	ldrb	r1, [r4, #0]
 8002bc0:	f000 fa38 	bl	8003034 <memchr>
 8002bc4:	b140      	cbz	r0, 8002bd8 <_vfiprintf_r+0x198>
 8002bc6:	2340      	movs	r3, #64	; 0x40
 8002bc8:	eba0 000a 	sub.w	r0, r0, sl
 8002bcc:	fa03 f000 	lsl.w	r0, r3, r0
 8002bd0:	9b04      	ldr	r3, [sp, #16]
 8002bd2:	3401      	adds	r4, #1
 8002bd4:	4303      	orrs	r3, r0
 8002bd6:	9304      	str	r3, [sp, #16]
 8002bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bdc:	2206      	movs	r2, #6
 8002bde:	482d      	ldr	r0, [pc, #180]	; (8002c94 <_vfiprintf_r+0x254>)
 8002be0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002be4:	f000 fa26 	bl	8003034 <memchr>
 8002be8:	2800      	cmp	r0, #0
 8002bea:	d03f      	beq.n	8002c6c <_vfiprintf_r+0x22c>
 8002bec:	4b2a      	ldr	r3, [pc, #168]	; (8002c98 <_vfiprintf_r+0x258>)
 8002bee:	bb1b      	cbnz	r3, 8002c38 <_vfiprintf_r+0x1f8>
 8002bf0:	9b03      	ldr	r3, [sp, #12]
 8002bf2:	3307      	adds	r3, #7
 8002bf4:	f023 0307 	bic.w	r3, r3, #7
 8002bf8:	3308      	adds	r3, #8
 8002bfa:	9303      	str	r3, [sp, #12]
 8002bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bfe:	443b      	add	r3, r7
 8002c00:	9309      	str	r3, [sp, #36]	; 0x24
 8002c02:	e767      	b.n	8002ad4 <_vfiprintf_r+0x94>
 8002c04:	460c      	mov	r4, r1
 8002c06:	2001      	movs	r0, #1
 8002c08:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c0c:	e7a5      	b.n	8002b5a <_vfiprintf_r+0x11a>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f04f 0c0a 	mov.w	ip, #10
 8002c14:	4619      	mov	r1, r3
 8002c16:	3401      	adds	r4, #1
 8002c18:	9305      	str	r3, [sp, #20]
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c20:	3a30      	subs	r2, #48	; 0x30
 8002c22:	2a09      	cmp	r2, #9
 8002c24:	d903      	bls.n	8002c2e <_vfiprintf_r+0x1ee>
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0c5      	beq.n	8002bb6 <_vfiprintf_r+0x176>
 8002c2a:	9105      	str	r1, [sp, #20]
 8002c2c:	e7c3      	b.n	8002bb6 <_vfiprintf_r+0x176>
 8002c2e:	4604      	mov	r4, r0
 8002c30:	2301      	movs	r3, #1
 8002c32:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c36:	e7f0      	b.n	8002c1a <_vfiprintf_r+0x1da>
 8002c38:	ab03      	add	r3, sp, #12
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	462a      	mov	r2, r5
 8002c3e:	4630      	mov	r0, r6
 8002c40:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <_vfiprintf_r+0x25c>)
 8002c42:	a904      	add	r1, sp, #16
 8002c44:	f3af 8000 	nop.w
 8002c48:	4607      	mov	r7, r0
 8002c4a:	1c78      	adds	r0, r7, #1
 8002c4c:	d1d6      	bne.n	8002bfc <_vfiprintf_r+0x1bc>
 8002c4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c50:	07d9      	lsls	r1, r3, #31
 8002c52:	d405      	bmi.n	8002c60 <_vfiprintf_r+0x220>
 8002c54:	89ab      	ldrh	r3, [r5, #12]
 8002c56:	059a      	lsls	r2, r3, #22
 8002c58:	d402      	bmi.n	8002c60 <_vfiprintf_r+0x220>
 8002c5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c5c:	f7ff fa72 	bl	8002144 <__retarget_lock_release_recursive>
 8002c60:	89ab      	ldrh	r3, [r5, #12]
 8002c62:	065b      	lsls	r3, r3, #25
 8002c64:	f53f af12 	bmi.w	8002a8c <_vfiprintf_r+0x4c>
 8002c68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c6a:	e711      	b.n	8002a90 <_vfiprintf_r+0x50>
 8002c6c:	ab03      	add	r3, sp, #12
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	462a      	mov	r2, r5
 8002c72:	4630      	mov	r0, r6
 8002c74:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <_vfiprintf_r+0x25c>)
 8002c76:	a904      	add	r1, sp, #16
 8002c78:	f000 f882 	bl	8002d80 <_printf_i>
 8002c7c:	e7e4      	b.n	8002c48 <_vfiprintf_r+0x208>
 8002c7e:	bf00      	nop
 8002c80:	08003110 	.word	0x08003110
 8002c84:	08003130 	.word	0x08003130
 8002c88:	080030f0 	.word	0x080030f0
 8002c8c:	08003154 	.word	0x08003154
 8002c90:	0800315a 	.word	0x0800315a
 8002c94:	0800315e 	.word	0x0800315e
 8002c98:	00000000 	.word	0x00000000
 8002c9c:	08002a1b 	.word	0x08002a1b

08002ca0 <_printf_common>:
 8002ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ca4:	4616      	mov	r6, r2
 8002ca6:	4699      	mov	r9, r3
 8002ca8:	688a      	ldr	r2, [r1, #8]
 8002caa:	690b      	ldr	r3, [r1, #16]
 8002cac:	4607      	mov	r7, r0
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	bfb8      	it	lt
 8002cb2:	4613      	movlt	r3, r2
 8002cb4:	6033      	str	r3, [r6, #0]
 8002cb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cba:	460c      	mov	r4, r1
 8002cbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cc0:	b10a      	cbz	r2, 8002cc6 <_printf_common+0x26>
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	6033      	str	r3, [r6, #0]
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	0699      	lsls	r1, r3, #26
 8002cca:	bf42      	ittt	mi
 8002ccc:	6833      	ldrmi	r3, [r6, #0]
 8002cce:	3302      	addmi	r3, #2
 8002cd0:	6033      	strmi	r3, [r6, #0]
 8002cd2:	6825      	ldr	r5, [r4, #0]
 8002cd4:	f015 0506 	ands.w	r5, r5, #6
 8002cd8:	d106      	bne.n	8002ce8 <_printf_common+0x48>
 8002cda:	f104 0a19 	add.w	sl, r4, #25
 8002cde:	68e3      	ldr	r3, [r4, #12]
 8002ce0:	6832      	ldr	r2, [r6, #0]
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	42ab      	cmp	r3, r5
 8002ce6:	dc28      	bgt.n	8002d3a <_printf_common+0x9a>
 8002ce8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002cec:	1e13      	subs	r3, r2, #0
 8002cee:	6822      	ldr	r2, [r4, #0]
 8002cf0:	bf18      	it	ne
 8002cf2:	2301      	movne	r3, #1
 8002cf4:	0692      	lsls	r2, r2, #26
 8002cf6:	d42d      	bmi.n	8002d54 <_printf_common+0xb4>
 8002cf8:	4649      	mov	r1, r9
 8002cfa:	4638      	mov	r0, r7
 8002cfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d00:	47c0      	blx	r8
 8002d02:	3001      	adds	r0, #1
 8002d04:	d020      	beq.n	8002d48 <_printf_common+0xa8>
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	68e5      	ldr	r5, [r4, #12]
 8002d0a:	f003 0306 	and.w	r3, r3, #6
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	bf18      	it	ne
 8002d12:	2500      	movne	r5, #0
 8002d14:	6832      	ldr	r2, [r6, #0]
 8002d16:	f04f 0600 	mov.w	r6, #0
 8002d1a:	68a3      	ldr	r3, [r4, #8]
 8002d1c:	bf08      	it	eq
 8002d1e:	1aad      	subeq	r5, r5, r2
 8002d20:	6922      	ldr	r2, [r4, #16]
 8002d22:	bf08      	it	eq
 8002d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	bfc4      	itt	gt
 8002d2c:	1a9b      	subgt	r3, r3, r2
 8002d2e:	18ed      	addgt	r5, r5, r3
 8002d30:	341a      	adds	r4, #26
 8002d32:	42b5      	cmp	r5, r6
 8002d34:	d11a      	bne.n	8002d6c <_printf_common+0xcc>
 8002d36:	2000      	movs	r0, #0
 8002d38:	e008      	b.n	8002d4c <_printf_common+0xac>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	4652      	mov	r2, sl
 8002d3e:	4649      	mov	r1, r9
 8002d40:	4638      	mov	r0, r7
 8002d42:	47c0      	blx	r8
 8002d44:	3001      	adds	r0, #1
 8002d46:	d103      	bne.n	8002d50 <_printf_common+0xb0>
 8002d48:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d50:	3501      	adds	r5, #1
 8002d52:	e7c4      	b.n	8002cde <_printf_common+0x3e>
 8002d54:	2030      	movs	r0, #48	; 0x30
 8002d56:	18e1      	adds	r1, r4, r3
 8002d58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d62:	4422      	add	r2, r4
 8002d64:	3302      	adds	r3, #2
 8002d66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d6a:	e7c5      	b.n	8002cf8 <_printf_common+0x58>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	4622      	mov	r2, r4
 8002d70:	4649      	mov	r1, r9
 8002d72:	4638      	mov	r0, r7
 8002d74:	47c0      	blx	r8
 8002d76:	3001      	adds	r0, #1
 8002d78:	d0e6      	beq.n	8002d48 <_printf_common+0xa8>
 8002d7a:	3601      	adds	r6, #1
 8002d7c:	e7d9      	b.n	8002d32 <_printf_common+0x92>
	...

08002d80 <_printf_i>:
 8002d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d84:	7e0f      	ldrb	r7, [r1, #24]
 8002d86:	4691      	mov	r9, r2
 8002d88:	2f78      	cmp	r7, #120	; 0x78
 8002d8a:	4680      	mov	r8, r0
 8002d8c:	460c      	mov	r4, r1
 8002d8e:	469a      	mov	sl, r3
 8002d90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d96:	d807      	bhi.n	8002da8 <_printf_i+0x28>
 8002d98:	2f62      	cmp	r7, #98	; 0x62
 8002d9a:	d80a      	bhi.n	8002db2 <_printf_i+0x32>
 8002d9c:	2f00      	cmp	r7, #0
 8002d9e:	f000 80d9 	beq.w	8002f54 <_printf_i+0x1d4>
 8002da2:	2f58      	cmp	r7, #88	; 0x58
 8002da4:	f000 80a4 	beq.w	8002ef0 <_printf_i+0x170>
 8002da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002db0:	e03a      	b.n	8002e28 <_printf_i+0xa8>
 8002db2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002db6:	2b15      	cmp	r3, #21
 8002db8:	d8f6      	bhi.n	8002da8 <_printf_i+0x28>
 8002dba:	a101      	add	r1, pc, #4	; (adr r1, 8002dc0 <_printf_i+0x40>)
 8002dbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002dc0:	08002e19 	.word	0x08002e19
 8002dc4:	08002e2d 	.word	0x08002e2d
 8002dc8:	08002da9 	.word	0x08002da9
 8002dcc:	08002da9 	.word	0x08002da9
 8002dd0:	08002da9 	.word	0x08002da9
 8002dd4:	08002da9 	.word	0x08002da9
 8002dd8:	08002e2d 	.word	0x08002e2d
 8002ddc:	08002da9 	.word	0x08002da9
 8002de0:	08002da9 	.word	0x08002da9
 8002de4:	08002da9 	.word	0x08002da9
 8002de8:	08002da9 	.word	0x08002da9
 8002dec:	08002f3b 	.word	0x08002f3b
 8002df0:	08002e5d 	.word	0x08002e5d
 8002df4:	08002f1d 	.word	0x08002f1d
 8002df8:	08002da9 	.word	0x08002da9
 8002dfc:	08002da9 	.word	0x08002da9
 8002e00:	08002f5d 	.word	0x08002f5d
 8002e04:	08002da9 	.word	0x08002da9
 8002e08:	08002e5d 	.word	0x08002e5d
 8002e0c:	08002da9 	.word	0x08002da9
 8002e10:	08002da9 	.word	0x08002da9
 8002e14:	08002f25 	.word	0x08002f25
 8002e18:	682b      	ldr	r3, [r5, #0]
 8002e1a:	1d1a      	adds	r2, r3, #4
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	602a      	str	r2, [r5, #0]
 8002e20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0a4      	b.n	8002f76 <_printf_i+0x1f6>
 8002e2c:	6820      	ldr	r0, [r4, #0]
 8002e2e:	6829      	ldr	r1, [r5, #0]
 8002e30:	0606      	lsls	r6, r0, #24
 8002e32:	f101 0304 	add.w	r3, r1, #4
 8002e36:	d50a      	bpl.n	8002e4e <_printf_i+0xce>
 8002e38:	680e      	ldr	r6, [r1, #0]
 8002e3a:	602b      	str	r3, [r5, #0]
 8002e3c:	2e00      	cmp	r6, #0
 8002e3e:	da03      	bge.n	8002e48 <_printf_i+0xc8>
 8002e40:	232d      	movs	r3, #45	; 0x2d
 8002e42:	4276      	negs	r6, r6
 8002e44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e48:	230a      	movs	r3, #10
 8002e4a:	485e      	ldr	r0, [pc, #376]	; (8002fc4 <_printf_i+0x244>)
 8002e4c:	e019      	b.n	8002e82 <_printf_i+0x102>
 8002e4e:	680e      	ldr	r6, [r1, #0]
 8002e50:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e54:	602b      	str	r3, [r5, #0]
 8002e56:	bf18      	it	ne
 8002e58:	b236      	sxthne	r6, r6
 8002e5a:	e7ef      	b.n	8002e3c <_printf_i+0xbc>
 8002e5c:	682b      	ldr	r3, [r5, #0]
 8002e5e:	6820      	ldr	r0, [r4, #0]
 8002e60:	1d19      	adds	r1, r3, #4
 8002e62:	6029      	str	r1, [r5, #0]
 8002e64:	0601      	lsls	r1, r0, #24
 8002e66:	d501      	bpl.n	8002e6c <_printf_i+0xec>
 8002e68:	681e      	ldr	r6, [r3, #0]
 8002e6a:	e002      	b.n	8002e72 <_printf_i+0xf2>
 8002e6c:	0646      	lsls	r6, r0, #25
 8002e6e:	d5fb      	bpl.n	8002e68 <_printf_i+0xe8>
 8002e70:	881e      	ldrh	r6, [r3, #0]
 8002e72:	2f6f      	cmp	r7, #111	; 0x6f
 8002e74:	bf0c      	ite	eq
 8002e76:	2308      	moveq	r3, #8
 8002e78:	230a      	movne	r3, #10
 8002e7a:	4852      	ldr	r0, [pc, #328]	; (8002fc4 <_printf_i+0x244>)
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e82:	6865      	ldr	r5, [r4, #4]
 8002e84:	2d00      	cmp	r5, #0
 8002e86:	bfa8      	it	ge
 8002e88:	6821      	ldrge	r1, [r4, #0]
 8002e8a:	60a5      	str	r5, [r4, #8]
 8002e8c:	bfa4      	itt	ge
 8002e8e:	f021 0104 	bicge.w	r1, r1, #4
 8002e92:	6021      	strge	r1, [r4, #0]
 8002e94:	b90e      	cbnz	r6, 8002e9a <_printf_i+0x11a>
 8002e96:	2d00      	cmp	r5, #0
 8002e98:	d04d      	beq.n	8002f36 <_printf_i+0x1b6>
 8002e9a:	4615      	mov	r5, r2
 8002e9c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002ea0:	fb03 6711 	mls	r7, r3, r1, r6
 8002ea4:	5dc7      	ldrb	r7, [r0, r7]
 8002ea6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002eaa:	4637      	mov	r7, r6
 8002eac:	42bb      	cmp	r3, r7
 8002eae:	460e      	mov	r6, r1
 8002eb0:	d9f4      	bls.n	8002e9c <_printf_i+0x11c>
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d10b      	bne.n	8002ece <_printf_i+0x14e>
 8002eb6:	6823      	ldr	r3, [r4, #0]
 8002eb8:	07de      	lsls	r6, r3, #31
 8002eba:	d508      	bpl.n	8002ece <_printf_i+0x14e>
 8002ebc:	6923      	ldr	r3, [r4, #16]
 8002ebe:	6861      	ldr	r1, [r4, #4]
 8002ec0:	4299      	cmp	r1, r3
 8002ec2:	bfde      	ittt	le
 8002ec4:	2330      	movle	r3, #48	; 0x30
 8002ec6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002eca:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ece:	1b52      	subs	r2, r2, r5
 8002ed0:	6122      	str	r2, [r4, #16]
 8002ed2:	464b      	mov	r3, r9
 8002ed4:	4621      	mov	r1, r4
 8002ed6:	4640      	mov	r0, r8
 8002ed8:	f8cd a000 	str.w	sl, [sp]
 8002edc:	aa03      	add	r2, sp, #12
 8002ede:	f7ff fedf 	bl	8002ca0 <_printf_common>
 8002ee2:	3001      	adds	r0, #1
 8002ee4:	d14c      	bne.n	8002f80 <_printf_i+0x200>
 8002ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eea:	b004      	add	sp, #16
 8002eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ef0:	4834      	ldr	r0, [pc, #208]	; (8002fc4 <_printf_i+0x244>)
 8002ef2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002ef6:	6829      	ldr	r1, [r5, #0]
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	f851 6b04 	ldr.w	r6, [r1], #4
 8002efe:	6029      	str	r1, [r5, #0]
 8002f00:	061d      	lsls	r5, r3, #24
 8002f02:	d514      	bpl.n	8002f2e <_printf_i+0x1ae>
 8002f04:	07df      	lsls	r7, r3, #31
 8002f06:	bf44      	itt	mi
 8002f08:	f043 0320 	orrmi.w	r3, r3, #32
 8002f0c:	6023      	strmi	r3, [r4, #0]
 8002f0e:	b91e      	cbnz	r6, 8002f18 <_printf_i+0x198>
 8002f10:	6823      	ldr	r3, [r4, #0]
 8002f12:	f023 0320 	bic.w	r3, r3, #32
 8002f16:	6023      	str	r3, [r4, #0]
 8002f18:	2310      	movs	r3, #16
 8002f1a:	e7af      	b.n	8002e7c <_printf_i+0xfc>
 8002f1c:	6823      	ldr	r3, [r4, #0]
 8002f1e:	f043 0320 	orr.w	r3, r3, #32
 8002f22:	6023      	str	r3, [r4, #0]
 8002f24:	2378      	movs	r3, #120	; 0x78
 8002f26:	4828      	ldr	r0, [pc, #160]	; (8002fc8 <_printf_i+0x248>)
 8002f28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f2c:	e7e3      	b.n	8002ef6 <_printf_i+0x176>
 8002f2e:	0659      	lsls	r1, r3, #25
 8002f30:	bf48      	it	mi
 8002f32:	b2b6      	uxthmi	r6, r6
 8002f34:	e7e6      	b.n	8002f04 <_printf_i+0x184>
 8002f36:	4615      	mov	r5, r2
 8002f38:	e7bb      	b.n	8002eb2 <_printf_i+0x132>
 8002f3a:	682b      	ldr	r3, [r5, #0]
 8002f3c:	6826      	ldr	r6, [r4, #0]
 8002f3e:	1d18      	adds	r0, r3, #4
 8002f40:	6961      	ldr	r1, [r4, #20]
 8002f42:	6028      	str	r0, [r5, #0]
 8002f44:	0635      	lsls	r5, r6, #24
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	d501      	bpl.n	8002f4e <_printf_i+0x1ce>
 8002f4a:	6019      	str	r1, [r3, #0]
 8002f4c:	e002      	b.n	8002f54 <_printf_i+0x1d4>
 8002f4e:	0670      	lsls	r0, r6, #25
 8002f50:	d5fb      	bpl.n	8002f4a <_printf_i+0x1ca>
 8002f52:	8019      	strh	r1, [r3, #0]
 8002f54:	2300      	movs	r3, #0
 8002f56:	4615      	mov	r5, r2
 8002f58:	6123      	str	r3, [r4, #16]
 8002f5a:	e7ba      	b.n	8002ed2 <_printf_i+0x152>
 8002f5c:	682b      	ldr	r3, [r5, #0]
 8002f5e:	2100      	movs	r1, #0
 8002f60:	1d1a      	adds	r2, r3, #4
 8002f62:	602a      	str	r2, [r5, #0]
 8002f64:	681d      	ldr	r5, [r3, #0]
 8002f66:	6862      	ldr	r2, [r4, #4]
 8002f68:	4628      	mov	r0, r5
 8002f6a:	f000 f863 	bl	8003034 <memchr>
 8002f6e:	b108      	cbz	r0, 8002f74 <_printf_i+0x1f4>
 8002f70:	1b40      	subs	r0, r0, r5
 8002f72:	6060      	str	r0, [r4, #4]
 8002f74:	6863      	ldr	r3, [r4, #4]
 8002f76:	6123      	str	r3, [r4, #16]
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f7e:	e7a8      	b.n	8002ed2 <_printf_i+0x152>
 8002f80:	462a      	mov	r2, r5
 8002f82:	4649      	mov	r1, r9
 8002f84:	4640      	mov	r0, r8
 8002f86:	6923      	ldr	r3, [r4, #16]
 8002f88:	47d0      	blx	sl
 8002f8a:	3001      	adds	r0, #1
 8002f8c:	d0ab      	beq.n	8002ee6 <_printf_i+0x166>
 8002f8e:	6823      	ldr	r3, [r4, #0]
 8002f90:	079b      	lsls	r3, r3, #30
 8002f92:	d413      	bmi.n	8002fbc <_printf_i+0x23c>
 8002f94:	68e0      	ldr	r0, [r4, #12]
 8002f96:	9b03      	ldr	r3, [sp, #12]
 8002f98:	4298      	cmp	r0, r3
 8002f9a:	bfb8      	it	lt
 8002f9c:	4618      	movlt	r0, r3
 8002f9e:	e7a4      	b.n	8002eea <_printf_i+0x16a>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	4632      	mov	r2, r6
 8002fa4:	4649      	mov	r1, r9
 8002fa6:	4640      	mov	r0, r8
 8002fa8:	47d0      	blx	sl
 8002faa:	3001      	adds	r0, #1
 8002fac:	d09b      	beq.n	8002ee6 <_printf_i+0x166>
 8002fae:	3501      	adds	r5, #1
 8002fb0:	68e3      	ldr	r3, [r4, #12]
 8002fb2:	9903      	ldr	r1, [sp, #12]
 8002fb4:	1a5b      	subs	r3, r3, r1
 8002fb6:	42ab      	cmp	r3, r5
 8002fb8:	dcf2      	bgt.n	8002fa0 <_printf_i+0x220>
 8002fba:	e7eb      	b.n	8002f94 <_printf_i+0x214>
 8002fbc:	2500      	movs	r5, #0
 8002fbe:	f104 0619 	add.w	r6, r4, #25
 8002fc2:	e7f5      	b.n	8002fb0 <_printf_i+0x230>
 8002fc4:	08003165 	.word	0x08003165
 8002fc8:	08003176 	.word	0x08003176

08002fcc <_read_r>:
 8002fcc:	b538      	push	{r3, r4, r5, lr}
 8002fce:	4604      	mov	r4, r0
 8002fd0:	4608      	mov	r0, r1
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	4d05      	ldr	r5, [pc, #20]	; (8002fec <_read_r+0x20>)
 8002fd8:	602a      	str	r2, [r5, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f7fd fcbb 	bl	8000956 <_read>
 8002fe0:	1c43      	adds	r3, r0, #1
 8002fe2:	d102      	bne.n	8002fea <_read_r+0x1e>
 8002fe4:	682b      	ldr	r3, [r5, #0]
 8002fe6:	b103      	cbz	r3, 8002fea <_read_r+0x1e>
 8002fe8:	6023      	str	r3, [r4, #0]
 8002fea:	bd38      	pop	{r3, r4, r5, pc}
 8002fec:	200010c4 	.word	0x200010c4

08002ff0 <_fstat_r>:
 8002ff0:	b538      	push	{r3, r4, r5, lr}
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	4d06      	ldr	r5, [pc, #24]	; (8003010 <_fstat_r+0x20>)
 8002ff6:	4604      	mov	r4, r0
 8002ff8:	4608      	mov	r0, r1
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	602b      	str	r3, [r5, #0]
 8002ffe:	f7fd fcee 	bl	80009de <_fstat>
 8003002:	1c43      	adds	r3, r0, #1
 8003004:	d102      	bne.n	800300c <_fstat_r+0x1c>
 8003006:	682b      	ldr	r3, [r5, #0]
 8003008:	b103      	cbz	r3, 800300c <_fstat_r+0x1c>
 800300a:	6023      	str	r3, [r4, #0]
 800300c:	bd38      	pop	{r3, r4, r5, pc}
 800300e:	bf00      	nop
 8003010:	200010c4 	.word	0x200010c4

08003014 <_isatty_r>:
 8003014:	b538      	push	{r3, r4, r5, lr}
 8003016:	2300      	movs	r3, #0
 8003018:	4d05      	ldr	r5, [pc, #20]	; (8003030 <_isatty_r+0x1c>)
 800301a:	4604      	mov	r4, r0
 800301c:	4608      	mov	r0, r1
 800301e:	602b      	str	r3, [r5, #0]
 8003020:	f7fd fcec 	bl	80009fc <_isatty>
 8003024:	1c43      	adds	r3, r0, #1
 8003026:	d102      	bne.n	800302e <_isatty_r+0x1a>
 8003028:	682b      	ldr	r3, [r5, #0]
 800302a:	b103      	cbz	r3, 800302e <_isatty_r+0x1a>
 800302c:	6023      	str	r3, [r4, #0]
 800302e:	bd38      	pop	{r3, r4, r5, pc}
 8003030:	200010c4 	.word	0x200010c4

08003034 <memchr>:
 8003034:	4603      	mov	r3, r0
 8003036:	b510      	push	{r4, lr}
 8003038:	b2c9      	uxtb	r1, r1
 800303a:	4402      	add	r2, r0
 800303c:	4293      	cmp	r3, r2
 800303e:	4618      	mov	r0, r3
 8003040:	d101      	bne.n	8003046 <memchr+0x12>
 8003042:	2000      	movs	r0, #0
 8003044:	e003      	b.n	800304e <memchr+0x1a>
 8003046:	7804      	ldrb	r4, [r0, #0]
 8003048:	3301      	adds	r3, #1
 800304a:	428c      	cmp	r4, r1
 800304c:	d1f6      	bne.n	800303c <memchr+0x8>
 800304e:	bd10      	pop	{r4, pc}

08003050 <_init>:
 8003050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003052:	bf00      	nop
 8003054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003056:	bc08      	pop	{r3}
 8003058:	469e      	mov	lr, r3
 800305a:	4770      	bx	lr

0800305c <_fini>:
 800305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305e:	bf00      	nop
 8003060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003062:	bc08      	pop	{r3}
 8003064:	469e      	mov	lr, r3
 8003066:	4770      	bx	lr
