
canhanh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000151c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800162c  0800162c  0001162c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016d0  080016d0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080016d0  080016d0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016d0  080016d0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016d0  080016d0  000116d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016d4  080016d4  000116d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080016d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000006c  08001744  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08001744  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000049b0  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010c6  00000000  00000000  00024a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004c0  00000000  00000000  00025b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f8  00000000  00000000  00025fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002864  00000000  00000000  000263c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006e2e  00000000  00000000  00028c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000856fc  00000000  00000000  0002fa5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b5156  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015cc  00000000  00000000  000b51a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08001614 	.word	0x08001614

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08001614 	.word	0x08001614

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <GPIO_configureRCC>:
 *  Created on: Jun 5, 2023
 *      Author: nguye
 */
#include "GPIO_configure.h"

void GPIO_configureRCC(char* GPIOx){
 8000160:	b480      	push	{r7}
 8000162:	b083      	sub	sp, #12
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
	while(*GPIOx){
 8000168:	e020      	b.n	80001ac <GPIO_configureRCC+0x4c>
		if(*GPIOx == 'C') RCC->APB2ENR |= (1 << 4);
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	781b      	ldrb	r3, [r3, #0]
 800016e:	2b43      	cmp	r3, #67	; 0x43
 8000170:	d105      	bne.n	800017e <GPIO_configureRCC+0x1e>
 8000172:	4b13      	ldr	r3, [pc, #76]	; (80001c0 <GPIO_configureRCC+0x60>)
 8000174:	699b      	ldr	r3, [r3, #24]
 8000176:	4a12      	ldr	r2, [pc, #72]	; (80001c0 <GPIO_configureRCC+0x60>)
 8000178:	f043 0310 	orr.w	r3, r3, #16
 800017c:	6193      	str	r3, [r2, #24]
		if(*GPIOx == 'B') RCC->APB2ENR |= (1 << 3);
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	2b42      	cmp	r3, #66	; 0x42
 8000184:	d105      	bne.n	8000192 <GPIO_configureRCC+0x32>
 8000186:	4b0e      	ldr	r3, [pc, #56]	; (80001c0 <GPIO_configureRCC+0x60>)
 8000188:	699b      	ldr	r3, [r3, #24]
 800018a:	4a0d      	ldr	r2, [pc, #52]	; (80001c0 <GPIO_configureRCC+0x60>)
 800018c:	f043 0308 	orr.w	r3, r3, #8
 8000190:	6193      	str	r3, [r2, #24]
		if(*GPIOx == 'A') RCC->APB2ENR |= (1 << 2);
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	781b      	ldrb	r3, [r3, #0]
 8000196:	2b41      	cmp	r3, #65	; 0x41
 8000198:	d105      	bne.n	80001a6 <GPIO_configureRCC+0x46>
 800019a:	4b09      	ldr	r3, [pc, #36]	; (80001c0 <GPIO_configureRCC+0x60>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	4a08      	ldr	r2, [pc, #32]	; (80001c0 <GPIO_configureRCC+0x60>)
 80001a0:	f043 0304 	orr.w	r3, r3, #4
 80001a4:	6193      	str	r3, [r2, #24]
		GPIOx++;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	3301      	adds	r3, #1
 80001aa:	607b      	str	r3, [r7, #4]
	while(*GPIOx){
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d1da      	bne.n	800016a <GPIO_configureRCC+0xa>
	}
}
 80001b4:	bf00      	nop
 80001b6:	bf00      	nop
 80001b8:	370c      	adds	r7, #12
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr
 80001c0:	40021000 	.word	0x40021000

080001c4 <GPIO_configure>:
void GPIO_configure(GPIO_TypeDef*GPIOx, uint8_t* Pin, uint8_t* mode){
 80001c4:	b480      	push	{r7}
 80001c6:	b085      	sub	sp, #20
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	60f8      	str	r0, [r7, #12]
 80001cc:	60b9      	str	r1, [r7, #8]
 80001ce:	607a      	str	r2, [r7, #4]
	while(*Pin){
 80001d0:	e03e      	b.n	8000250 <GPIO_configure+0x8c>
		if(*Pin > 7){
 80001d2:	68bb      	ldr	r3, [r7, #8]
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	2b07      	cmp	r3, #7
 80001d8:	d91b      	bls.n	8000212 <GPIO_configure+0x4e>
			GPIOx->CRH &= ~(15<<(*Pin * 4 - 32));
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	685b      	ldr	r3, [r3, #4]
 80001de:	68ba      	ldr	r2, [r7, #8]
 80001e0:	7812      	ldrb	r2, [r2, #0]
 80001e2:	3a08      	subs	r2, #8
 80001e4:	0092      	lsls	r2, r2, #2
 80001e6:	210f      	movs	r1, #15
 80001e8:	fa01 f202 	lsl.w	r2, r1, r2
 80001ec:	43d2      	mvns	r2, r2
 80001ee:	401a      	ands	r2, r3
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	605a      	str	r2, [r3, #4]
			GPIOx->CRH |= *mode << (*Pin * 4 - 32);
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	687a      	ldr	r2, [r7, #4]
 80001fa:	7812      	ldrb	r2, [r2, #0]
 80001fc:	4611      	mov	r1, r2
 80001fe:	68ba      	ldr	r2, [r7, #8]
 8000200:	7812      	ldrb	r2, [r2, #0]
 8000202:	3a08      	subs	r2, #8
 8000204:	0092      	lsls	r2, r2, #2
 8000206:	fa01 f202 	lsl.w	r2, r1, r2
 800020a:	431a      	orrs	r2, r3
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	e018      	b.n	8000244 <GPIO_configure+0x80>
		}else{
			GPIOx->CRL &= ~(15<<(*Pin * 4));
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	68ba      	ldr	r2, [r7, #8]
 8000218:	7812      	ldrb	r2, [r2, #0]
 800021a:	0092      	lsls	r2, r2, #2
 800021c:	210f      	movs	r1, #15
 800021e:	fa01 f202 	lsl.w	r2, r1, r2
 8000222:	43d2      	mvns	r2, r2
 8000224:	401a      	ands	r2, r3
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	601a      	str	r2, [r3, #0]
			GPIOx->CRL |= *mode << (*Pin * 4);
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	687a      	ldr	r2, [r7, #4]
 8000230:	7812      	ldrb	r2, [r2, #0]
 8000232:	4611      	mov	r1, r2
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	7812      	ldrb	r2, [r2, #0]
 8000238:	0092      	lsls	r2, r2, #2
 800023a:	fa01 f202 	lsl.w	r2, r1, r2
 800023e:	431a      	orrs	r2, r3
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	601a      	str	r2, [r3, #0]
		}
		Pin++;
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	3301      	adds	r3, #1
 8000248:	60bb      	str	r3, [r7, #8]
		mode++;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	3301      	adds	r3, #1
 800024e:	607b      	str	r3, [r7, #4]
	while(*Pin){
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d1bc      	bne.n	80001d2 <GPIO_configure+0xe>
	}
}
 8000258:	bf00      	nop
 800025a:	bf00      	nop
 800025c:	3714      	adds	r7, #20
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr

08000264 <I2C_GPIO_Config>:
#include"I2C_Configure.h"
#include "stm32f1xx.h"
void I2C_GPIO_Config(void) {
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
    // Báº­t clock cho GPIOB
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000268:	4b07      	ldr	r3, [pc, #28]	; (8000288 <I2C_GPIO_Config+0x24>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a06      	ldr	r2, [pc, #24]	; (8000288 <I2C_GPIO_Config+0x24>)
 800026e:	f043 0308 	orr.w	r3, r3, #8
 8000272:	6193      	str	r3, [r2, #24]
    GPIOB->CRL |= 0xFF000000;
 8000274:	4b05      	ldr	r3, [pc, #20]	; (800028c <I2C_GPIO_Config+0x28>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a04      	ldr	r2, [pc, #16]	; (800028c <I2C_GPIO_Config+0x28>)
 800027a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr
 8000288:	40021000 	.word	0x40021000
 800028c:	40010c00 	.word	0x40010c00

08000290 <I2C1_Configure>:
void I2C1_Configure(void){
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000294:	4b16      	ldr	r3, [pc, #88]	; (80002f0 <I2C1_Configure+0x60>)
 8000296:	69db      	ldr	r3, [r3, #28]
 8000298:	4a15      	ldr	r2, [pc, #84]	; (80002f0 <I2C1_Configure+0x60>)
 800029a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800029e:	61d3      	str	r3, [r2, #28]
		I2C1->CR1 |= I2C_CR1_SWRST;
 80002a0:	4b14      	ldr	r3, [pc, #80]	; (80002f4 <I2C1_Configure+0x64>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a13      	ldr	r2, [pc, #76]	; (80002f4 <I2C1_Configure+0x64>)
 80002a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002aa:	6013      	str	r3, [r2, #0]
		I2C1->CR1 &= ~I2C_CR1_SWRST;
 80002ac:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <I2C1_Configure+0x64>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a10      	ldr	r2, [pc, #64]	; (80002f4 <I2C1_Configure+0x64>)
 80002b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002b6:	6013      	str	r3, [r2, #0]
	    I2C1->OAR1 |=(1<<14);
 80002b8:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <I2C1_Configure+0x64>)
 80002ba:	689b      	ldr	r3, [r3, #8]
 80002bc:	4a0d      	ldr	r2, [pc, #52]	; (80002f4 <I2C1_Configure+0x64>)
 80002be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002c2:	6093      	str	r3, [r2, #8]
	    I2C1->CR2 |= 36; // Äáº·t táº§n sá» lÃ  36 MHz
 80002c4:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <I2C1_Configure+0x64>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <I2C1_Configure+0x64>)
 80002ca:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80002ce:	6053      	str	r3, [r2, #4]
	    I2C1->CCR = 180; // CÃ i Äáº·t CCR cho tá»c Äá» 100kHz
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <I2C1_Configure+0x64>)
 80002d2:	22b4      	movs	r2, #180	; 0xb4
 80002d4:	61da      	str	r2, [r3, #28]
	    I2C1->TRISE = 37; // CÃ i Äáº·t TRISE cho tá»c Äá» 100kHz
 80002d6:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <I2C1_Configure+0x64>)
 80002d8:	2225      	movs	r2, #37	; 0x25
 80002da:	621a      	str	r2, [r3, #32]
	    I2C1->CR1 |= I2C_CR1_PE; // Báº­t I2C
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <I2C1_Configure+0x64>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a04      	ldr	r2, [pc, #16]	; (80002f4 <I2C1_Configure+0x64>)
 80002e2:	f043 0301 	orr.w	r3, r3, #1
 80002e6:	6013      	str	r3, [r2, #0]
}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	40021000 	.word	0x40021000
 80002f4:	40005400 	.word	0x40005400

080002f8 <I2C_WriteData>:
void I2C_WriteData(I2C_TypeDef *i2c, uint8_t slaveAddress, uint8_t *data, uint16_t dataSize) {
 80002f8:	b480      	push	{r7}
 80002fa:	b087      	sub	sp, #28
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	607a      	str	r2, [r7, #4]
 8000302:	461a      	mov	r2, r3
 8000304:	460b      	mov	r3, r1
 8000306:	72fb      	strb	r3, [r7, #11]
 8000308:	4613      	mov	r3, r2
 800030a:	813b      	strh	r3, [r7, #8]
    while (i2c->SR2 & I2C_SR2_BUSY);
 800030c:	bf00      	nop
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	f003 0302 	and.w	r3, r3, #2
 8000316:	2b00      	cmp	r3, #0
 8000318:	d1f9      	bne.n	800030e <I2C_WriteData+0x16>
    // Báº¯t Äáº§u quÃ¡ trÃ¬nh truyá»n
    i2c->CR1 |= I2C_CR1_START;
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	601a      	str	r2, [r3, #0]
    // Chá» cho tá»i khi quÃ¡ trÃ¬nh truyá»n báº¯t Äáº§u
    while (!(i2c->SR1 & I2C_SR1_SB));
 8000326:	bf00      	nop
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	f003 0301 	and.w	r3, r3, #1
 8000330:	2b00      	cmp	r3, #0
 8000332:	d0f9      	beq.n	8000328 <I2C_WriteData+0x30>
    // Gá»­i Äá»a chá» slave vÃ  cháº¿ Äá» ghi
    i2c->DR = (slaveAddress << 1) & 0xFE;
 8000334:	7afb      	ldrb	r3, [r7, #11]
 8000336:	005b      	lsls	r3, r3, #1
 8000338:	b2da      	uxtb	r2, r3
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	611a      	str	r2, [r3, #16]
    while (!(i2c->SR1 & (1<<1)));
 800033e:	bf00      	nop
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	f003 0302 	and.w	r3, r3, #2
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f9      	beq.n	8000340 <I2C_WriteData+0x48>
    volatile uint32_t temp = i2c->SR1;
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	613b      	str	r3, [r7, #16]
    temp = i2c->SR2;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	613b      	str	r3, [r7, #16]
    (void)temp;
 8000358:	693b      	ldr	r3, [r7, #16]
    // Gá»­i dá»¯ liá»u
    for (uint16_t i = 0; i < dataSize; ++i) {
 800035a:	2300      	movs	r3, #0
 800035c:	82fb      	strh	r3, [r7, #22]
 800035e:	e010      	b.n	8000382 <I2C_WriteData+0x8a>
    	i2c->DR = data[i];
 8000360:	8afb      	ldrh	r3, [r7, #22]
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	4413      	add	r3, r2
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	461a      	mov	r2, r3
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	611a      	str	r2, [r3, #16]
        while (!(i2c->SR1 & I2C_SR1_TXE));
 800036e:	bf00      	nop
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000378:	2b00      	cmp	r3, #0
 800037a:	d0f9      	beq.n	8000370 <I2C_WriteData+0x78>
    for (uint16_t i = 0; i < dataSize; ++i) {
 800037c:	8afb      	ldrh	r3, [r7, #22]
 800037e:	3301      	adds	r3, #1
 8000380:	82fb      	strh	r3, [r7, #22]
 8000382:	8afa      	ldrh	r2, [r7, #22]
 8000384:	893b      	ldrh	r3, [r7, #8]
 8000386:	429a      	cmp	r2, r3
 8000388:	d3ea      	bcc.n	8000360 <I2C_WriteData+0x68>
    }
    // Chá» cho tá»i khi byte transfer hoÃ n thÃ nh (BTF)
    while (!(i2c->SR1 & I2C_SR1_BTF));
 800038a:	bf00      	nop
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	695b      	ldr	r3, [r3, #20]
 8000390:	f003 0304 	and.w	r3, r3, #4
 8000394:	2b00      	cmp	r3, #0
 8000396:	d0f9      	beq.n	800038c <I2C_WriteData+0x94>
    // Káº¿t thÃºc truyá»n
    i2c->CR1 |= I2C_CR1_STOP;
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	601a      	str	r2, [r3, #0]
}
 80003a4:	bf00      	nop
 80003a6:	371c      	adds	r7, #28
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bc80      	pop	{r7}
 80003ac:	4770      	bx	lr
	...

080003b0 <lcd_send_cmd>:
#include <string.h>
#include <stdarg.h>
#include "LiquidCrystal_I2C.h"
#include"I2C_Configure.h"
static void lcd_send_cmd (LiquidCrystal_I2C *lcd, uint8_t cmd)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	460b      	mov	r3, r1
 80003ba:	70fb      	strb	r3, [r7, #3]
  uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (cmd&0xf0);
 80003bc:	78fb      	ldrb	r3, [r7, #3]
 80003be:	f023 030f 	bic.w	r3, r3, #15
 80003c2:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80003c4:	78fb      	ldrb	r3, [r7, #3]
 80003c6:	011b      	lsls	r3, r3, #4
 80003c8:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	789a      	ldrb	r2, [r3, #2]
 80003ce:	7bfb      	ldrb	r3, [r7, #15]
 80003d0:	4313      	orrs	r3, r2
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	f043 0304 	orr.w	r3, r3, #4
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	789a      	ldrb	r2, [r3, #2]
 80003e0:	7bfb      	ldrb	r3, [r7, #15]
 80003e2:	4313      	orrs	r3, r2
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	789a      	ldrb	r2, [r3, #2]
 80003ec:	7bbb      	ldrb	r3, [r7, #14]
 80003ee:	4313      	orrs	r3, r2
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	f043 0304 	orr.w	r3, r3, #4
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	789a      	ldrb	r2, [r3, #2]
 80003fe:	7bbb      	ldrb	r3, [r7, #14]
 8000400:	4313      	orrs	r3, r2
 8000402:	b2db      	uxtb	r3, r3
 8000404:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit(&hi2c1, lcd->Addr,(uint8_t *) data_t, 4, 100);
	I2C_WriteData(I2C1, 0x27, (uint8_t *) data_t, 4);
 8000406:	f107 0208 	add.w	r2, r7, #8
 800040a:	2304      	movs	r3, #4
 800040c:	2127      	movs	r1, #39	; 0x27
 800040e:	4803      	ldr	r0, [pc, #12]	; (800041c <lcd_send_cmd+0x6c>)
 8000410:	f7ff ff72 	bl	80002f8 <I2C_WriteData>
}
 8000414:	bf00      	nop
 8000416:	3710      	adds	r7, #16
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40005400 	.word	0x40005400

08000420 <lcd_send_data>:

static void lcd_send_data(LiquidCrystal_I2C *lcd,uint8_t data)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	460b      	mov	r3, r1
 800042a:	70fb      	strb	r3, [r7, #3]
	uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (data&0xf0);
 800042c:	78fb      	ldrb	r3, [r7, #3]
 800042e:	f023 030f 	bic.w	r3, r3, #15
 8000432:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000434:	78fb      	ldrb	r3, [r7, #3]
 8000436:	011b      	lsls	r3, r3, #4
 8000438:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	789a      	ldrb	r2, [r3, #2]
 800043e:	7bfb      	ldrb	r3, [r7, #15]
 8000440:	4313      	orrs	r3, r2
 8000442:	b2db      	uxtb	r3, r3
 8000444:	f043 0305 	orr.w	r3, r3, #5
 8000448:	b2db      	uxtb	r3, r3
 800044a:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	789a      	ldrb	r2, [r3, #2]
 8000450:	7bfb      	ldrb	r3, [r7, #15]
 8000452:	4313      	orrs	r3, r2
 8000454:	b2db      	uxtb	r3, r3
 8000456:	f043 0301 	orr.w	r3, r3, #1
 800045a:	b2db      	uxtb	r3, r3
 800045c:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	789a      	ldrb	r2, [r3, #2]
 8000462:	7bbb      	ldrb	r3, [r7, #14]
 8000464:	4313      	orrs	r3, r2
 8000466:	b2db      	uxtb	r3, r3
 8000468:	f043 0305 	orr.w	r3, r3, #5
 800046c:	b2db      	uxtb	r3, r3
 800046e:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	789a      	ldrb	r2, [r3, #2]
 8000474:	7bbb      	ldrb	r3, [r7, #14]
 8000476:	4313      	orrs	r3, r2
 8000478:	b2db      	uxtb	r3, r3
 800047a:	f043 0301 	orr.w	r3, r3, #1
 800047e:	b2db      	uxtb	r3, r3
 8000480:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (&hi2c1, lcd->Addr,(uint8_t *) data_t, 4, 100);
	I2C_WriteData(I2C1, 0x27, (uint8_t *) data_t, 4);
 8000482:	f107 0208 	add.w	r2, r7, #8
 8000486:	2304      	movs	r3, #4
 8000488:	2127      	movs	r1, #39	; 0x27
 800048a:	4803      	ldr	r0, [pc, #12]	; (8000498 <lcd_send_data+0x78>)
 800048c:	f7ff ff34 	bl	80002f8 <I2C_WriteData>
}
 8000490:	bf00      	nop
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40005400 	.word	0x40005400

0800049c <lcd_set_cursor>:
//	HAL_I2C_Master_Transmit (&hi2c1, lcd->Addr,&lcd->Backlightval, 1, 100);
	I2C_WriteData(I2C1, 0x27, &lcd->Backlightval, 1);
}

void lcd_set_cursor(LiquidCrystal_I2C *lcd,uint8_t row, uint8_t col)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	460b      	mov	r3, r1
 80004a6:	70fb      	strb	r3, [r7, #3]
 80004a8:	4613      	mov	r3, r2
 80004aa:	70bb      	strb	r3, [r7, #2]
	uint8_t row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80004ac:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <lcd_set_cursor+0x40>)
 80004ae:	60fb      	str	r3, [r7, #12]
	lcd_send_cmd(lcd,LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80004b0:	78fb      	ldrb	r3, [r7, #3]
 80004b2:	3310      	adds	r3, #16
 80004b4:	443b      	add	r3, r7
 80004b6:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80004ba:	78bb      	ldrb	r3, [r7, #2]
 80004bc:	4413      	add	r3, r2
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	b25b      	sxtb	r3, r3
 80004c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004c6:	b25b      	sxtb	r3, r3
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	4619      	mov	r1, r3
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f7ff ff6f 	bl	80003b0 <lcd_send_cmd>
}
 80004d2:	bf00      	nop
 80004d4:	3710      	adds	r7, #16
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	54144000 	.word	0x54144000

080004e0 <lcd_set_cursor_blink_off>:
	
	lcd->DisplayControl |= LCD_BLINKON;
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
}
void lcd_set_cursor_blink_off(LiquidCrystal_I2C *lcd) 
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	lcd->DisplayControl &= ~LCD_BLINKON;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	785b      	ldrb	r3, [r3, #1]
 80004ec:	f023 0301 	bic.w	r3, r3, #1
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	705a      	strb	r2, [r3, #1]
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	785b      	ldrb	r3, [r3, #1]
 80004fa:	f043 0308 	orr.w	r3, r3, #8
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	4619      	mov	r1, r3
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f7ff ff54 	bl	80003b0 <lcd_send_cmd>
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <lcd_printf>:
void lcd_write(LiquidCrystal_I2C *lcd,uint8_t location)
{
	lcd_send_data(lcd,location);
}
void lcd_printf(LiquidCrystal_I2C *lcd,const char* str, ...)
{
 8000510:	b40e      	push	{r1, r2, r3}
 8000512:	b590      	push	{r4, r7, lr}
 8000514:	b08a      	sub	sp, #40	; 0x28
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
  char stringArray[20];
	
  va_list args;
  va_start(args, str);
 800051a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800051e:	60fb      	str	r3, [r7, #12]
  vsprintf(stringArray, str, args);
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	68fa      	ldr	r2, [r7, #12]
 8000526:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000528:	4618      	mov	r0, r3
 800052a:	f000 fcc3 	bl	8000eb4 <vsiprintf>
  va_end(args);
	
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 800052e:	2300      	movs	r3, #0
 8000530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000534:	e00e      	b.n	8000554 <lcd_printf+0x44>
  {
    lcd_send_data(lcd,(uint8_t)stringArray[i]);
 8000536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800053a:	3328      	adds	r3, #40	; 0x28
 800053c:	443b      	add	r3, r7
 800053e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000542:	4619      	mov	r1, r3
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f7ff ff6b 	bl	8000420 <lcd_send_data>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 800054a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800054e:	3301      	adds	r3, #1
 8000550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000554:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff fdf7 	bl	8000150 <strlen>
 8000562:	4603      	mov	r3, r0
 8000564:	429c      	cmp	r4, r3
 8000566:	d203      	bcs.n	8000570 <lcd_printf+0x60>
 8000568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800056c:	2b0f      	cmp	r3, #15
 800056e:	d9e2      	bls.n	8000536 <lcd_printf+0x26>
  }
}
 8000570:	bf00      	nop
 8000572:	3728      	adds	r7, #40	; 0x28
 8000574:	46bd      	mov	sp, r7
 8000576:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800057a:	b003      	add	sp, #12
 800057c:	4770      	bx	lr

0800057e <lcd_init>:
void lcd_init (LiquidCrystal_I2C *lcd, uint8_t addr)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	b082      	sub	sp, #8
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
 8000586:	460b      	mov	r3, r1
 8000588:	70fb      	strb	r3, [r7, #3]
	lcd->DisplayControl |= LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	785b      	ldrb	r3, [r3, #1]
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	b2da      	uxtb	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	705a      	strb	r2, [r3, #1]
	lcd_send_cmd (lcd,0x33); 
 8000598:	2133      	movs	r1, #51	; 0x33
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f7ff ff08 	bl	80003b0 <lcd_send_cmd>
	lcd_send_cmd (lcd,0x32);
 80005a0:	2132      	movs	r1, #50	; 0x32
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f7ff ff04 	bl	80003b0 <lcd_send_cmd>
	delay_ms2(5);
 80005a8:	2005      	movs	r0, #5
 80005aa:	f000 f8d9 	bl	8000760 <delay_ms2>
	lcd_send_cmd (lcd,LCD_CLEARDISPLAY); 
 80005ae:	2101      	movs	r1, #1
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f7ff fefd 	bl	80003b0 <lcd_send_cmd>
	delay_ms2(5);
 80005b6:	2005      	movs	r0, #5
 80005b8:	f000 f8d2 	bl	8000760 <delay_ms2>
	lcd_send_cmd (lcd,0x0c); 	
 80005bc:	210c      	movs	r1, #12
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f7ff fef6 	bl	80003b0 <lcd_send_cmd>
	delay_ms2(5);
 80005c4:	2005      	movs	r0, #5
 80005c6:	f000 f8cb 	bl	8000760 <delay_ms2>
	lcd_send_cmd (lcd,LCD_RETURNHOME); 
 80005ca:	2102      	movs	r1, #2
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f7ff feef 	bl	80003b0 <lcd_send_cmd>
	delay_ms2(5);
 80005d2:	2005      	movs	r0, #5
 80005d4:	f000 f8c4 	bl	8000760 <delay_ms2>
	lcd_send_cmd (lcd,LCD_SETDDRAMADDR);
 80005d8:	2180      	movs	r1, #128	; 0x80
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f7ff fee8 	bl	80003b0 <lcd_send_cmd>
	lcd_set_cursor_blink_off(lcd);
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f7ff ff7d 	bl	80004e0 <lcd_set_cursor_blink_off>
	lcd->Backlightval = LCD_BACKLIGHT;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2208      	movs	r2, #8
 80005ea:	709a      	strb	r2, [r3, #2]
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <SystemInitAnh>:
 *      Author: nguye
 */
#include "stm32f103.h"
#include "stm32f1xx.h"

void SystemInitAnh(void){
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <SystemInitAnh+0x24>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a06      	ldr	r2, [pc, #24]	; (8000618 <SystemInitAnh+0x24>)
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	6193      	str	r3, [r2, #24]
	AFIO->MAPR |= AFIO_MAPR_SWJ_CFG;
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <SystemInitAnh+0x28>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	4a04      	ldr	r2, [pc, #16]	; (800061c <SystemInitAnh+0x28>)
 800060a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800060e:	6053      	str	r3, [r2, #4]
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	40021000 	.word	0x40021000
 800061c:	40010000 	.word	0x40010000

08000620 <RCC_Configure>:
void RCC_Configure(){
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON;
 8000624:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <RCC_Configure+0xb4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a2a      	ldr	r2, [pc, #168]	; (80006d4 <RCC_Configure+0xb4>)
 800062a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800062e:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 8000630:	bf00      	nop
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <RCC_Configure+0xb4>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0f9      	beq.n	8000632 <RCC_Configure+0x12>

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800063e:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <RCC_Configure+0xb4>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <RCC_Configure+0xb4>)
 8000644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000648:	61d3      	str	r3, [r2, #28]

	FLASH->ACR |= FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <RCC_Configure+0xb8>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a22      	ldr	r2, [pc, #136]	; (80006d8 <RCC_Configure+0xb8>)
 8000650:	f043 0312 	orr.w	r3, r3, #18
 8000654:	6013      	str	r3, [r2, #0]
	while (!(FLASH->ACR & FLASH_ACR_PRFTBS));
 8000656:	bf00      	nop
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <RCC_Configure+0xb8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f003 0320 	and.w	r3, r3, #32
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0f9      	beq.n	8000658 <RCC_Configure+0x38>

	RCC->CFGR |= RCC_CFGR_PLLSRC;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <RCC_Configure+0xb4>)
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	4a1a      	ldr	r2, [pc, #104]	; (80006d4 <RCC_Configure+0xb4>)
 800066a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800066e:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (7 << 18); // nhÃ¢n RCC vá»i 9
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <RCC_Configure+0xb4>)
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <RCC_Configure+0xb4>)
 8000676:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800067a:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (4 << 8); // chia Äá» bus APB1 max 36
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <RCC_Configure+0xb4>)
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <RCC_Configure+0xb4>)
 8000682:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000686:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (3 << 14); // chia ADC cho 6 = 9M
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <RCC_Configure+0xb4>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	4a11      	ldr	r2, [pc, #68]	; (80006d4 <RCC_Configure+0xb4>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000692:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <RCC_Configure+0xb4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <RCC_Configure+0xb4>)
 800069a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800069e:	6013      	str	r3, [r2, #0]

	while (!(RCC->CR & RCC_CR_PLLRDY));
 80006a0:	bf00      	nop
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <RCC_Configure+0xb4>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d0f9      	beq.n	80006a2 <RCC_Configure+0x82>
	RCC->CFGR |= (2 << 0);
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <RCC_Configure+0xb4>)
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	4a08      	ldr	r2, [pc, #32]	; (80006d4 <RCC_Configure+0xb4>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	6053      	str	r3, [r2, #4]
	while (!(RCC->CFGR & (2 << 2)));
 80006ba:	bf00      	nop
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <RCC_Configure+0xb4>)
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	f003 0308 	and.w	r3, r3, #8
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d0f9      	beq.n	80006bc <RCC_Configure+0x9c>
}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40022000 	.word	0x40022000

080006dc <TIM2_Configure>:
#include "TIM_Configure.h"
#include "stm32f1xx.h"

#define UP  1
#define DO  0
void TIM2_Configure(uint16_t PSC, uint32_t ARR){
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	80fb      	strh	r3, [r7, #6]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <TIM2_Configure+0x54>)
 80006ea:	69db      	ldr	r3, [r3, #28]
 80006ec:	4a10      	ldr	r2, [pc, #64]	; (8000730 <TIM2_Configure+0x54>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	61d3      	str	r3, [r2, #28]
	TIM2->PSC = PSC;
 80006f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006f8:	88fb      	ldrh	r3, [r7, #6]
 80006fa:	6293      	str	r3, [r2, #40]	; 0x28
	TIM2->ARR = ARR;
 80006fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CR1 |= (1 << 0);
 8000704:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800070e:	f043 0301 	orr.w	r3, r3, #1
 8000712:	6013      	str	r3, [r2, #0]
	while (!(TIM2->SR & TIM_SR_UIF));
 8000714:	bf00      	nop
 8000716:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800071a:	691b      	ldr	r3, [r3, #16]
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	2b00      	cmp	r3, #0
 8000722:	d0f8      	beq.n	8000716 <TIM2_Configure+0x3a>
}
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	40021000 	.word	0x40021000

08000734 <delay_us2>:
	TIM4->CR1 |= TIM_CR1_ARPE | TIM_CR1_URS;
	TIM4->EGR |= TIM_EGR_UG;
	NVIC_EnableIRQ(TIM4_IRQn);
	TIM4->CR1 |= TIM_CR1_CEN;
}
void delay_us2(uint16_t us){
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	80fb      	strh	r3, [r7, #6]
	TIM2->CNT = 0;
 800073e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
	while (TIM2->CNT < us);
 8000746:	bf00      	nop
 8000748:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800074c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800074e:	88fb      	ldrh	r3, [r7, #6]
 8000750:	429a      	cmp	r2, r3
 8000752:	d3f9      	bcc.n	8000748 <delay_us2+0x14>
}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <delay_ms2>:
void delay_us1(uint16_t us){
	TIM1->CNT = 0;
	while (TIM1->CNT < us);
}
void delay_ms2(uint16_t ms){
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	80fb      	strh	r3, [r7, #6]
	while (ms--){
 800076a:	e003      	b.n	8000774 <delay_ms2+0x14>
		delay_us2(1000);
 800076c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000770:	f7ff ffe0 	bl	8000734 <delay_us2>
	while (ms--){
 8000774:	88fb      	ldrh	r3, [r7, #6]
 8000776:	1e5a      	subs	r2, r3, #1
 8000778:	80fa      	strh	r2, [r7, #6]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d1f6      	bne.n	800076c <delay_ms2+0xc>
	}
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <main>:
//uint8_t GPIOB_mode[] = {1,1};
uint8_t GPIOA_Pin[] = {3,4};
uint8_t numberADC[2] = {3,4};
uint8_t GPIOA_mode[] = {0,0};
uint16_t buffer[2];
int main(void){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	SystemInitAnh();
 800078c:	f7ff ff32 	bl	80005f4 <SystemInitAnh>
	RCC_Configure();
 8000790:	f7ff ff46 	bl	8000620 <RCC_Configure>
	TIM2_Configure(71, 0xFFFF);
 8000794:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000798:	2047      	movs	r0, #71	; 0x47
 800079a:	f7ff ff9f 	bl	80006dc <TIM2_Configure>
	//adasd
	I2C_GPIO_Config();
 800079e:	f7ff fd61 	bl	8000264 <I2C_GPIO_Config>
	GPIO_configureRCC("C");
 80007a2:	4811      	ldr	r0, [pc, #68]	; (80007e8 <main+0x60>)
 80007a4:	f7ff fcdc 	bl	8000160 <GPIO_configureRCC>
	GPIO_configure((GPIO_TypeDef*)GPIOC, (uint8_t*)GPIOC_Pin ,(uint8_t*)GPIOC_mode);
 80007a8:	4a10      	ldr	r2, [pc, #64]	; (80007ec <main+0x64>)
 80007aa:	4911      	ldr	r1, [pc, #68]	; (80007f0 <main+0x68>)
 80007ac:	4811      	ldr	r0, [pc, #68]	; (80007f4 <main+0x6c>)
 80007ae:	f7ff fd09 	bl	80001c4 <GPIO_configure>
//	GPIO_configure((GPIO_TypeDef*)GPIOB, (uint8_t*)GPIOB_Pin ,(uint8_t*)GPIOB_mode);
//	GPIO_configure((GPIO_TypeDef*)GPIOA, (uint8_t*)GPIOA_Pin ,(uint8_t*)GPIOA_mode);
//	I2C1_GPIO_Init();
//	TIM2_Configure(71, 0xFFFF);
	I2C1_Configure();
 80007b2:	f7ff fd6d 	bl	8000290 <I2C1_Configure>
	lcd_init(&lcd, LCD_ADDR_DEFAULT);
 80007b6:	2127      	movs	r1, #39	; 0x27
 80007b8:	480f      	ldr	r0, [pc, #60]	; (80007f8 <main+0x70>)
 80007ba:	f7ff fee0 	bl	800057e <lcd_init>
	lcd_set_cursor(&lcd, 0,0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	480d      	ldr	r0, [pc, #52]	; (80007f8 <main+0x70>)
 80007c4:	f7ff fe6a 	bl	800049c <lcd_set_cursor>
	lcd_printf(&lcd, "canhanh!");
 80007c8:	490c      	ldr	r1, [pc, #48]	; (80007fc <main+0x74>)
 80007ca:	480b      	ldr	r0, [pc, #44]	; (80007f8 <main+0x70>)
 80007cc:	f7ff fea0 	bl	8000510 <lcd_printf>
//	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
//	osThreadDef(task2, StartDefaultTask2, osPriorityBelowNormal, 0, 128);
//	task2 = osThreadCreate(osThread(task2), NULL);
//	osKernelStart();
	while(1){
		GPIOC->ODR^=(1<<13);
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <main+0x6c>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <main+0x6c>)
 80007d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80007da:	60d3      	str	r3, [r2, #12]
//		Read_ADC1((uint16_t*)buffer, 2);
		delay_ms2(2000);
 80007dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007e0:	f7ff ffbe 	bl	8000760 <delay_ms2>
		GPIOC->ODR^=(1<<13);
 80007e4:	e7f4      	b.n	80007d0 <main+0x48>
 80007e6:	bf00      	nop
 80007e8:	0800162c 	.word	0x0800162c
 80007ec:	20000004 	.word	0x20000004
 80007f0:	20000000 	.word	0x20000000
 80007f4:	40011000 	.word	0x40011000
 80007f8:	20000088 	.word	0x20000088
 80007fc:	08001630 	.word	0x08001630

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <NMI_Handler+0x4>

08000806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <HardFault_Handler+0x4>

0800080c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <MemManage_Handler+0x4>

08000812 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <BusFault_Handler+0x4>

08000818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <UsageFault_Handler+0x4>

0800081e <DebugMon_Handler>:
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    /* USER CODE END W1_UsageFault_IRQn 0 */
  }
}
void DebugMon_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
	...

0800082c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000834:	4a14      	ldr	r2, [pc, #80]	; (8000888 <_sbrk+0x5c>)
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <_sbrk+0x60>)
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <_sbrk+0x64>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d102      	bne.n	800084e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <_sbrk+0x64>)
 800084a:	4a12      	ldr	r2, [pc, #72]	; (8000894 <_sbrk+0x68>)
 800084c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <_sbrk+0x64>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4413      	add	r3, r2
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	429a      	cmp	r2, r3
 800085a:	d207      	bcs.n	800086c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800085c:	f000 fa36 	bl	8000ccc <__errno>
 8000860:	4603      	mov	r3, r0
 8000862:	220c      	movs	r2, #12
 8000864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
 800086a:	e009      	b.n	8000880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <_sbrk+0x64>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000872:	4b07      	ldr	r3, [pc, #28]	; (8000890 <_sbrk+0x64>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4413      	add	r3, r2
 800087a:	4a05      	ldr	r2, [pc, #20]	; (8000890 <_sbrk+0x64>)
 800087c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;}
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	4618      	mov	r0, r3
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20005000 	.word	0x20005000
 800088c:	00000400 	.word	0x00000400
 8000890:	2000008c 	.word	0x2000008c
 8000894:	20000158 	.word	0x20000158

08000898 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr

080008a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008a4:	f7ff fff8 	bl	8000898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a8:	480b      	ldr	r0, [pc, #44]	; (80008d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008aa:	490c      	ldr	r1, [pc, #48]	; (80008dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008ac:	4a0c      	ldr	r2, [pc, #48]	; (80008e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a09      	ldr	r2, [pc, #36]	; (80008e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008c0:	4c09      	ldr	r4, [pc, #36]	; (80008e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ce:	f000 fa03 	bl	8000cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d2:	f7ff ff59 	bl	8000788 <main>
  bx lr
 80008d6:	4770      	bx	lr
  ldr r0, =_sdata
 80008d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008dc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80008e0:	080016d8 	.word	0x080016d8
  ldr r2, =_sbss
 80008e4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80008e8:	20000154 	.word	0x20000154

080008ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008ec:	e7fe      	b.n	80008ec <ADC1_2_IRQHandler>

080008ee <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80008ee:	b480      	push	{r7}
 80008f0:	b085      	sub	sp, #20
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	689a      	ldr	r2, [r3, #8]
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	683a      	ldr	r2, [r7, #0]
 8000912:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	683a      	ldr	r2, [r7, #0]
 8000918:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	1c5a      	adds	r2, r3, #1
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	601a      	str	r2, [r3, #0]
}
 800092a:	bf00      	nop
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	691b      	ldr	r3, [r3, #16]
 8000940:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	6892      	ldr	r2, [r2, #8]
 800094a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	6852      	ldr	r2, [r2, #4]
 8000954:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	429a      	cmp	r2, r3
 800095e:	d103      	bne.n	8000968 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689a      	ldr	r2, [r3, #8]
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	1e5a      	subs	r2, r3, #1
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	681b      	ldr	r3, [r3, #0]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
	...

08000988 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000992:	4b51      	ldr	r3, [pc, #324]	; (8000ad8 <xTaskIncrementTick+0x150>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	f040 808d 	bne.w	8000ab6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800099c:	4b4f      	ldr	r3, [pc, #316]	; (8000adc <xTaskIncrementTick+0x154>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	3301      	adds	r3, #1
 80009a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80009a4:	4a4d      	ldr	r2, [pc, #308]	; (8000adc <xTaskIncrementTick+0x154>)
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d120      	bne.n	80009f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80009b0:	4b4b      	ldr	r3, [pc, #300]	; (8000ae0 <xTaskIncrementTick+0x158>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d00a      	beq.n	80009d0 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80009ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009be:	f383 8811 	msr	BASEPRI, r3
 80009c2:	f3bf 8f6f 	isb	sy
 80009c6:	f3bf 8f4f 	dsb	sy
 80009ca:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80009cc:	bf00      	nop
 80009ce:	e7fe      	b.n	80009ce <xTaskIncrementTick+0x46>
 80009d0:	4b43      	ldr	r3, [pc, #268]	; (8000ae0 <xTaskIncrementTick+0x158>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b43      	ldr	r3, [pc, #268]	; (8000ae4 <xTaskIncrementTick+0x15c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a41      	ldr	r2, [pc, #260]	; (8000ae0 <xTaskIncrementTick+0x158>)
 80009dc:	6013      	str	r3, [r2, #0]
 80009de:	4a41      	ldr	r2, [pc, #260]	; (8000ae4 <xTaskIncrementTick+0x15c>)
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	6013      	str	r3, [r2, #0]
 80009e4:	4b40      	ldr	r3, [pc, #256]	; (8000ae8 <xTaskIncrementTick+0x160>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	3301      	adds	r3, #1
 80009ea:	4a3f      	ldr	r2, [pc, #252]	; (8000ae8 <xTaskIncrementTick+0x160>)
 80009ec:	6013      	str	r3, [r2, #0]
 80009ee:	f000 f8eb 	bl	8000bc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80009f2:	4b3e      	ldr	r3, [pc, #248]	; (8000aec <xTaskIncrementTick+0x164>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d34d      	bcc.n	8000a98 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80009fc:	4b38      	ldr	r3, [pc, #224]	; (8000ae0 <xTaskIncrementTick+0x158>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d101      	bne.n	8000a0a <xTaskIncrementTick+0x82>
 8000a06:	2301      	movs	r3, #1
 8000a08:	e000      	b.n	8000a0c <xTaskIncrementTick+0x84>
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d004      	beq.n	8000a1a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a10:	4b36      	ldr	r3, [pc, #216]	; (8000aec <xTaskIncrementTick+0x164>)
 8000a12:	f04f 32ff 	mov.w	r2, #4294967295
 8000a16:	601a      	str	r2, [r3, #0]
					break;
 8000a18:	e03e      	b.n	8000a98 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000a1a:	4b31      	ldr	r3, [pc, #196]	; (8000ae0 <xTaskIncrementTick+0x158>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d203      	bcs.n	8000a3a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000a32:	4a2e      	ldr	r2, [pc, #184]	; (8000aec <xTaskIncrementTick+0x164>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6013      	str	r3, [r2, #0]
						break;
 8000a38:	e02e      	b.n	8000a98 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ff78 	bl	8000934 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d004      	beq.n	8000a56 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	3318      	adds	r3, #24
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff6f 	bl	8000934 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	409a      	lsls	r2, r3
 8000a5e:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <xTaskIncrementTick+0x168>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	4a22      	ldr	r2, [pc, #136]	; (8000af0 <xTaskIncrementTick+0x168>)
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	4413      	add	r3, r2
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	4a1f      	ldr	r2, [pc, #124]	; (8000af4 <xTaskIncrementTick+0x16c>)
 8000a76:	441a      	add	r2, r3
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	3304      	adds	r3, #4
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4610      	mov	r0, r2
 8000a80:	f7ff ff35 	bl	80008ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <xTaskIncrementTick+0x170>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d3b4      	bcc.n	80009fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8000a92:	2301      	movs	r3, #1
 8000a94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000a96:	e7b1      	b.n	80009fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <xTaskIncrementTick+0x170>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a9e:	4915      	ldr	r1, [pc, #84]	; (8000af4 <xTaskIncrementTick+0x16c>)
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	4413      	add	r3, r2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	440b      	add	r3, r1
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d907      	bls.n	8000ac0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	e004      	b.n	8000ac0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <xTaskIncrementTick+0x174>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	3301      	adds	r3, #1
 8000abc:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <xTaskIncrementTick+0x174>)
 8000abe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <xTaskIncrementTick+0x178>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8000acc:	697b      	ldr	r3, [r7, #20]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000140 	.word	0x20000140
 8000adc:	20000128 	.word	0x20000128
 8000ae0:	20000120 	.word	0x20000120
 8000ae4:	20000124 	.word	0x20000124
 8000ae8:	20000138 	.word	0x20000138
 8000aec:	2000013c 	.word	0x2000013c
 8000af0:	2000012c 	.word	0x2000012c
 8000af4:	20000094 	.word	0x20000094
 8000af8:	20000090 	.word	0x20000090
 8000afc:	20000130 	.word	0x20000130
 8000b00:	20000134 	.word	0x20000134

08000b04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000b04:	b480      	push	{r7}
 8000b06:	b087      	sub	sp, #28
 8000b08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000b0a:	4b29      	ldr	r3, [pc, #164]	; (8000bb0 <vTaskSwitchContext+0xac>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d003      	beq.n	8000b1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000b12:	4b28      	ldr	r3, [pc, #160]	; (8000bb4 <vTaskSwitchContext+0xb0>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000b18:	e044      	b.n	8000ba4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8000b1a:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <vTaskSwitchContext+0xb0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8000b20:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <vTaskSwitchContext+0xb4>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	fab3 f383 	clz	r3, r3
 8000b2c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8000b2e:	7afb      	ldrb	r3, [r7, #11]
 8000b30:	f1c3 031f 	rsb	r3, r3, #31
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	4921      	ldr	r1, [pc, #132]	; (8000bbc <vTaskSwitchContext+0xb8>)
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	440b      	add	r3, r1
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d10a      	bne.n	8000b60 <vTaskSwitchContext+0x5c>
	__asm volatile
 8000b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b4e:	f383 8811 	msr	BASEPRI, r3
 8000b52:	f3bf 8f6f 	isb	sy
 8000b56:	f3bf 8f4f 	dsb	sy
 8000b5a:	607b      	str	r3, [r7, #4]
}
 8000b5c:	bf00      	nop
 8000b5e:	e7fe      	b.n	8000b5e <vTaskSwitchContext+0x5a>
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <vTaskSwitchContext+0xb8>)
 8000b6c:	4413      	add	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	3308      	adds	r3, #8
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d104      	bne.n	8000b90 <vTaskSwitchContext+0x8c>
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	685a      	ldr	r2, [r3, #4]
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <vTaskSwitchContext+0xbc>)
 8000b98:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <vTaskSwitchContext+0xbc>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	334c      	adds	r3, #76	; 0x4c
 8000ba0:	4a08      	ldr	r2, [pc, #32]	; (8000bc4 <vTaskSwitchContext+0xc0>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	371c      	adds	r7, #28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000140 	.word	0x20000140
 8000bb4:	20000134 	.word	0x20000134
 8000bb8:	2000012c 	.word	0x2000012c
 8000bbc:	20000094 	.word	0x20000094
 8000bc0:	20000090 	.word	0x20000090
 8000bc4:	20000008 	.word	0x20000008

08000bc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <prvResetNextTaskUnblockTime+0x40>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d101      	bne.n	8000bdc <prvResetNextTaskUnblockTime+0x14>
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e000      	b.n	8000bde <prvResetNextTaskUnblockTime+0x16>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d004      	beq.n	8000bec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <prvResetNextTaskUnblockTime+0x44>)
 8000be4:	f04f 32ff 	mov.w	r2, #4294967295
 8000be8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8000bea:	e008      	b.n	8000bfe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <prvResetNextTaskUnblockTime+0x40>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <prvResetNextTaskUnblockTime+0x44>)
 8000bfc:	6013      	str	r3, [r2, #0]
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	20000120 	.word	0x20000120
 8000c0c:	2000013c 	.word	0x2000013c

08000c10 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <pxCurrentTCBConst2>)
 8000c12:	6819      	ldr	r1, [r3, #0]
 8000c14:	6808      	ldr	r0, [r1, #0]
 8000c16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000c1a:	f380 8809 	msr	PSP, r0
 8000c1e:	f3bf 8f6f 	isb	sy
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	f380 8811 	msr	BASEPRI, r0
 8000c2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8000c2e:	4770      	bx	lr

08000c30 <pxCurrentTCBConst2>:
 8000c30:	20000090 	.word	0x20000090
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000c34:	bf00      	nop
 8000c36:	bf00      	nop
	...

08000c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000c40:	f3ef 8009 	mrs	r0, PSP
 8000c44:	f3bf 8f6f 	isb	sy
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <pxCurrentTCBConst>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000c50:	6010      	str	r0, [r2, #0]
 8000c52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000c56:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000c5a:	f380 8811 	msr	BASEPRI, r0
 8000c5e:	f7ff ff51 	bl	8000b04 <vTaskSwitchContext>
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	f380 8811 	msr	BASEPRI, r0
 8000c6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000c6e:	6819      	ldr	r1, [r3, #0]
 8000c70:	6808      	ldr	r0, [r1, #0]
 8000c72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000c76:	f380 8809 	msr	PSP, r0
 8000c7a:	f3bf 8f6f 	isb	sy
 8000c7e:	4770      	bx	lr

08000c80 <pxCurrentTCBConst>:
 8000c80:	20000090 	.word	0x20000090
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop

08000c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8000c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c92:	f383 8811 	msr	BASEPRI, r3
 8000c96:	f3bf 8f6f 	isb	sy
 8000c9a:	f3bf 8f4f 	dsb	sy
 8000c9e:	607b      	str	r3, [r7, #4]
}
 8000ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000ca2:	f7ff fe71 	bl	8000988 <xTaskIncrementTick>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d003      	beq.n	8000cb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <SysTick_Handler+0x40>)
 8000cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	e000ed04 	.word	0xe000ed04

08000ccc <__errno>:
 8000ccc:	4b01      	ldr	r3, [pc, #4]	; (8000cd4 <__errno+0x8>)
 8000cce:	6818      	ldr	r0, [r3, #0]
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000008 	.word	0x20000008

08000cd8 <__libc_init_array>:
 8000cd8:	b570      	push	{r4, r5, r6, lr}
 8000cda:	2600      	movs	r6, #0
 8000cdc:	4d0c      	ldr	r5, [pc, #48]	; (8000d10 <__libc_init_array+0x38>)
 8000cde:	4c0d      	ldr	r4, [pc, #52]	; (8000d14 <__libc_init_array+0x3c>)
 8000ce0:	1b64      	subs	r4, r4, r5
 8000ce2:	10a4      	asrs	r4, r4, #2
 8000ce4:	42a6      	cmp	r6, r4
 8000ce6:	d109      	bne.n	8000cfc <__libc_init_array+0x24>
 8000ce8:	f000 fc94 	bl	8001614 <_init>
 8000cec:	2600      	movs	r6, #0
 8000cee:	4d0a      	ldr	r5, [pc, #40]	; (8000d18 <__libc_init_array+0x40>)
 8000cf0:	4c0a      	ldr	r4, [pc, #40]	; (8000d1c <__libc_init_array+0x44>)
 8000cf2:	1b64      	subs	r4, r4, r5
 8000cf4:	10a4      	asrs	r4, r4, #2
 8000cf6:	42a6      	cmp	r6, r4
 8000cf8:	d105      	bne.n	8000d06 <__libc_init_array+0x2e>
 8000cfa:	bd70      	pop	{r4, r5, r6, pc}
 8000cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d00:	4798      	blx	r3
 8000d02:	3601      	adds	r6, #1
 8000d04:	e7ee      	b.n	8000ce4 <__libc_init_array+0xc>
 8000d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d0a:	4798      	blx	r3
 8000d0c:	3601      	adds	r6, #1
 8000d0e:	e7f2      	b.n	8000cf6 <__libc_init_array+0x1e>
 8000d10:	080016d0 	.word	0x080016d0
 8000d14:	080016d0 	.word	0x080016d0
 8000d18:	080016d0 	.word	0x080016d0
 8000d1c:	080016d4 	.word	0x080016d4

08000d20 <__retarget_lock_acquire_recursive>:
 8000d20:	4770      	bx	lr

08000d22 <__retarget_lock_release_recursive>:
 8000d22:	4770      	bx	lr

08000d24 <memcpy>:
 8000d24:	440a      	add	r2, r1
 8000d26:	4291      	cmp	r1, r2
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	d100      	bne.n	8000d30 <memcpy+0xc>
 8000d2e:	4770      	bx	lr
 8000d30:	b510      	push	{r4, lr}
 8000d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000d36:	4291      	cmp	r1, r2
 8000d38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000d3c:	d1f9      	bne.n	8000d32 <memcpy+0xe>
 8000d3e:	bd10      	pop	{r4, pc}

08000d40 <sbrk_aligned>:
 8000d40:	b570      	push	{r4, r5, r6, lr}
 8000d42:	4e0e      	ldr	r6, [pc, #56]	; (8000d7c <sbrk_aligned+0x3c>)
 8000d44:	460c      	mov	r4, r1
 8000d46:	6831      	ldr	r1, [r6, #0]
 8000d48:	4605      	mov	r5, r0
 8000d4a:	b911      	cbnz	r1, 8000d52 <sbrk_aligned+0x12>
 8000d4c:	f000 f88c 	bl	8000e68 <_sbrk_r>
 8000d50:	6030      	str	r0, [r6, #0]
 8000d52:	4621      	mov	r1, r4
 8000d54:	4628      	mov	r0, r5
 8000d56:	f000 f887 	bl	8000e68 <_sbrk_r>
 8000d5a:	1c43      	adds	r3, r0, #1
 8000d5c:	d00a      	beq.n	8000d74 <sbrk_aligned+0x34>
 8000d5e:	1cc4      	adds	r4, r0, #3
 8000d60:	f024 0403 	bic.w	r4, r4, #3
 8000d64:	42a0      	cmp	r0, r4
 8000d66:	d007      	beq.n	8000d78 <sbrk_aligned+0x38>
 8000d68:	1a21      	subs	r1, r4, r0
 8000d6a:	4628      	mov	r0, r5
 8000d6c:	f000 f87c 	bl	8000e68 <_sbrk_r>
 8000d70:	3001      	adds	r0, #1
 8000d72:	d101      	bne.n	8000d78 <sbrk_aligned+0x38>
 8000d74:	f04f 34ff 	mov.w	r4, #4294967295
 8000d78:	4620      	mov	r0, r4
 8000d7a:	bd70      	pop	{r4, r5, r6, pc}
 8000d7c:	2000014c 	.word	0x2000014c

08000d80 <_malloc_r>:
 8000d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d84:	1ccd      	adds	r5, r1, #3
 8000d86:	f025 0503 	bic.w	r5, r5, #3
 8000d8a:	3508      	adds	r5, #8
 8000d8c:	2d0c      	cmp	r5, #12
 8000d8e:	bf38      	it	cc
 8000d90:	250c      	movcc	r5, #12
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	4607      	mov	r7, r0
 8000d96:	db01      	blt.n	8000d9c <_malloc_r+0x1c>
 8000d98:	42a9      	cmp	r1, r5
 8000d9a:	d905      	bls.n	8000da8 <_malloc_r+0x28>
 8000d9c:	230c      	movs	r3, #12
 8000d9e:	2600      	movs	r6, #0
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	4630      	mov	r0, r6
 8000da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000da8:	4e2e      	ldr	r6, [pc, #184]	; (8000e64 <_malloc_r+0xe4>)
 8000daa:	f000 f88d 	bl	8000ec8 <__malloc_lock>
 8000dae:	6833      	ldr	r3, [r6, #0]
 8000db0:	461c      	mov	r4, r3
 8000db2:	bb34      	cbnz	r4, 8000e02 <_malloc_r+0x82>
 8000db4:	4629      	mov	r1, r5
 8000db6:	4638      	mov	r0, r7
 8000db8:	f7ff ffc2 	bl	8000d40 <sbrk_aligned>
 8000dbc:	1c43      	adds	r3, r0, #1
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	d14d      	bne.n	8000e5e <_malloc_r+0xde>
 8000dc2:	6834      	ldr	r4, [r6, #0]
 8000dc4:	4626      	mov	r6, r4
 8000dc6:	2e00      	cmp	r6, #0
 8000dc8:	d140      	bne.n	8000e4c <_malloc_r+0xcc>
 8000dca:	6823      	ldr	r3, [r4, #0]
 8000dcc:	4631      	mov	r1, r6
 8000dce:	4638      	mov	r0, r7
 8000dd0:	eb04 0803 	add.w	r8, r4, r3
 8000dd4:	f000 f848 	bl	8000e68 <_sbrk_r>
 8000dd8:	4580      	cmp	r8, r0
 8000dda:	d13a      	bne.n	8000e52 <_malloc_r+0xd2>
 8000ddc:	6821      	ldr	r1, [r4, #0]
 8000dde:	3503      	adds	r5, #3
 8000de0:	1a6d      	subs	r5, r5, r1
 8000de2:	f025 0503 	bic.w	r5, r5, #3
 8000de6:	3508      	adds	r5, #8
 8000de8:	2d0c      	cmp	r5, #12
 8000dea:	bf38      	it	cc
 8000dec:	250c      	movcc	r5, #12
 8000dee:	4638      	mov	r0, r7
 8000df0:	4629      	mov	r1, r5
 8000df2:	f7ff ffa5 	bl	8000d40 <sbrk_aligned>
 8000df6:	3001      	adds	r0, #1
 8000df8:	d02b      	beq.n	8000e52 <_malloc_r+0xd2>
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	442b      	add	r3, r5
 8000dfe:	6023      	str	r3, [r4, #0]
 8000e00:	e00e      	b.n	8000e20 <_malloc_r+0xa0>
 8000e02:	6822      	ldr	r2, [r4, #0]
 8000e04:	1b52      	subs	r2, r2, r5
 8000e06:	d41e      	bmi.n	8000e46 <_malloc_r+0xc6>
 8000e08:	2a0b      	cmp	r2, #11
 8000e0a:	d916      	bls.n	8000e3a <_malloc_r+0xba>
 8000e0c:	1961      	adds	r1, r4, r5
 8000e0e:	42a3      	cmp	r3, r4
 8000e10:	6025      	str	r5, [r4, #0]
 8000e12:	bf18      	it	ne
 8000e14:	6059      	strne	r1, [r3, #4]
 8000e16:	6863      	ldr	r3, [r4, #4]
 8000e18:	bf08      	it	eq
 8000e1a:	6031      	streq	r1, [r6, #0]
 8000e1c:	5162      	str	r2, [r4, r5]
 8000e1e:	604b      	str	r3, [r1, #4]
 8000e20:	4638      	mov	r0, r7
 8000e22:	f104 060b 	add.w	r6, r4, #11
 8000e26:	f000 f855 	bl	8000ed4 <__malloc_unlock>
 8000e2a:	f026 0607 	bic.w	r6, r6, #7
 8000e2e:	1d23      	adds	r3, r4, #4
 8000e30:	1af2      	subs	r2, r6, r3
 8000e32:	d0b6      	beq.n	8000da2 <_malloc_r+0x22>
 8000e34:	1b9b      	subs	r3, r3, r6
 8000e36:	50a3      	str	r3, [r4, r2]
 8000e38:	e7b3      	b.n	8000da2 <_malloc_r+0x22>
 8000e3a:	6862      	ldr	r2, [r4, #4]
 8000e3c:	42a3      	cmp	r3, r4
 8000e3e:	bf0c      	ite	eq
 8000e40:	6032      	streq	r2, [r6, #0]
 8000e42:	605a      	strne	r2, [r3, #4]
 8000e44:	e7ec      	b.n	8000e20 <_malloc_r+0xa0>
 8000e46:	4623      	mov	r3, r4
 8000e48:	6864      	ldr	r4, [r4, #4]
 8000e4a:	e7b2      	b.n	8000db2 <_malloc_r+0x32>
 8000e4c:	4634      	mov	r4, r6
 8000e4e:	6876      	ldr	r6, [r6, #4]
 8000e50:	e7b9      	b.n	8000dc6 <_malloc_r+0x46>
 8000e52:	230c      	movs	r3, #12
 8000e54:	4638      	mov	r0, r7
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	f000 f83c 	bl	8000ed4 <__malloc_unlock>
 8000e5c:	e7a1      	b.n	8000da2 <_malloc_r+0x22>
 8000e5e:	6025      	str	r5, [r4, #0]
 8000e60:	e7de      	b.n	8000e20 <_malloc_r+0xa0>
 8000e62:	bf00      	nop
 8000e64:	20000148 	.word	0x20000148

08000e68 <_sbrk_r>:
 8000e68:	b538      	push	{r3, r4, r5, lr}
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	4d05      	ldr	r5, [pc, #20]	; (8000e84 <_sbrk_r+0x1c>)
 8000e6e:	4604      	mov	r4, r0
 8000e70:	4608      	mov	r0, r1
 8000e72:	602b      	str	r3, [r5, #0]
 8000e74:	f7ff fcda 	bl	800082c <_sbrk>
 8000e78:	1c43      	adds	r3, r0, #1
 8000e7a:	d102      	bne.n	8000e82 <_sbrk_r+0x1a>
 8000e7c:	682b      	ldr	r3, [r5, #0]
 8000e7e:	b103      	cbz	r3, 8000e82 <_sbrk_r+0x1a>
 8000e80:	6023      	str	r3, [r4, #0]
 8000e82:	bd38      	pop	{r3, r4, r5, pc}
 8000e84:	20000150 	.word	0x20000150

08000e88 <_vsiprintf_r>:
 8000e88:	b500      	push	{lr}
 8000e8a:	b09b      	sub	sp, #108	; 0x6c
 8000e8c:	9100      	str	r1, [sp, #0]
 8000e8e:	9104      	str	r1, [sp, #16]
 8000e90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000e94:	9105      	str	r1, [sp, #20]
 8000e96:	9102      	str	r1, [sp, #8]
 8000e98:	4905      	ldr	r1, [pc, #20]	; (8000eb0 <_vsiprintf_r+0x28>)
 8000e9a:	9103      	str	r1, [sp, #12]
 8000e9c:	4669      	mov	r1, sp
 8000e9e:	f000 f8c3 	bl	8001028 <_svfiprintf_r>
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	9b00      	ldr	r3, [sp, #0]
 8000ea6:	701a      	strb	r2, [r3, #0]
 8000ea8:	b01b      	add	sp, #108	; 0x6c
 8000eaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8000eae:	bf00      	nop
 8000eb0:	ffff0208 	.word	0xffff0208

08000eb4 <vsiprintf>:
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	460a      	mov	r2, r1
 8000eb8:	4601      	mov	r1, r0
 8000eba:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <vsiprintf+0x10>)
 8000ebc:	6800      	ldr	r0, [r0, #0]
 8000ebe:	f7ff bfe3 	b.w	8000e88 <_vsiprintf_r>
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008

08000ec8 <__malloc_lock>:
 8000ec8:	4801      	ldr	r0, [pc, #4]	; (8000ed0 <__malloc_lock+0x8>)
 8000eca:	f7ff bf29 	b.w	8000d20 <__retarget_lock_acquire_recursive>
 8000ece:	bf00      	nop
 8000ed0:	20000144 	.word	0x20000144

08000ed4 <__malloc_unlock>:
 8000ed4:	4801      	ldr	r0, [pc, #4]	; (8000edc <__malloc_unlock+0x8>)
 8000ed6:	f7ff bf24 	b.w	8000d22 <__retarget_lock_release_recursive>
 8000eda:	bf00      	nop
 8000edc:	20000144 	.word	0x20000144

08000ee0 <_free_r>:
 8000ee0:	b538      	push	{r3, r4, r5, lr}
 8000ee2:	4605      	mov	r5, r0
 8000ee4:	2900      	cmp	r1, #0
 8000ee6:	d040      	beq.n	8000f6a <_free_r+0x8a>
 8000ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000eec:	1f0c      	subs	r4, r1, #4
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	bfb8      	it	lt
 8000ef2:	18e4      	addlt	r4, r4, r3
 8000ef4:	f7ff ffe8 	bl	8000ec8 <__malloc_lock>
 8000ef8:	4a1c      	ldr	r2, [pc, #112]	; (8000f6c <_free_r+0x8c>)
 8000efa:	6813      	ldr	r3, [r2, #0]
 8000efc:	b933      	cbnz	r3, 8000f0c <_free_r+0x2c>
 8000efe:	6063      	str	r3, [r4, #4]
 8000f00:	6014      	str	r4, [r2, #0]
 8000f02:	4628      	mov	r0, r5
 8000f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f08:	f7ff bfe4 	b.w	8000ed4 <__malloc_unlock>
 8000f0c:	42a3      	cmp	r3, r4
 8000f0e:	d908      	bls.n	8000f22 <_free_r+0x42>
 8000f10:	6820      	ldr	r0, [r4, #0]
 8000f12:	1821      	adds	r1, r4, r0
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf01      	itttt	eq
 8000f18:	6819      	ldreq	r1, [r3, #0]
 8000f1a:	685b      	ldreq	r3, [r3, #4]
 8000f1c:	1809      	addeq	r1, r1, r0
 8000f1e:	6021      	streq	r1, [r4, #0]
 8000f20:	e7ed      	b.n	8000efe <_free_r+0x1e>
 8000f22:	461a      	mov	r2, r3
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	b10b      	cbz	r3, 8000f2c <_free_r+0x4c>
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d9fa      	bls.n	8000f22 <_free_r+0x42>
 8000f2c:	6811      	ldr	r1, [r2, #0]
 8000f2e:	1850      	adds	r0, r2, r1
 8000f30:	42a0      	cmp	r0, r4
 8000f32:	d10b      	bne.n	8000f4c <_free_r+0x6c>
 8000f34:	6820      	ldr	r0, [r4, #0]
 8000f36:	4401      	add	r1, r0
 8000f38:	1850      	adds	r0, r2, r1
 8000f3a:	4283      	cmp	r3, r0
 8000f3c:	6011      	str	r1, [r2, #0]
 8000f3e:	d1e0      	bne.n	8000f02 <_free_r+0x22>
 8000f40:	6818      	ldr	r0, [r3, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	4401      	add	r1, r0
 8000f46:	6011      	str	r1, [r2, #0]
 8000f48:	6053      	str	r3, [r2, #4]
 8000f4a:	e7da      	b.n	8000f02 <_free_r+0x22>
 8000f4c:	d902      	bls.n	8000f54 <_free_r+0x74>
 8000f4e:	230c      	movs	r3, #12
 8000f50:	602b      	str	r3, [r5, #0]
 8000f52:	e7d6      	b.n	8000f02 <_free_r+0x22>
 8000f54:	6820      	ldr	r0, [r4, #0]
 8000f56:	1821      	adds	r1, r4, r0
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	bf01      	itttt	eq
 8000f5c:	6819      	ldreq	r1, [r3, #0]
 8000f5e:	685b      	ldreq	r3, [r3, #4]
 8000f60:	1809      	addeq	r1, r1, r0
 8000f62:	6021      	streq	r1, [r4, #0]
 8000f64:	6063      	str	r3, [r4, #4]
 8000f66:	6054      	str	r4, [r2, #4]
 8000f68:	e7cb      	b.n	8000f02 <_free_r+0x22>
 8000f6a:	bd38      	pop	{r3, r4, r5, pc}
 8000f6c:	20000148 	.word	0x20000148

08000f70 <__ssputs_r>:
 8000f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f74:	688e      	ldr	r6, [r1, #8]
 8000f76:	4682      	mov	sl, r0
 8000f78:	429e      	cmp	r6, r3
 8000f7a:	460c      	mov	r4, r1
 8000f7c:	4690      	mov	r8, r2
 8000f7e:	461f      	mov	r7, r3
 8000f80:	d838      	bhi.n	8000ff4 <__ssputs_r+0x84>
 8000f82:	898a      	ldrh	r2, [r1, #12]
 8000f84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000f88:	d032      	beq.n	8000ff0 <__ssputs_r+0x80>
 8000f8a:	6825      	ldr	r5, [r4, #0]
 8000f8c:	6909      	ldr	r1, [r1, #16]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	eba5 0901 	sub.w	r9, r5, r1
 8000f94:	6965      	ldr	r5, [r4, #20]
 8000f96:	444b      	add	r3, r9
 8000f98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000f9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000fa0:	106d      	asrs	r5, r5, #1
 8000fa2:	429d      	cmp	r5, r3
 8000fa4:	bf38      	it	cc
 8000fa6:	461d      	movcc	r5, r3
 8000fa8:	0553      	lsls	r3, r2, #21
 8000faa:	d531      	bpl.n	8001010 <__ssputs_r+0xa0>
 8000fac:	4629      	mov	r1, r5
 8000fae:	f7ff fee7 	bl	8000d80 <_malloc_r>
 8000fb2:	4606      	mov	r6, r0
 8000fb4:	b950      	cbnz	r0, 8000fcc <__ssputs_r+0x5c>
 8000fb6:	230c      	movs	r3, #12
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f8ca 3000 	str.w	r3, [sl]
 8000fc0:	89a3      	ldrh	r3, [r4, #12]
 8000fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc6:	81a3      	strh	r3, [r4, #12]
 8000fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fcc:	464a      	mov	r2, r9
 8000fce:	6921      	ldr	r1, [r4, #16]
 8000fd0:	f7ff fea8 	bl	8000d24 <memcpy>
 8000fd4:	89a3      	ldrh	r3, [r4, #12]
 8000fd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fde:	81a3      	strh	r3, [r4, #12]
 8000fe0:	6126      	str	r6, [r4, #16]
 8000fe2:	444e      	add	r6, r9
 8000fe4:	6026      	str	r6, [r4, #0]
 8000fe6:	463e      	mov	r6, r7
 8000fe8:	6165      	str	r5, [r4, #20]
 8000fea:	eba5 0509 	sub.w	r5, r5, r9
 8000fee:	60a5      	str	r5, [r4, #8]
 8000ff0:	42be      	cmp	r6, r7
 8000ff2:	d900      	bls.n	8000ff6 <__ssputs_r+0x86>
 8000ff4:	463e      	mov	r6, r7
 8000ff6:	4632      	mov	r2, r6
 8000ff8:	4641      	mov	r1, r8
 8000ffa:	6820      	ldr	r0, [r4, #0]
 8000ffc:	f000 fab8 	bl	8001570 <memmove>
 8001000:	68a3      	ldr	r3, [r4, #8]
 8001002:	2000      	movs	r0, #0
 8001004:	1b9b      	subs	r3, r3, r6
 8001006:	60a3      	str	r3, [r4, #8]
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	4433      	add	r3, r6
 800100c:	6023      	str	r3, [r4, #0]
 800100e:	e7db      	b.n	8000fc8 <__ssputs_r+0x58>
 8001010:	462a      	mov	r2, r5
 8001012:	f000 fac7 	bl	80015a4 <_realloc_r>
 8001016:	4606      	mov	r6, r0
 8001018:	2800      	cmp	r0, #0
 800101a:	d1e1      	bne.n	8000fe0 <__ssputs_r+0x70>
 800101c:	4650      	mov	r0, sl
 800101e:	6921      	ldr	r1, [r4, #16]
 8001020:	f7ff ff5e 	bl	8000ee0 <_free_r>
 8001024:	e7c7      	b.n	8000fb6 <__ssputs_r+0x46>
	...

08001028 <_svfiprintf_r>:
 8001028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800102c:	4698      	mov	r8, r3
 800102e:	898b      	ldrh	r3, [r1, #12]
 8001030:	4607      	mov	r7, r0
 8001032:	061b      	lsls	r3, r3, #24
 8001034:	460d      	mov	r5, r1
 8001036:	4614      	mov	r4, r2
 8001038:	b09d      	sub	sp, #116	; 0x74
 800103a:	d50e      	bpl.n	800105a <_svfiprintf_r+0x32>
 800103c:	690b      	ldr	r3, [r1, #16]
 800103e:	b963      	cbnz	r3, 800105a <_svfiprintf_r+0x32>
 8001040:	2140      	movs	r1, #64	; 0x40
 8001042:	f7ff fe9d 	bl	8000d80 <_malloc_r>
 8001046:	6028      	str	r0, [r5, #0]
 8001048:	6128      	str	r0, [r5, #16]
 800104a:	b920      	cbnz	r0, 8001056 <_svfiprintf_r+0x2e>
 800104c:	230c      	movs	r3, #12
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	e0d1      	b.n	80011fa <_svfiprintf_r+0x1d2>
 8001056:	2340      	movs	r3, #64	; 0x40
 8001058:	616b      	str	r3, [r5, #20]
 800105a:	2300      	movs	r3, #0
 800105c:	9309      	str	r3, [sp, #36]	; 0x24
 800105e:	2320      	movs	r3, #32
 8001060:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001064:	2330      	movs	r3, #48	; 0x30
 8001066:	f04f 0901 	mov.w	r9, #1
 800106a:	f8cd 800c 	str.w	r8, [sp, #12]
 800106e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001214 <_svfiprintf_r+0x1ec>
 8001072:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001076:	4623      	mov	r3, r4
 8001078:	469a      	mov	sl, r3
 800107a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800107e:	b10a      	cbz	r2, 8001084 <_svfiprintf_r+0x5c>
 8001080:	2a25      	cmp	r2, #37	; 0x25
 8001082:	d1f9      	bne.n	8001078 <_svfiprintf_r+0x50>
 8001084:	ebba 0b04 	subs.w	fp, sl, r4
 8001088:	d00b      	beq.n	80010a2 <_svfiprintf_r+0x7a>
 800108a:	465b      	mov	r3, fp
 800108c:	4622      	mov	r2, r4
 800108e:	4629      	mov	r1, r5
 8001090:	4638      	mov	r0, r7
 8001092:	f7ff ff6d 	bl	8000f70 <__ssputs_r>
 8001096:	3001      	adds	r0, #1
 8001098:	f000 80aa 	beq.w	80011f0 <_svfiprintf_r+0x1c8>
 800109c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800109e:	445a      	add	r2, fp
 80010a0:	9209      	str	r2, [sp, #36]	; 0x24
 80010a2:	f89a 3000 	ldrb.w	r3, [sl]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 80a2 	beq.w	80011f0 <_svfiprintf_r+0x1c8>
 80010ac:	2300      	movs	r3, #0
 80010ae:	f04f 32ff 	mov.w	r2, #4294967295
 80010b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80010b6:	f10a 0a01 	add.w	sl, sl, #1
 80010ba:	9304      	str	r3, [sp, #16]
 80010bc:	9307      	str	r3, [sp, #28]
 80010be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80010c2:	931a      	str	r3, [sp, #104]	; 0x68
 80010c4:	4654      	mov	r4, sl
 80010c6:	2205      	movs	r2, #5
 80010c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010cc:	4851      	ldr	r0, [pc, #324]	; (8001214 <_svfiprintf_r+0x1ec>)
 80010ce:	f000 fa41 	bl	8001554 <memchr>
 80010d2:	9a04      	ldr	r2, [sp, #16]
 80010d4:	b9d8      	cbnz	r0, 800110e <_svfiprintf_r+0xe6>
 80010d6:	06d0      	lsls	r0, r2, #27
 80010d8:	bf44      	itt	mi
 80010da:	2320      	movmi	r3, #32
 80010dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80010e0:	0711      	lsls	r1, r2, #28
 80010e2:	bf44      	itt	mi
 80010e4:	232b      	movmi	r3, #43	; 0x2b
 80010e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80010ea:	f89a 3000 	ldrb.w	r3, [sl]
 80010ee:	2b2a      	cmp	r3, #42	; 0x2a
 80010f0:	d015      	beq.n	800111e <_svfiprintf_r+0xf6>
 80010f2:	4654      	mov	r4, sl
 80010f4:	2000      	movs	r0, #0
 80010f6:	f04f 0c0a 	mov.w	ip, #10
 80010fa:	9a07      	ldr	r2, [sp, #28]
 80010fc:	4621      	mov	r1, r4
 80010fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001102:	3b30      	subs	r3, #48	; 0x30
 8001104:	2b09      	cmp	r3, #9
 8001106:	d94e      	bls.n	80011a6 <_svfiprintf_r+0x17e>
 8001108:	b1b0      	cbz	r0, 8001138 <_svfiprintf_r+0x110>
 800110a:	9207      	str	r2, [sp, #28]
 800110c:	e014      	b.n	8001138 <_svfiprintf_r+0x110>
 800110e:	eba0 0308 	sub.w	r3, r0, r8
 8001112:	fa09 f303 	lsl.w	r3, r9, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	46a2      	mov	sl, r4
 800111a:	9304      	str	r3, [sp, #16]
 800111c:	e7d2      	b.n	80010c4 <_svfiprintf_r+0x9c>
 800111e:	9b03      	ldr	r3, [sp, #12]
 8001120:	1d19      	adds	r1, r3, #4
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	9103      	str	r1, [sp, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	bfbb      	ittet	lt
 800112a:	425b      	neglt	r3, r3
 800112c:	f042 0202 	orrlt.w	r2, r2, #2
 8001130:	9307      	strge	r3, [sp, #28]
 8001132:	9307      	strlt	r3, [sp, #28]
 8001134:	bfb8      	it	lt
 8001136:	9204      	strlt	r2, [sp, #16]
 8001138:	7823      	ldrb	r3, [r4, #0]
 800113a:	2b2e      	cmp	r3, #46	; 0x2e
 800113c:	d10c      	bne.n	8001158 <_svfiprintf_r+0x130>
 800113e:	7863      	ldrb	r3, [r4, #1]
 8001140:	2b2a      	cmp	r3, #42	; 0x2a
 8001142:	d135      	bne.n	80011b0 <_svfiprintf_r+0x188>
 8001144:	9b03      	ldr	r3, [sp, #12]
 8001146:	3402      	adds	r4, #2
 8001148:	1d1a      	adds	r2, r3, #4
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	9203      	str	r2, [sp, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	bfb8      	it	lt
 8001152:	f04f 33ff 	movlt.w	r3, #4294967295
 8001156:	9305      	str	r3, [sp, #20]
 8001158:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001218 <_svfiprintf_r+0x1f0>
 800115c:	2203      	movs	r2, #3
 800115e:	4650      	mov	r0, sl
 8001160:	7821      	ldrb	r1, [r4, #0]
 8001162:	f000 f9f7 	bl	8001554 <memchr>
 8001166:	b140      	cbz	r0, 800117a <_svfiprintf_r+0x152>
 8001168:	2340      	movs	r3, #64	; 0x40
 800116a:	eba0 000a 	sub.w	r0, r0, sl
 800116e:	fa03 f000 	lsl.w	r0, r3, r0
 8001172:	9b04      	ldr	r3, [sp, #16]
 8001174:	3401      	adds	r4, #1
 8001176:	4303      	orrs	r3, r0
 8001178:	9304      	str	r3, [sp, #16]
 800117a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800117e:	2206      	movs	r2, #6
 8001180:	4826      	ldr	r0, [pc, #152]	; (800121c <_svfiprintf_r+0x1f4>)
 8001182:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001186:	f000 f9e5 	bl	8001554 <memchr>
 800118a:	2800      	cmp	r0, #0
 800118c:	d038      	beq.n	8001200 <_svfiprintf_r+0x1d8>
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <_svfiprintf_r+0x1f8>)
 8001190:	bb1b      	cbnz	r3, 80011da <_svfiprintf_r+0x1b2>
 8001192:	9b03      	ldr	r3, [sp, #12]
 8001194:	3307      	adds	r3, #7
 8001196:	f023 0307 	bic.w	r3, r3, #7
 800119a:	3308      	adds	r3, #8
 800119c:	9303      	str	r3, [sp, #12]
 800119e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011a0:	4433      	add	r3, r6
 80011a2:	9309      	str	r3, [sp, #36]	; 0x24
 80011a4:	e767      	b.n	8001076 <_svfiprintf_r+0x4e>
 80011a6:	460c      	mov	r4, r1
 80011a8:	2001      	movs	r0, #1
 80011aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80011ae:	e7a5      	b.n	80010fc <_svfiprintf_r+0xd4>
 80011b0:	2300      	movs	r3, #0
 80011b2:	f04f 0c0a 	mov.w	ip, #10
 80011b6:	4619      	mov	r1, r3
 80011b8:	3401      	adds	r4, #1
 80011ba:	9305      	str	r3, [sp, #20]
 80011bc:	4620      	mov	r0, r4
 80011be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80011c2:	3a30      	subs	r2, #48	; 0x30
 80011c4:	2a09      	cmp	r2, #9
 80011c6:	d903      	bls.n	80011d0 <_svfiprintf_r+0x1a8>
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0c5      	beq.n	8001158 <_svfiprintf_r+0x130>
 80011cc:	9105      	str	r1, [sp, #20]
 80011ce:	e7c3      	b.n	8001158 <_svfiprintf_r+0x130>
 80011d0:	4604      	mov	r4, r0
 80011d2:	2301      	movs	r3, #1
 80011d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80011d8:	e7f0      	b.n	80011bc <_svfiprintf_r+0x194>
 80011da:	ab03      	add	r3, sp, #12
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	462a      	mov	r2, r5
 80011e0:	4638      	mov	r0, r7
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <_svfiprintf_r+0x1fc>)
 80011e4:	a904      	add	r1, sp, #16
 80011e6:	f3af 8000 	nop.w
 80011ea:	1c42      	adds	r2, r0, #1
 80011ec:	4606      	mov	r6, r0
 80011ee:	d1d6      	bne.n	800119e <_svfiprintf_r+0x176>
 80011f0:	89ab      	ldrh	r3, [r5, #12]
 80011f2:	065b      	lsls	r3, r3, #25
 80011f4:	f53f af2c 	bmi.w	8001050 <_svfiprintf_r+0x28>
 80011f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80011fa:	b01d      	add	sp, #116	; 0x74
 80011fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001200:	ab03      	add	r3, sp, #12
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	462a      	mov	r2, r5
 8001206:	4638      	mov	r0, r7
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <_svfiprintf_r+0x1fc>)
 800120a:	a904      	add	r1, sp, #16
 800120c:	f000 f87c 	bl	8001308 <_printf_i>
 8001210:	e7eb      	b.n	80011ea <_svfiprintf_r+0x1c2>
 8001212:	bf00      	nop
 8001214:	0800169c 	.word	0x0800169c
 8001218:	080016a2 	.word	0x080016a2
 800121c:	080016a6 	.word	0x080016a6
 8001220:	00000000 	.word	0x00000000
 8001224:	08000f71 	.word	0x08000f71

08001228 <_printf_common>:
 8001228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800122c:	4616      	mov	r6, r2
 800122e:	4699      	mov	r9, r3
 8001230:	688a      	ldr	r2, [r1, #8]
 8001232:	690b      	ldr	r3, [r1, #16]
 8001234:	4607      	mov	r7, r0
 8001236:	4293      	cmp	r3, r2
 8001238:	bfb8      	it	lt
 800123a:	4613      	movlt	r3, r2
 800123c:	6033      	str	r3, [r6, #0]
 800123e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001242:	460c      	mov	r4, r1
 8001244:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001248:	b10a      	cbz	r2, 800124e <_printf_common+0x26>
 800124a:	3301      	adds	r3, #1
 800124c:	6033      	str	r3, [r6, #0]
 800124e:	6823      	ldr	r3, [r4, #0]
 8001250:	0699      	lsls	r1, r3, #26
 8001252:	bf42      	ittt	mi
 8001254:	6833      	ldrmi	r3, [r6, #0]
 8001256:	3302      	addmi	r3, #2
 8001258:	6033      	strmi	r3, [r6, #0]
 800125a:	6825      	ldr	r5, [r4, #0]
 800125c:	f015 0506 	ands.w	r5, r5, #6
 8001260:	d106      	bne.n	8001270 <_printf_common+0x48>
 8001262:	f104 0a19 	add.w	sl, r4, #25
 8001266:	68e3      	ldr	r3, [r4, #12]
 8001268:	6832      	ldr	r2, [r6, #0]
 800126a:	1a9b      	subs	r3, r3, r2
 800126c:	42ab      	cmp	r3, r5
 800126e:	dc28      	bgt.n	80012c2 <_printf_common+0x9a>
 8001270:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001274:	1e13      	subs	r3, r2, #0
 8001276:	6822      	ldr	r2, [r4, #0]
 8001278:	bf18      	it	ne
 800127a:	2301      	movne	r3, #1
 800127c:	0692      	lsls	r2, r2, #26
 800127e:	d42d      	bmi.n	80012dc <_printf_common+0xb4>
 8001280:	4649      	mov	r1, r9
 8001282:	4638      	mov	r0, r7
 8001284:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001288:	47c0      	blx	r8
 800128a:	3001      	adds	r0, #1
 800128c:	d020      	beq.n	80012d0 <_printf_common+0xa8>
 800128e:	6823      	ldr	r3, [r4, #0]
 8001290:	68e5      	ldr	r5, [r4, #12]
 8001292:	f003 0306 	and.w	r3, r3, #6
 8001296:	2b04      	cmp	r3, #4
 8001298:	bf18      	it	ne
 800129a:	2500      	movne	r5, #0
 800129c:	6832      	ldr	r2, [r6, #0]
 800129e:	f04f 0600 	mov.w	r6, #0
 80012a2:	68a3      	ldr	r3, [r4, #8]
 80012a4:	bf08      	it	eq
 80012a6:	1aad      	subeq	r5, r5, r2
 80012a8:	6922      	ldr	r2, [r4, #16]
 80012aa:	bf08      	it	eq
 80012ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80012b0:	4293      	cmp	r3, r2
 80012b2:	bfc4      	itt	gt
 80012b4:	1a9b      	subgt	r3, r3, r2
 80012b6:	18ed      	addgt	r5, r5, r3
 80012b8:	341a      	adds	r4, #26
 80012ba:	42b5      	cmp	r5, r6
 80012bc:	d11a      	bne.n	80012f4 <_printf_common+0xcc>
 80012be:	2000      	movs	r0, #0
 80012c0:	e008      	b.n	80012d4 <_printf_common+0xac>
 80012c2:	2301      	movs	r3, #1
 80012c4:	4652      	mov	r2, sl
 80012c6:	4649      	mov	r1, r9
 80012c8:	4638      	mov	r0, r7
 80012ca:	47c0      	blx	r8
 80012cc:	3001      	adds	r0, #1
 80012ce:	d103      	bne.n	80012d8 <_printf_common+0xb0>
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012d8:	3501      	adds	r5, #1
 80012da:	e7c4      	b.n	8001266 <_printf_common+0x3e>
 80012dc:	2030      	movs	r0, #48	; 0x30
 80012de:	18e1      	adds	r1, r4, r3
 80012e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80012ea:	4422      	add	r2, r4
 80012ec:	3302      	adds	r3, #2
 80012ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80012f2:	e7c5      	b.n	8001280 <_printf_common+0x58>
 80012f4:	2301      	movs	r3, #1
 80012f6:	4622      	mov	r2, r4
 80012f8:	4649      	mov	r1, r9
 80012fa:	4638      	mov	r0, r7
 80012fc:	47c0      	blx	r8
 80012fe:	3001      	adds	r0, #1
 8001300:	d0e6      	beq.n	80012d0 <_printf_common+0xa8>
 8001302:	3601      	adds	r6, #1
 8001304:	e7d9      	b.n	80012ba <_printf_common+0x92>
	...

08001308 <_printf_i>:
 8001308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800130c:	7e0f      	ldrb	r7, [r1, #24]
 800130e:	4691      	mov	r9, r2
 8001310:	2f78      	cmp	r7, #120	; 0x78
 8001312:	4680      	mov	r8, r0
 8001314:	460c      	mov	r4, r1
 8001316:	469a      	mov	sl, r3
 8001318:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800131a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800131e:	d807      	bhi.n	8001330 <_printf_i+0x28>
 8001320:	2f62      	cmp	r7, #98	; 0x62
 8001322:	d80a      	bhi.n	800133a <_printf_i+0x32>
 8001324:	2f00      	cmp	r7, #0
 8001326:	f000 80d9 	beq.w	80014dc <_printf_i+0x1d4>
 800132a:	2f58      	cmp	r7, #88	; 0x58
 800132c:	f000 80a4 	beq.w	8001478 <_printf_i+0x170>
 8001330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001334:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001338:	e03a      	b.n	80013b0 <_printf_i+0xa8>
 800133a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800133e:	2b15      	cmp	r3, #21
 8001340:	d8f6      	bhi.n	8001330 <_printf_i+0x28>
 8001342:	a101      	add	r1, pc, #4	; (adr r1, 8001348 <_printf_i+0x40>)
 8001344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001348:	080013a1 	.word	0x080013a1
 800134c:	080013b5 	.word	0x080013b5
 8001350:	08001331 	.word	0x08001331
 8001354:	08001331 	.word	0x08001331
 8001358:	08001331 	.word	0x08001331
 800135c:	08001331 	.word	0x08001331
 8001360:	080013b5 	.word	0x080013b5
 8001364:	08001331 	.word	0x08001331
 8001368:	08001331 	.word	0x08001331
 800136c:	08001331 	.word	0x08001331
 8001370:	08001331 	.word	0x08001331
 8001374:	080014c3 	.word	0x080014c3
 8001378:	080013e5 	.word	0x080013e5
 800137c:	080014a5 	.word	0x080014a5
 8001380:	08001331 	.word	0x08001331
 8001384:	08001331 	.word	0x08001331
 8001388:	080014e5 	.word	0x080014e5
 800138c:	08001331 	.word	0x08001331
 8001390:	080013e5 	.word	0x080013e5
 8001394:	08001331 	.word	0x08001331
 8001398:	08001331 	.word	0x08001331
 800139c:	080014ad 	.word	0x080014ad
 80013a0:	682b      	ldr	r3, [r5, #0]
 80013a2:	1d1a      	adds	r2, r3, #4
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	602a      	str	r2, [r5, #0]
 80013a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80013ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80013b0:	2301      	movs	r3, #1
 80013b2:	e0a4      	b.n	80014fe <_printf_i+0x1f6>
 80013b4:	6820      	ldr	r0, [r4, #0]
 80013b6:	6829      	ldr	r1, [r5, #0]
 80013b8:	0606      	lsls	r6, r0, #24
 80013ba:	f101 0304 	add.w	r3, r1, #4
 80013be:	d50a      	bpl.n	80013d6 <_printf_i+0xce>
 80013c0:	680e      	ldr	r6, [r1, #0]
 80013c2:	602b      	str	r3, [r5, #0]
 80013c4:	2e00      	cmp	r6, #0
 80013c6:	da03      	bge.n	80013d0 <_printf_i+0xc8>
 80013c8:	232d      	movs	r3, #45	; 0x2d
 80013ca:	4276      	negs	r6, r6
 80013cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80013d0:	230a      	movs	r3, #10
 80013d2:	485e      	ldr	r0, [pc, #376]	; (800154c <_printf_i+0x244>)
 80013d4:	e019      	b.n	800140a <_printf_i+0x102>
 80013d6:	680e      	ldr	r6, [r1, #0]
 80013d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80013dc:	602b      	str	r3, [r5, #0]
 80013de:	bf18      	it	ne
 80013e0:	b236      	sxthne	r6, r6
 80013e2:	e7ef      	b.n	80013c4 <_printf_i+0xbc>
 80013e4:	682b      	ldr	r3, [r5, #0]
 80013e6:	6820      	ldr	r0, [r4, #0]
 80013e8:	1d19      	adds	r1, r3, #4
 80013ea:	6029      	str	r1, [r5, #0]
 80013ec:	0601      	lsls	r1, r0, #24
 80013ee:	d501      	bpl.n	80013f4 <_printf_i+0xec>
 80013f0:	681e      	ldr	r6, [r3, #0]
 80013f2:	e002      	b.n	80013fa <_printf_i+0xf2>
 80013f4:	0646      	lsls	r6, r0, #25
 80013f6:	d5fb      	bpl.n	80013f0 <_printf_i+0xe8>
 80013f8:	881e      	ldrh	r6, [r3, #0]
 80013fa:	2f6f      	cmp	r7, #111	; 0x6f
 80013fc:	bf0c      	ite	eq
 80013fe:	2308      	moveq	r3, #8
 8001400:	230a      	movne	r3, #10
 8001402:	4852      	ldr	r0, [pc, #328]	; (800154c <_printf_i+0x244>)
 8001404:	2100      	movs	r1, #0
 8001406:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800140a:	6865      	ldr	r5, [r4, #4]
 800140c:	2d00      	cmp	r5, #0
 800140e:	bfa8      	it	ge
 8001410:	6821      	ldrge	r1, [r4, #0]
 8001412:	60a5      	str	r5, [r4, #8]
 8001414:	bfa4      	itt	ge
 8001416:	f021 0104 	bicge.w	r1, r1, #4
 800141a:	6021      	strge	r1, [r4, #0]
 800141c:	b90e      	cbnz	r6, 8001422 <_printf_i+0x11a>
 800141e:	2d00      	cmp	r5, #0
 8001420:	d04d      	beq.n	80014be <_printf_i+0x1b6>
 8001422:	4615      	mov	r5, r2
 8001424:	fbb6 f1f3 	udiv	r1, r6, r3
 8001428:	fb03 6711 	mls	r7, r3, r1, r6
 800142c:	5dc7      	ldrb	r7, [r0, r7]
 800142e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001432:	4637      	mov	r7, r6
 8001434:	42bb      	cmp	r3, r7
 8001436:	460e      	mov	r6, r1
 8001438:	d9f4      	bls.n	8001424 <_printf_i+0x11c>
 800143a:	2b08      	cmp	r3, #8
 800143c:	d10b      	bne.n	8001456 <_printf_i+0x14e>
 800143e:	6823      	ldr	r3, [r4, #0]
 8001440:	07de      	lsls	r6, r3, #31
 8001442:	d508      	bpl.n	8001456 <_printf_i+0x14e>
 8001444:	6923      	ldr	r3, [r4, #16]
 8001446:	6861      	ldr	r1, [r4, #4]
 8001448:	4299      	cmp	r1, r3
 800144a:	bfde      	ittt	le
 800144c:	2330      	movle	r3, #48	; 0x30
 800144e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001452:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001456:	1b52      	subs	r2, r2, r5
 8001458:	6122      	str	r2, [r4, #16]
 800145a:	464b      	mov	r3, r9
 800145c:	4621      	mov	r1, r4
 800145e:	4640      	mov	r0, r8
 8001460:	f8cd a000 	str.w	sl, [sp]
 8001464:	aa03      	add	r2, sp, #12
 8001466:	f7ff fedf 	bl	8001228 <_printf_common>
 800146a:	3001      	adds	r0, #1
 800146c:	d14c      	bne.n	8001508 <_printf_i+0x200>
 800146e:	f04f 30ff 	mov.w	r0, #4294967295
 8001472:	b004      	add	sp, #16
 8001474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001478:	4834      	ldr	r0, [pc, #208]	; (800154c <_printf_i+0x244>)
 800147a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800147e:	6829      	ldr	r1, [r5, #0]
 8001480:	6823      	ldr	r3, [r4, #0]
 8001482:	f851 6b04 	ldr.w	r6, [r1], #4
 8001486:	6029      	str	r1, [r5, #0]
 8001488:	061d      	lsls	r5, r3, #24
 800148a:	d514      	bpl.n	80014b6 <_printf_i+0x1ae>
 800148c:	07df      	lsls	r7, r3, #31
 800148e:	bf44      	itt	mi
 8001490:	f043 0320 	orrmi.w	r3, r3, #32
 8001494:	6023      	strmi	r3, [r4, #0]
 8001496:	b91e      	cbnz	r6, 80014a0 <_printf_i+0x198>
 8001498:	6823      	ldr	r3, [r4, #0]
 800149a:	f023 0320 	bic.w	r3, r3, #32
 800149e:	6023      	str	r3, [r4, #0]
 80014a0:	2310      	movs	r3, #16
 80014a2:	e7af      	b.n	8001404 <_printf_i+0xfc>
 80014a4:	6823      	ldr	r3, [r4, #0]
 80014a6:	f043 0320 	orr.w	r3, r3, #32
 80014aa:	6023      	str	r3, [r4, #0]
 80014ac:	2378      	movs	r3, #120	; 0x78
 80014ae:	4828      	ldr	r0, [pc, #160]	; (8001550 <_printf_i+0x248>)
 80014b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80014b4:	e7e3      	b.n	800147e <_printf_i+0x176>
 80014b6:	0659      	lsls	r1, r3, #25
 80014b8:	bf48      	it	mi
 80014ba:	b2b6      	uxthmi	r6, r6
 80014bc:	e7e6      	b.n	800148c <_printf_i+0x184>
 80014be:	4615      	mov	r5, r2
 80014c0:	e7bb      	b.n	800143a <_printf_i+0x132>
 80014c2:	682b      	ldr	r3, [r5, #0]
 80014c4:	6826      	ldr	r6, [r4, #0]
 80014c6:	1d18      	adds	r0, r3, #4
 80014c8:	6961      	ldr	r1, [r4, #20]
 80014ca:	6028      	str	r0, [r5, #0]
 80014cc:	0635      	lsls	r5, r6, #24
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	d501      	bpl.n	80014d6 <_printf_i+0x1ce>
 80014d2:	6019      	str	r1, [r3, #0]
 80014d4:	e002      	b.n	80014dc <_printf_i+0x1d4>
 80014d6:	0670      	lsls	r0, r6, #25
 80014d8:	d5fb      	bpl.n	80014d2 <_printf_i+0x1ca>
 80014da:	8019      	strh	r1, [r3, #0]
 80014dc:	2300      	movs	r3, #0
 80014de:	4615      	mov	r5, r2
 80014e0:	6123      	str	r3, [r4, #16]
 80014e2:	e7ba      	b.n	800145a <_printf_i+0x152>
 80014e4:	682b      	ldr	r3, [r5, #0]
 80014e6:	2100      	movs	r1, #0
 80014e8:	1d1a      	adds	r2, r3, #4
 80014ea:	602a      	str	r2, [r5, #0]
 80014ec:	681d      	ldr	r5, [r3, #0]
 80014ee:	6862      	ldr	r2, [r4, #4]
 80014f0:	4628      	mov	r0, r5
 80014f2:	f000 f82f 	bl	8001554 <memchr>
 80014f6:	b108      	cbz	r0, 80014fc <_printf_i+0x1f4>
 80014f8:	1b40      	subs	r0, r0, r5
 80014fa:	6060      	str	r0, [r4, #4]
 80014fc:	6863      	ldr	r3, [r4, #4]
 80014fe:	6123      	str	r3, [r4, #16]
 8001500:	2300      	movs	r3, #0
 8001502:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001506:	e7a8      	b.n	800145a <_printf_i+0x152>
 8001508:	462a      	mov	r2, r5
 800150a:	4649      	mov	r1, r9
 800150c:	4640      	mov	r0, r8
 800150e:	6923      	ldr	r3, [r4, #16]
 8001510:	47d0      	blx	sl
 8001512:	3001      	adds	r0, #1
 8001514:	d0ab      	beq.n	800146e <_printf_i+0x166>
 8001516:	6823      	ldr	r3, [r4, #0]
 8001518:	079b      	lsls	r3, r3, #30
 800151a:	d413      	bmi.n	8001544 <_printf_i+0x23c>
 800151c:	68e0      	ldr	r0, [r4, #12]
 800151e:	9b03      	ldr	r3, [sp, #12]
 8001520:	4298      	cmp	r0, r3
 8001522:	bfb8      	it	lt
 8001524:	4618      	movlt	r0, r3
 8001526:	e7a4      	b.n	8001472 <_printf_i+0x16a>
 8001528:	2301      	movs	r3, #1
 800152a:	4632      	mov	r2, r6
 800152c:	4649      	mov	r1, r9
 800152e:	4640      	mov	r0, r8
 8001530:	47d0      	blx	sl
 8001532:	3001      	adds	r0, #1
 8001534:	d09b      	beq.n	800146e <_printf_i+0x166>
 8001536:	3501      	adds	r5, #1
 8001538:	68e3      	ldr	r3, [r4, #12]
 800153a:	9903      	ldr	r1, [sp, #12]
 800153c:	1a5b      	subs	r3, r3, r1
 800153e:	42ab      	cmp	r3, r5
 8001540:	dcf2      	bgt.n	8001528 <_printf_i+0x220>
 8001542:	e7eb      	b.n	800151c <_printf_i+0x214>
 8001544:	2500      	movs	r5, #0
 8001546:	f104 0619 	add.w	r6, r4, #25
 800154a:	e7f5      	b.n	8001538 <_printf_i+0x230>
 800154c:	080016ad 	.word	0x080016ad
 8001550:	080016be 	.word	0x080016be

08001554 <memchr>:
 8001554:	4603      	mov	r3, r0
 8001556:	b510      	push	{r4, lr}
 8001558:	b2c9      	uxtb	r1, r1
 800155a:	4402      	add	r2, r0
 800155c:	4293      	cmp	r3, r2
 800155e:	4618      	mov	r0, r3
 8001560:	d101      	bne.n	8001566 <memchr+0x12>
 8001562:	2000      	movs	r0, #0
 8001564:	e003      	b.n	800156e <memchr+0x1a>
 8001566:	7804      	ldrb	r4, [r0, #0]
 8001568:	3301      	adds	r3, #1
 800156a:	428c      	cmp	r4, r1
 800156c:	d1f6      	bne.n	800155c <memchr+0x8>
 800156e:	bd10      	pop	{r4, pc}

08001570 <memmove>:
 8001570:	4288      	cmp	r0, r1
 8001572:	b510      	push	{r4, lr}
 8001574:	eb01 0402 	add.w	r4, r1, r2
 8001578:	d902      	bls.n	8001580 <memmove+0x10>
 800157a:	4284      	cmp	r4, r0
 800157c:	4623      	mov	r3, r4
 800157e:	d807      	bhi.n	8001590 <memmove+0x20>
 8001580:	1e43      	subs	r3, r0, #1
 8001582:	42a1      	cmp	r1, r4
 8001584:	d008      	beq.n	8001598 <memmove+0x28>
 8001586:	f811 2b01 	ldrb.w	r2, [r1], #1
 800158a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800158e:	e7f8      	b.n	8001582 <memmove+0x12>
 8001590:	4601      	mov	r1, r0
 8001592:	4402      	add	r2, r0
 8001594:	428a      	cmp	r2, r1
 8001596:	d100      	bne.n	800159a <memmove+0x2a>
 8001598:	bd10      	pop	{r4, pc}
 800159a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800159e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80015a2:	e7f7      	b.n	8001594 <memmove+0x24>

080015a4 <_realloc_r>:
 80015a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015a8:	4680      	mov	r8, r0
 80015aa:	4614      	mov	r4, r2
 80015ac:	460e      	mov	r6, r1
 80015ae:	b921      	cbnz	r1, 80015ba <_realloc_r+0x16>
 80015b0:	4611      	mov	r1, r2
 80015b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80015b6:	f7ff bbe3 	b.w	8000d80 <_malloc_r>
 80015ba:	b92a      	cbnz	r2, 80015c8 <_realloc_r+0x24>
 80015bc:	f7ff fc90 	bl	8000ee0 <_free_r>
 80015c0:	4625      	mov	r5, r4
 80015c2:	4628      	mov	r0, r5
 80015c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015c8:	f000 f81b 	bl	8001602 <_malloc_usable_size_r>
 80015cc:	4284      	cmp	r4, r0
 80015ce:	4607      	mov	r7, r0
 80015d0:	d802      	bhi.n	80015d8 <_realloc_r+0x34>
 80015d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80015d6:	d812      	bhi.n	80015fe <_realloc_r+0x5a>
 80015d8:	4621      	mov	r1, r4
 80015da:	4640      	mov	r0, r8
 80015dc:	f7ff fbd0 	bl	8000d80 <_malloc_r>
 80015e0:	4605      	mov	r5, r0
 80015e2:	2800      	cmp	r0, #0
 80015e4:	d0ed      	beq.n	80015c2 <_realloc_r+0x1e>
 80015e6:	42bc      	cmp	r4, r7
 80015e8:	4622      	mov	r2, r4
 80015ea:	4631      	mov	r1, r6
 80015ec:	bf28      	it	cs
 80015ee:	463a      	movcs	r2, r7
 80015f0:	f7ff fb98 	bl	8000d24 <memcpy>
 80015f4:	4631      	mov	r1, r6
 80015f6:	4640      	mov	r0, r8
 80015f8:	f7ff fc72 	bl	8000ee0 <_free_r>
 80015fc:	e7e1      	b.n	80015c2 <_realloc_r+0x1e>
 80015fe:	4635      	mov	r5, r6
 8001600:	e7df      	b.n	80015c2 <_realloc_r+0x1e>

08001602 <_malloc_usable_size_r>:
 8001602:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001606:	1f18      	subs	r0, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	bfbc      	itt	lt
 800160c:	580b      	ldrlt	r3, [r1, r0]
 800160e:	18c0      	addlt	r0, r0, r3
 8001610:	4770      	bx	lr
	...

08001614 <_init>:
 8001614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001616:	bf00      	nop
 8001618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800161a:	bc08      	pop	{r3}
 800161c:	469e      	mov	lr, r3
 800161e:	4770      	bx	lr

08001620 <_fini>:
 8001620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001622:	bf00      	nop
 8001624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001626:	bc08      	pop	{r3}
 8001628:	469e      	mov	lr, r3
 800162a:	4770      	bx	lr
