
canhanh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ae4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08002bf4  08002bf4  00012bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ce8  08002ce8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ce8  08002ce8  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ce8  08002ce8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ce8  08002ce8  00012ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cec  08002cec  00012cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08002cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001044  2000007c  08002d6c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010c0  08002d6c  000210c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e76  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff9  00000000  00000000  00029f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  0002bf18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000760  00000000  00000000  0002c7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019128  00000000  00000000  0002cf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b8b7  00000000  00000000  00046048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000883b5  00000000  00000000  000518ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9cb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002468  00000000  00000000  000d9d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08002bdc 	.word	0x08002bdc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08002bdc 	.word	0x08002bdc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <ADC1_Configure>:
 *      Author: nguye
 */
#include "ADC_Configure.h"
#include "stm32f1xx.h"

void ADC1_Configure(uint8_t* chanel, uint8_t cycle, uint8_t lenght){
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
 8000168:	460b      	mov	r3, r1
 800016a:	70fb      	strb	r3, [r7, #3]
 800016c:	4613      	mov	r3, r2
 800016e:	70bb      	strb	r3, [r7, #2]
	uint8_t count = 0;
 8000170:	2300      	movs	r3, #0
 8000172:	73fb      	strb	r3, [r7, #15]
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000174:	4b34      	ldr	r3, [pc, #208]	; (8000248 <ADC1_Configure+0xe8>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a33      	ldr	r2, [pc, #204]	; (8000248 <ADC1_Configure+0xe8>)
 800017a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800017e:	6193      	str	r3, [r2, #24]
	ADC1->CR2 |= ADC_CR2_ADON;
 8000180:	4b32      	ldr	r3, [pc, #200]	; (800024c <ADC1_Configure+0xec>)
 8000182:	689b      	ldr	r3, [r3, #8]
 8000184:	4a31      	ldr	r2, [pc, #196]	; (800024c <ADC1_Configure+0xec>)
 8000186:	f043 0301 	orr.w	r3, r3, #1
 800018a:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_CONT;
 800018c:	4b2f      	ldr	r3, [pc, #188]	; (800024c <ADC1_Configure+0xec>)
 800018e:	689b      	ldr	r3, [r3, #8]
 8000190:	4a2e      	ldr	r2, [pc, #184]	; (800024c <ADC1_Configure+0xec>)
 8000192:	f043 0302 	orr.w	r3, r3, #2
 8000196:	6093      	str	r3, [r2, #8]
	ADC1->CR1 |= ADC_CR1_SCAN;
 8000198:	4b2c      	ldr	r3, [pc, #176]	; (800024c <ADC1_Configure+0xec>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4a2b      	ldr	r2, [pc, #172]	; (800024c <ADC1_Configure+0xec>)
 800019e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001a2:	6053      	str	r3, [r2, #4]
	ADC1->SQR1 |= ((lenght-1) << 20);
 80001a4:	4b29      	ldr	r3, [pc, #164]	; (800024c <ADC1_Configure+0xec>)
 80001a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80001a8:	78ba      	ldrb	r2, [r7, #2]
 80001aa:	3a01      	subs	r2, #1
 80001ac:	0512      	lsls	r2, r2, #20
 80001ae:	4611      	mov	r1, r2
 80001b0:	4a26      	ldr	r2, [pc, #152]	; (800024c <ADC1_Configure+0xec>)
 80001b2:	430b      	orrs	r3, r1
 80001b4:	62d3      	str	r3, [r2, #44]	; 0x2c
	for(int i = 0; i < lenght; i++){
 80001b6:	2300      	movs	r3, #0
 80001b8:	60bb      	str	r3, [r7, #8]
 80001ba:	e023      	b.n	8000204 <ADC1_Configure+0xa4>
		ADC1->SQR3 |= (chanel[i] << count);
 80001bc:	4b23      	ldr	r3, [pc, #140]	; (800024c <ADC1_Configure+0xec>)
 80001be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001c0:	68ba      	ldr	r2, [r7, #8]
 80001c2:	6879      	ldr	r1, [r7, #4]
 80001c4:	440a      	add	r2, r1
 80001c6:	7812      	ldrb	r2, [r2, #0]
 80001c8:	4611      	mov	r1, r2
 80001ca:	7bfa      	ldrb	r2, [r7, #15]
 80001cc:	fa01 f202 	lsl.w	r2, r1, r2
 80001d0:	4611      	mov	r1, r2
 80001d2:	4a1e      	ldr	r2, [pc, #120]	; (800024c <ADC1_Configure+0xec>)
 80001d4:	430b      	orrs	r3, r1
 80001d6:	6353      	str	r3, [r2, #52]	; 0x34
		ADC1->SMPR2 |= (cycle << (chanel[i]*3));
 80001d8:	4b1c      	ldr	r3, [pc, #112]	; (800024c <ADC1_Configure+0xec>)
 80001da:	691a      	ldr	r2, [r3, #16]
 80001dc:	78f9      	ldrb	r1, [r7, #3]
 80001de:	68bb      	ldr	r3, [r7, #8]
 80001e0:	6878      	ldr	r0, [r7, #4]
 80001e2:	4403      	add	r3, r0
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	4618      	mov	r0, r3
 80001e8:	4603      	mov	r3, r0
 80001ea:	005b      	lsls	r3, r3, #1
 80001ec:	4403      	add	r3, r0
 80001ee:	fa01 f303 	lsl.w	r3, r1, r3
 80001f2:	4916      	ldr	r1, [pc, #88]	; (800024c <ADC1_Configure+0xec>)
 80001f4:	4313      	orrs	r3, r2
 80001f6:	610b      	str	r3, [r1, #16]
		count+=5;
 80001f8:	7bfb      	ldrb	r3, [r7, #15]
 80001fa:	3305      	adds	r3, #5
 80001fc:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght; i++){
 80001fe:	68bb      	ldr	r3, [r7, #8]
 8000200:	3301      	adds	r3, #1
 8000202:	60bb      	str	r3, [r7, #8]
 8000204:	78bb      	ldrb	r3, [r7, #2]
 8000206:	68ba      	ldr	r2, [r7, #8]
 8000208:	429a      	cmp	r2, r3
 800020a:	dbd7      	blt.n	80001bc <ADC1_Configure+0x5c>
	}
	ADC1->CR2 |= (1 << 2);
 800020c:	4b0f      	ldr	r3, [pc, #60]	; (800024c <ADC1_Configure+0xec>)
 800020e:	689b      	ldr	r3, [r3, #8]
 8000210:	4a0e      	ldr	r2, [pc, #56]	; (800024c <ADC1_Configure+0xec>)
 8000212:	f043 0304 	orr.w	r3, r3, #4
 8000216:	6093      	str	r3, [r2, #8]
	while((ADC1->CR2 & (1 << 2)) != 0);
 8000218:	bf00      	nop
 800021a:	4b0c      	ldr	r3, [pc, #48]	; (800024c <ADC1_Configure+0xec>)
 800021c:	689b      	ldr	r3, [r3, #8]
 800021e:	f003 0304 	and.w	r3, r3, #4
 8000222:	2b00      	cmp	r3, #0
 8000224:	d1f9      	bne.n	800021a <ADC1_Configure+0xba>
	ADC1->CR2 |= (1 << 0);
 8000226:	4b09      	ldr	r3, [pc, #36]	; (800024c <ADC1_Configure+0xec>)
 8000228:	689b      	ldr	r3, [r3, #8]
 800022a:	4a08      	ldr	r2, [pc, #32]	; (800024c <ADC1_Configure+0xec>)
 800022c:	f043 0301 	orr.w	r3, r3, #1
 8000230:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (1 << 22);
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <ADC1_Configure+0xec>)
 8000234:	689b      	ldr	r3, [r3, #8]
 8000236:	4a05      	ldr	r2, [pc, #20]	; (800024c <ADC1_Configure+0xec>)
 8000238:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800023c:	6093      	str	r3, [r2, #8]
}
 800023e:	bf00      	nop
 8000240:	3714      	adds	r7, #20
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr
 8000248:	40021000 	.word	0x40021000
 800024c:	40012400 	.word	0x40012400

08000250 <DMA_ConfigureADC>:
 */

#include <DMA/DMA_Configure.h>
#include "stm32f1xx.h"

void DMA_ConfigureADC(uint32_t *buffer, uint8_t numberOfChannels) {
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
 8000258:	460b      	mov	r3, r1
 800025a:	70fb      	strb	r3, [r7, #3]
    RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 800025c:	4b13      	ldr	r3, [pc, #76]	; (80002ac <DMA_ConfigureADC+0x5c>)
 800025e:	695b      	ldr	r3, [r3, #20]
 8000260:	4a12      	ldr	r2, [pc, #72]	; (80002ac <DMA_ConfigureADC+0x5c>)
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6153      	str	r3, [r2, #20]

    DMA1_Channel1->CPAR = (uint32_t)(&(ADC1->DR));
 8000268:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <DMA_ConfigureADC+0x60>)
 800026a:	4a12      	ldr	r2, [pc, #72]	; (80002b4 <DMA_ConfigureADC+0x64>)
 800026c:	609a      	str	r2, [r3, #8]
    DMA1_Channel1->CMAR = (uint32_t)(buffer);
 800026e:	4a10      	ldr	r2, [pc, #64]	; (80002b0 <DMA_ConfigureADC+0x60>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	60d3      	str	r3, [r2, #12]
    DMA1_Channel1->CNDTR = numberOfChannels;
 8000274:	4a0e      	ldr	r2, [pc, #56]	; (80002b0 <DMA_ConfigureADC+0x60>)
 8000276:	78fb      	ldrb	r3, [r7, #3]
 8000278:	6053      	str	r3, [r2, #4]
    DMA1_Channel1->CCR |= DMA_CCR_PSIZE_0 | DMA_CCR_MSIZE_0 | DMA_CCR_MINC | DMA_CCR_CIRC | DMA_CCR_EN;
 800027a:	4b0d      	ldr	r3, [pc, #52]	; (80002b0 <DMA_ConfigureADC+0x60>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a0c      	ldr	r2, [pc, #48]	; (80002b0 <DMA_ConfigureADC+0x60>)
 8000280:	f443 63b4 	orr.w	r3, r3, #1440	; 0x5a0
 8000284:	f043 0301 	orr.w	r3, r3, #1
 8000288:	6013      	str	r3, [r2, #0]
    ADC1->CR2 |= ADC_CR2_DMA;
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <DMA_ConfigureADC+0x68>)
 800028c:	689b      	ldr	r3, [r3, #8]
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <DMA_ConfigureADC+0x68>)
 8000290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000294:	6093      	str	r3, [r2, #8]
    DMA1_Channel1->CCR |= DMA_CCR_EN;
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <DMA_ConfigureADC+0x60>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a05      	ldr	r2, [pc, #20]	; (80002b0 <DMA_ConfigureADC+0x60>)
 800029c:	f043 0301 	orr.w	r3, r3, #1
 80002a0:	6013      	str	r3, [r2, #0]
}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr
 80002ac:	40021000 	.word	0x40021000
 80002b0:	40020008 	.word	0x40020008
 80002b4:	4001244c 	.word	0x4001244c
 80002b8:	40012400 	.word	0x40012400

080002bc <GPIO_configureRCC>:
 *  Created on: Jun 5, 2023
 *      Author: nguye
 */
#include "GPIO_configure.h"

void GPIO_configureRCC(char* GPIOx){
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
	while(*GPIOx){
 80002c4:	e020      	b.n	8000308 <GPIO_configureRCC+0x4c>
		if(*GPIOx == 'C') RCC->APB2ENR |= (1 << 4);
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b43      	cmp	r3, #67	; 0x43
 80002cc:	d105      	bne.n	80002da <GPIO_configureRCC+0x1e>
 80002ce:	4b13      	ldr	r3, [pc, #76]	; (800031c <GPIO_configureRCC+0x60>)
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	4a12      	ldr	r2, [pc, #72]	; (800031c <GPIO_configureRCC+0x60>)
 80002d4:	f043 0310 	orr.w	r3, r3, #16
 80002d8:	6193      	str	r3, [r2, #24]
		if(*GPIOx == 'B') RCC->APB2ENR |= (1 << 3);
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	2b42      	cmp	r3, #66	; 0x42
 80002e0:	d105      	bne.n	80002ee <GPIO_configureRCC+0x32>
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <GPIO_configureRCC+0x60>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	4a0d      	ldr	r2, [pc, #52]	; (800031c <GPIO_configureRCC+0x60>)
 80002e8:	f043 0308 	orr.w	r3, r3, #8
 80002ec:	6193      	str	r3, [r2, #24]
		if(*GPIOx == 'A') RCC->APB2ENR |= (1 << 2);
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	2b41      	cmp	r3, #65	; 0x41
 80002f4:	d105      	bne.n	8000302 <GPIO_configureRCC+0x46>
 80002f6:	4b09      	ldr	r3, [pc, #36]	; (800031c <GPIO_configureRCC+0x60>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	4a08      	ldr	r2, [pc, #32]	; (800031c <GPIO_configureRCC+0x60>)
 80002fc:	f043 0304 	orr.w	r3, r3, #4
 8000300:	6193      	str	r3, [r2, #24]
		GPIOx++;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	3301      	adds	r3, #1
 8000306:	607b      	str	r3, [r7, #4]
	while(*GPIOx){
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d1da      	bne.n	80002c6 <GPIO_configureRCC+0xa>
	}
}
 8000310:	bf00      	nop
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	40021000 	.word	0x40021000

08000320 <GPIO_configure>:
void GPIO_configure(GPIO_TypeDef*GPIOx, uint8_t* Pin, uint8_t* mode){
 8000320:	b480      	push	{r7}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
 8000326:	60f8      	str	r0, [r7, #12]
 8000328:	60b9      	str	r1, [r7, #8]
 800032a:	607a      	str	r2, [r7, #4]
	while(*Pin){
 800032c:	e03e      	b.n	80003ac <GPIO_configure+0x8c>
		if(*Pin > 7){
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	2b07      	cmp	r3, #7
 8000334:	d91b      	bls.n	800036e <GPIO_configure+0x4e>
			GPIOx->CRH &= ~(15<<(*Pin * 4 - 32));
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	68ba      	ldr	r2, [r7, #8]
 800033c:	7812      	ldrb	r2, [r2, #0]
 800033e:	3a08      	subs	r2, #8
 8000340:	0092      	lsls	r2, r2, #2
 8000342:	210f      	movs	r1, #15
 8000344:	fa01 f202 	lsl.w	r2, r1, r2
 8000348:	43d2      	mvns	r2, r2
 800034a:	401a      	ands	r2, r3
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	605a      	str	r2, [r3, #4]
			GPIOx->CRH |= *mode << (*Pin * 4 - 32);
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	7812      	ldrb	r2, [r2, #0]
 8000358:	4611      	mov	r1, r2
 800035a:	68ba      	ldr	r2, [r7, #8]
 800035c:	7812      	ldrb	r2, [r2, #0]
 800035e:	3a08      	subs	r2, #8
 8000360:	0092      	lsls	r2, r2, #2
 8000362:	fa01 f202 	lsl.w	r2, r1, r2
 8000366:	431a      	orrs	r2, r3
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	e018      	b.n	80003a0 <GPIO_configure+0x80>
		}else{
			GPIOx->CRL &= ~(15<<(*Pin * 4));
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	68ba      	ldr	r2, [r7, #8]
 8000374:	7812      	ldrb	r2, [r2, #0]
 8000376:	0092      	lsls	r2, r2, #2
 8000378:	210f      	movs	r1, #15
 800037a:	fa01 f202 	lsl.w	r2, r1, r2
 800037e:	43d2      	mvns	r2, r2
 8000380:	401a      	ands	r2, r3
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	601a      	str	r2, [r3, #0]
			GPIOx->CRL |= *mode << (*Pin * 4);
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	7812      	ldrb	r2, [r2, #0]
 800038e:	4611      	mov	r1, r2
 8000390:	68ba      	ldr	r2, [r7, #8]
 8000392:	7812      	ldrb	r2, [r2, #0]
 8000394:	0092      	lsls	r2, r2, #2
 8000396:	fa01 f202 	lsl.w	r2, r1, r2
 800039a:	431a      	orrs	r2, r3
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	601a      	str	r2, [r3, #0]
		}
		Pin++;
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	3301      	adds	r3, #1
 80003a4:	60bb      	str	r3, [r7, #8]
		mode++;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	3301      	adds	r3, #1
 80003aa:	607b      	str	r3, [r7, #4]
	while(*Pin){
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d1bc      	bne.n	800032e <GPIO_configure+0xe>
	}
}
 80003b4:	bf00      	nop
 80003b6:	bf00      	nop
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr

080003c0 <I2C_GPIO_Config>:
#include"I2C_Configure.h"
#include "stm32f1xx.h"
void I2C_GPIO_Config(void) {
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
    // Bật clock cho GPIOB
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80003c4:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <I2C_GPIO_Config+0x3c>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a0c      	ldr	r2, [pc, #48]	; (80003fc <I2C_GPIO_Config+0x3c>)
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 80003d0:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <I2C_GPIO_Config+0x3c>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a09      	ldr	r2, [pc, #36]	; (80003fc <I2C_GPIO_Config+0x3c>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6193      	str	r3, [r2, #24]
    AFIO->MAPR &= ~AFIO_MAPR_I2C1_REMAP; // Chọn chân mặc định
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <I2C_GPIO_Config+0x40>)
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	4a07      	ldr	r2, [pc, #28]	; (8000400 <I2C_GPIO_Config+0x40>)
 80003e2:	f023 0302 	bic.w	r3, r3, #2
 80003e6:	6053      	str	r3, [r2, #4]
    GPIOB->CRL |= (0xF << 24) | (0xF << 28);
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <I2C_GPIO_Config+0x44>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a05      	ldr	r2, [pc, #20]	; (8000404 <I2C_GPIO_Config+0x44>)
 80003ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80003f2:	6013      	str	r3, [r2, #0]
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	40021000 	.word	0x40021000
 8000400:	40010000 	.word	0x40010000
 8000404:	40010c00 	.word	0x40010c00

08000408 <I2C1_Configure>:
void I2C1_Configure(void){
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800040c:	4b10      	ldr	r3, [pc, #64]	; (8000450 <I2C1_Configure+0x48>)
 800040e:	69db      	ldr	r3, [r3, #28]
 8000410:	4a0f      	ldr	r2, [pc, #60]	; (8000450 <I2C1_Configure+0x48>)
 8000412:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000416:	61d3      	str	r3, [r2, #28]
	    I2C1->OAR1 |=(1<<14);
 8000418:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <I2C1_Configure+0x4c>)
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	4a0d      	ldr	r2, [pc, #52]	; (8000454 <I2C1_Configure+0x4c>)
 800041e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000422:	6093      	str	r3, [r2, #8]
	    I2C1->CR2 |= 36; // Đặt tần số là 36 MHz
 8000424:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <I2C1_Configure+0x4c>)
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	4a0a      	ldr	r2, [pc, #40]	; (8000454 <I2C1_Configure+0x4c>)
 800042a:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 800042e:	6053      	str	r3, [r2, #4]
	    I2C1->CCR = 180; // Cài đặt CCR cho tốc độ 100kHz
 8000430:	4b08      	ldr	r3, [pc, #32]	; (8000454 <I2C1_Configure+0x4c>)
 8000432:	22b4      	movs	r2, #180	; 0xb4
 8000434:	61da      	str	r2, [r3, #28]
	    I2C1->TRISE = 37; // Cài đặt TRISE cho tốc độ 100kHz
 8000436:	4b07      	ldr	r3, [pc, #28]	; (8000454 <I2C1_Configure+0x4c>)
 8000438:	2225      	movs	r2, #37	; 0x25
 800043a:	621a      	str	r2, [r3, #32]
	    I2C1->CR1 |= I2C_CR1_PE; // Bật I2C
 800043c:	4b05      	ldr	r3, [pc, #20]	; (8000454 <I2C1_Configure+0x4c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a04      	ldr	r2, [pc, #16]	; (8000454 <I2C1_Configure+0x4c>)
 8000442:	f043 0301 	orr.w	r3, r3, #1
 8000446:	6013      	str	r3, [r2, #0]
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	40021000 	.word	0x40021000
 8000454:	40005400 	.word	0x40005400

08000458 <I2C_WriteData>:
void I2C_WriteData(I2C_TypeDef *i2c, uint8_t slaveAddress, uint8_t *data, uint16_t dataSize) {
 8000458:	b480      	push	{r7}
 800045a:	b087      	sub	sp, #28
 800045c:	af00      	add	r7, sp, #0
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	607a      	str	r2, [r7, #4]
 8000462:	461a      	mov	r2, r3
 8000464:	460b      	mov	r3, r1
 8000466:	72fb      	strb	r3, [r7, #11]
 8000468:	4613      	mov	r3, r2
 800046a:	813b      	strh	r3, [r7, #8]
    while (i2c->SR2 & I2C_SR2_BUSY);
 800046c:	bf00      	nop
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	f003 0302 	and.w	r3, r3, #2
 8000476:	2b00      	cmp	r3, #0
 8000478:	d1f9      	bne.n	800046e <I2C_WriteData+0x16>
    // Bắt đầu quá trình truyền
    i2c->CR1 |= I2C_CR1_START;
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	601a      	str	r2, [r3, #0]
    // Chờ cho tới khi quá trình truyền bắt đầu
    while (!(i2c->SR1 & I2C_SR1_SB));
 8000486:	bf00      	nop
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	695b      	ldr	r3, [r3, #20]
 800048c:	f003 0301 	and.w	r3, r3, #1
 8000490:	2b00      	cmp	r3, #0
 8000492:	d0f9      	beq.n	8000488 <I2C_WriteData+0x30>
    // Gửi địa chỉ slave và chế độ ghi
    i2c->DR = (slaveAddress << 1) & 0xFE;
 8000494:	7afb      	ldrb	r3, [r7, #11]
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	b2da      	uxtb	r2, r3
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	611a      	str	r2, [r3, #16]
    while (!(i2c->SR1 & (1<<1)));
 800049e:	bf00      	nop
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	695b      	ldr	r3, [r3, #20]
 80004a4:	f003 0302 	and.w	r3, r3, #2
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d0f9      	beq.n	80004a0 <I2C_WriteData+0x48>
    volatile uint32_t temp = i2c->SR1;
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	695b      	ldr	r3, [r3, #20]
 80004b0:	613b      	str	r3, [r7, #16]
    temp = i2c->SR2;
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	613b      	str	r3, [r7, #16]
    (void)temp;
 80004b8:	693b      	ldr	r3, [r7, #16]
    // Gửi dữ liệu
    for (uint16_t i = 0; i < dataSize; ++i) {
 80004ba:	2300      	movs	r3, #0
 80004bc:	82fb      	strh	r3, [r7, #22]
 80004be:	e010      	b.n	80004e2 <I2C_WriteData+0x8a>
    	i2c->DR = data[i];
 80004c0:	8afb      	ldrh	r3, [r7, #22]
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	4413      	add	r3, r2
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	461a      	mov	r2, r3
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	611a      	str	r2, [r3, #16]
        while (!(i2c->SR1 & I2C_SR1_TXE));
 80004ce:	bf00      	nop
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0f9      	beq.n	80004d0 <I2C_WriteData+0x78>
    for (uint16_t i = 0; i < dataSize; ++i) {
 80004dc:	8afb      	ldrh	r3, [r7, #22]
 80004de:	3301      	adds	r3, #1
 80004e0:	82fb      	strh	r3, [r7, #22]
 80004e2:	8afa      	ldrh	r2, [r7, #22]
 80004e4:	893b      	ldrh	r3, [r7, #8]
 80004e6:	429a      	cmp	r2, r3
 80004e8:	d3ea      	bcc.n	80004c0 <I2C_WriteData+0x68>
    }
    // Chờ cho tới khi byte transfer hoàn thành (BTF)
    while (!(i2c->SR1 & I2C_SR1_BTF));
 80004ea:	bf00      	nop
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	695b      	ldr	r3, [r3, #20]
 80004f0:	f003 0304 	and.w	r3, r3, #4
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d0f9      	beq.n	80004ec <I2C_WriteData+0x94>
    // Kết thúc truyền
    i2c->CR1 |= I2C_CR1_STOP;
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	601a      	str	r2, [r3, #0]
}
 8000504:	bf00      	nop
 8000506:	371c      	adds	r7, #28
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
	...

08000510 <lcd_send_cmd>:
#include <stdarg.h>
#include "LiquidCrystal_I2C.h"
#include"I2C_Configure.h"
//extern I2C_HandleTypeDef hi2c1;
static void lcd_send_cmd (LiquidCrystal_I2C *lcd, uint8_t cmd)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	460b      	mov	r3, r1
 800051a:	70fb      	strb	r3, [r7, #3]
  uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (cmd&0xf0);
 800051c:	78fb      	ldrb	r3, [r7, #3]
 800051e:	f023 030f 	bic.w	r3, r3, #15
 8000522:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000524:	78fb      	ldrb	r3, [r7, #3]
 8000526:	011b      	lsls	r3, r3, #4
 8000528:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	789a      	ldrb	r2, [r3, #2]
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	4313      	orrs	r3, r2
 8000532:	b2db      	uxtb	r3, r3
 8000534:	f043 0304 	orr.w	r3, r3, #4
 8000538:	b2db      	uxtb	r3, r3
 800053a:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	789a      	ldrb	r2, [r3, #2]
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	4313      	orrs	r3, r2
 8000544:	b2db      	uxtb	r3, r3
 8000546:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	789a      	ldrb	r2, [r3, #2]
 800054c:	7bbb      	ldrb	r3, [r7, #14]
 800054e:	4313      	orrs	r3, r2
 8000550:	b2db      	uxtb	r3, r3
 8000552:	f043 0304 	orr.w	r3, r3, #4
 8000556:	b2db      	uxtb	r3, r3
 8000558:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	789a      	ldrb	r2, [r3, #2]
 800055e:	7bbb      	ldrb	r3, [r7, #14]
 8000560:	4313      	orrs	r3, r2
 8000562:	b2db      	uxtb	r3, r3
 8000564:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit(&hi2c1, lcd->Addr,(uint8_t *) data_t, 4, 100);
	I2C_WriteData(I2C1, 0x27, (uint8_t *) data_t, 4);
 8000566:	f107 0208 	add.w	r2, r7, #8
 800056a:	2304      	movs	r3, #4
 800056c:	2127      	movs	r1, #39	; 0x27
 800056e:	4803      	ldr	r0, [pc, #12]	; (800057c <lcd_send_cmd+0x6c>)
 8000570:	f7ff ff72 	bl	8000458 <I2C_WriteData>
}
 8000574:	bf00      	nop
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40005400 	.word	0x40005400

08000580 <lcd_send_data>:

static void lcd_send_data(LiquidCrystal_I2C *lcd,uint8_t data)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	70fb      	strb	r3, [r7, #3]
	uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (data&0xf0);
 800058c:	78fb      	ldrb	r3, [r7, #3]
 800058e:	f023 030f 	bic.w	r3, r3, #15
 8000592:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000594:	78fb      	ldrb	r3, [r7, #3]
 8000596:	011b      	lsls	r3, r3, #4
 8000598:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	789a      	ldrb	r2, [r3, #2]
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	f043 0305 	orr.w	r3, r3, #5
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	789a      	ldrb	r2, [r3, #2]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	f043 0301 	orr.w	r3, r3, #1
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	789a      	ldrb	r2, [r3, #2]
 80005c2:	7bbb      	ldrb	r3, [r7, #14]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	f043 0305 	orr.w	r3, r3, #5
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	789a      	ldrb	r2, [r3, #2]
 80005d4:	7bbb      	ldrb	r3, [r7, #14]
 80005d6:	4313      	orrs	r3, r2
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (&hi2c1, lcd->Addr,(uint8_t *) data_t, 4, 100);
	I2C_WriteData(I2C1, 0x27, (uint8_t *) data_t, 4);
 80005e2:	f107 0208 	add.w	r2, r7, #8
 80005e6:	2304      	movs	r3, #4
 80005e8:	2127      	movs	r1, #39	; 0x27
 80005ea:	4803      	ldr	r0, [pc, #12]	; (80005f8 <lcd_send_data+0x78>)
 80005ec:	f7ff ff34 	bl	8000458 <I2C_WriteData>
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40005400 	.word	0x40005400

080005fc <lcd_set_cursor>:
//	HAL_I2C_Master_Transmit (&hi2c1, lcd->Addr,&lcd->Backlightval, 1, 100);
	I2C_WriteData(I2C1, 0x27, &lcd->Backlightval, 1);
}

void lcd_set_cursor(LiquidCrystal_I2C *lcd,uint8_t row, uint8_t col)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	70fb      	strb	r3, [r7, #3]
 8000608:	4613      	mov	r3, r2
 800060a:	70bb      	strb	r3, [r7, #2]
	uint8_t row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800060c:	4b0b      	ldr	r3, [pc, #44]	; (800063c <lcd_set_cursor+0x40>)
 800060e:	60fb      	str	r3, [r7, #12]
	lcd_send_cmd(lcd,LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000610:	78fb      	ldrb	r3, [r7, #3]
 8000612:	3310      	adds	r3, #16
 8000614:	443b      	add	r3, r7
 8000616:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 800061a:	78bb      	ldrb	r3, [r7, #2]
 800061c:	4413      	add	r3, r2
 800061e:	b2db      	uxtb	r3, r3
 8000620:	b25b      	sxtb	r3, r3
 8000622:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000626:	b25b      	sxtb	r3, r3
 8000628:	b2db      	uxtb	r3, r3
 800062a:	4619      	mov	r1, r3
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff ff6f 	bl	8000510 <lcd_send_cmd>
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	54144000 	.word	0x54144000

08000640 <lcd_set_cursor_blink_off>:
	
	lcd->DisplayControl |= LCD_BLINKON;
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
}
void lcd_set_cursor_blink_off(LiquidCrystal_I2C *lcd) 
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	lcd->DisplayControl &= ~LCD_BLINKON;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	785b      	ldrb	r3, [r3, #1]
 800064c:	f023 0301 	bic.w	r3, r3, #1
 8000650:	b2da      	uxtb	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	705a      	strb	r2, [r3, #1]
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	785b      	ldrb	r3, [r3, #1]
 800065a:	f043 0308 	orr.w	r3, r3, #8
 800065e:	b2db      	uxtb	r3, r3
 8000660:	4619      	mov	r1, r3
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f7ff ff54 	bl	8000510 <lcd_send_cmd>
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <lcd_printf>:
void lcd_write(LiquidCrystal_I2C *lcd,uint8_t location)
{
	lcd_send_data(lcd,location);
}
void lcd_printf(LiquidCrystal_I2C *lcd,const char* str, ...)
{
 8000670:	b40e      	push	{r1, r2, r3}
 8000672:	b590      	push	{r4, r7, lr}
 8000674:	b08a      	sub	sp, #40	; 0x28
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
  char stringArray[20];
	
  va_list args;
  va_start(args, str);
 800067a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800067e:	60fb      	str	r3, [r7, #12]
  vsprintf(stringArray, str, args);
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000688:	4618      	mov	r0, r3
 800068a:	f001 fef7 	bl	800247c <vsiprintf>
  va_end(args);
	
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 800068e:	2300      	movs	r3, #0
 8000690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000694:	e00e      	b.n	80006b4 <lcd_printf+0x44>
  {
    lcd_send_data(lcd,(uint8_t)stringArray[i]);
 8000696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800069a:	3328      	adds	r3, #40	; 0x28
 800069c:	443b      	add	r3, r7
 800069e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80006a2:	4619      	mov	r1, r3
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff ff6b 	bl	8000580 <lcd_send_data>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80006aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006ae:	3301      	adds	r3, #1
 80006b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80006b4:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fd47 	bl	8000150 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	429c      	cmp	r4, r3
 80006c6:	d203      	bcs.n	80006d0 <lcd_printf+0x60>
 80006c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006cc:	2b0f      	cmp	r3, #15
 80006ce:	d9e2      	bls.n	8000696 <lcd_printf+0x26>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3728      	adds	r7, #40	; 0x28
 80006d4:	46bd      	mov	sp, r7
 80006d6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80006da:	b003      	add	sp, #12
 80006dc:	4770      	bx	lr

080006de <lcd_init>:
void lcd_init (LiquidCrystal_I2C *lcd, uint8_t addr)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
 80006e6:	460b      	mov	r3, r1
 80006e8:	70fb      	strb	r3, [r7, #3]
	lcd->DisplayControl |= LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	785b      	ldrb	r3, [r3, #1]
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	705a      	strb	r2, [r3, #1]
	lcd_send_cmd (lcd,0x33); 
 80006f8:	2133      	movs	r1, #51	; 0x33
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff ff08 	bl	8000510 <lcd_send_cmd>
	lcd_send_cmd (lcd,0x32);
 8000700:	2132      	movs	r1, #50	; 0x32
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff ff04 	bl	8000510 <lcd_send_cmd>
	HAL_Delay(5);
 8000708:	2005      	movs	r0, #5
 800070a:	f000 fb27 	bl	8000d5c <HAL_Delay>
	lcd_send_cmd (lcd,LCD_CLEARDISPLAY); 
 800070e:	2101      	movs	r1, #1
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff fefd 	bl	8000510 <lcd_send_cmd>
	HAL_Delay(5);
 8000716:	2005      	movs	r0, #5
 8000718:	f000 fb20 	bl	8000d5c <HAL_Delay>
	lcd_send_cmd (lcd,0x0c); 	
 800071c:	210c      	movs	r1, #12
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f7ff fef6 	bl	8000510 <lcd_send_cmd>
	HAL_Delay(5);
 8000724:	2005      	movs	r0, #5
 8000726:	f000 fb19 	bl	8000d5c <HAL_Delay>
	lcd_send_cmd (lcd,LCD_RETURNHOME); 
 800072a:	2102      	movs	r1, #2
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff feef 	bl	8000510 <lcd_send_cmd>
	HAL_Delay(5);
 8000732:	2005      	movs	r0, #5
 8000734:	f000 fb12 	bl	8000d5c <HAL_Delay>
	lcd_send_cmd (lcd,LCD_SETDDRAMADDR);
 8000738:	2180      	movs	r1, #128	; 0x80
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f7ff fee8 	bl	8000510 <lcd_send_cmd>
	lcd_set_cursor_blink_off(lcd);
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff ff7d 	bl	8000640 <lcd_set_cursor_blink_off>
	lcd->Backlightval = LCD_BACKLIGHT;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2208      	movs	r2, #8
 800074a:	709a      	strb	r2, [r3, #2]
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <RCC_Configure>:
 *      Author: nguye
 */
#include "stm32f103.h"
#include "stm32f1xx.h"

void RCC_Configure(){
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON;
 8000758:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <RCC_Configure+0xbc>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a2c      	ldr	r2, [pc, #176]	; (8000810 <RCC_Configure+0xbc>)
 800075e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000762:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 8000764:	bf00      	nop
 8000766:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <RCC_Configure+0xbc>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800076e:	2b00      	cmp	r3, #0
 8000770:	d0f9      	beq.n	8000766 <RCC_Configure+0x12>

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000772:	4b27      	ldr	r3, [pc, #156]	; (8000810 <RCC_Configure+0xbc>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	4a26      	ldr	r2, [pc, #152]	; (8000810 <RCC_Configure+0xbc>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077c:	61d3      	str	r3, [r2, #28]

	FLASH->ACR |= FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 800077e:	4b25      	ldr	r3, [pc, #148]	; (8000814 <RCC_Configure+0xc0>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a24      	ldr	r2, [pc, #144]	; (8000814 <RCC_Configure+0xc0>)
 8000784:	f043 0312 	orr.w	r3, r3, #18
 8000788:	6013      	str	r3, [r2, #0]
	while (!(FLASH->ACR & FLASH_ACR_PRFTBS));
 800078a:	bf00      	nop
 800078c:	4b21      	ldr	r3, [pc, #132]	; (8000814 <RCC_Configure+0xc0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f003 0320 	and.w	r3, r3, #32
 8000794:	2b00      	cmp	r3, #0
 8000796:	d0f9      	beq.n	800078c <RCC_Configure+0x38>

	RCC->CFGR |= RCC_CFGR_PLLSRC;
 8000798:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <RCC_Configure+0xbc>)
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	4a1c      	ldr	r2, [pc, #112]	; (8000810 <RCC_Configure+0xbc>)
 800079e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007a2:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (7 << 18); // nhân RCC với 9
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <RCC_Configure+0xbc>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	4a19      	ldr	r2, [pc, #100]	; (8000810 <RCC_Configure+0xbc>)
 80007aa:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80007ae:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (4 << 8); // chia để bus APB1 max 36
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <RCC_Configure+0xbc>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	4a16      	ldr	r2, [pc, #88]	; (8000810 <RCC_Configure+0xbc>)
 80007b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ba:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (3 << 14); // chia ADC cho 6 = 9M
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <RCC_Configure+0xbc>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	4a13      	ldr	r2, [pc, #76]	; (8000810 <RCC_Configure+0xbc>)
 80007c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007c6:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <RCC_Configure+0xbc>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a10      	ldr	r2, [pc, #64]	; (8000810 <RCC_Configure+0xbc>)
 80007ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007d2:	6013      	str	r3, [r2, #0]

	RCC->CFGR |= (2 << 0);
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <RCC_Configure+0xbc>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <RCC_Configure+0xbc>)
 80007da:	f043 0302 	orr.w	r3, r3, #2
 80007de:	6053      	str	r3, [r2, #4]
	while (!(RCC->CFGR & (2 << 2)));
 80007e0:	bf00      	nop
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <RCC_Configure+0xbc>)
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d0f9      	beq.n	80007e2 <RCC_Configure+0x8e>
	RCC->APB2ENR |= (1<<0);
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <RCC_Configure+0xbc>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	4a07      	ldr	r2, [pc, #28]	; (8000810 <RCC_Configure+0xbc>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6193      	str	r3, [r2, #24]
	AFIO->MAPR |= (2 << 24);
 80007fa:	4b07      	ldr	r3, [pc, #28]	; (8000818 <RCC_Configure+0xc4>)
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	4a06      	ldr	r2, [pc, #24]	; (8000818 <RCC_Configure+0xc4>)
 8000800:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000804:	6053      	str	r3, [r2, #4]
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000
 8000814:	40022000 	.word	0x40022000
 8000818:	40010000 	.word	0x40010000

0800081c <TIMx_PWM_Init>:
 *  Created on: Jun 5, 2023
 *      Author: nguye
 */
#include "PWM.h"

void TIMx_PWM_Init(TIM_TypeDef* TIMx, uint8_t chanel, uint16_t psc, uint16_t arr){
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	4608      	mov	r0, r1
 8000826:	4611      	mov	r1, r2
 8000828:	461a      	mov	r2, r3
 800082a:	4603      	mov	r3, r0
 800082c:	72fb      	strb	r3, [r7, #11]
 800082e:	460b      	mov	r3, r1
 8000830:	813b      	strh	r3, [r7, #8]
 8000832:	4613      	mov	r3, r2
 8000834:	80fb      	strh	r3, [r7, #6]
	if(TIMx == TIM1){
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	4a26      	ldr	r2, [pc, #152]	; (80008d4 <TIMx_PWM_Init+0xb8>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d106      	bne.n	800084c <TIMx_PWM_Init+0x30>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <TIMx_PWM_Init+0xbc>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	4a25      	ldr	r2, [pc, #148]	; (80008d8 <TIMx_PWM_Init+0xbc>)
 8000844:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000848:	6193      	str	r3, [r2, #24]
 800084a:	e005      	b.n	8000858 <TIMx_PWM_Init+0x3c>
	}else{
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800084c:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <TIMx_PWM_Init+0xbc>)
 800084e:	69db      	ldr	r3, [r3, #28]
 8000850:	4a21      	ldr	r2, [pc, #132]	; (80008d8 <TIMx_PWM_Init+0xbc>)
 8000852:	f043 0301 	orr.w	r3, r3, #1
 8000856:	61d3      	str	r3, [r2, #28]
	}
	TIMx->PSC = psc;
 8000858:	893a      	ldrh	r2, [r7, #8]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	629a      	str	r2, [r3, #40]	; 0x28
	TIMx->ARR = arr;
 800085e:	88fa      	ldrh	r2, [r7, #6]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	62da      	str	r2, [r3, #44]	; 0x2c
	TIMx->CCER |= (1 << (chanel*4 - 4));
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	6a1b      	ldr	r3, [r3, #32]
 8000868:	7afa      	ldrb	r2, [r7, #11]
 800086a:	3a01      	subs	r2, #1
 800086c:	0092      	lsls	r2, r2, #2
 800086e:	2101      	movs	r1, #1
 8000870:	fa01 f202 	lsl.w	r2, r1, r2
 8000874:	431a      	orrs	r2, r3
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	621a      	str	r2, [r3, #32]
	if (chanel > 2){
 800087a:	7afb      	ldrb	r3, [r7, #11]
 800087c:	2b02      	cmp	r3, #2
 800087e:	d90b      	bls.n	8000898 <TIMx_PWM_Init+0x7c>
		TIMx->CCMR2 |= (6 << (8 * chanel - 20));
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	69db      	ldr	r3, [r3, #28]
 8000884:	7afa      	ldrb	r2, [r7, #11]
 8000886:	00d2      	lsls	r2, r2, #3
 8000888:	3a14      	subs	r2, #20
 800088a:	2106      	movs	r1, #6
 800088c:	fa01 f202 	lsl.w	r2, r1, r2
 8000890:	431a      	orrs	r2, r3
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	61da      	str	r2, [r3, #28]
 8000896:	e00a      	b.n	80008ae <TIMx_PWM_Init+0x92>
	}else{
		TIMx->CCMR1 |= (6 << (8 * chanel - 4));
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	7afa      	ldrb	r2, [r7, #11]
 800089e:	00d2      	lsls	r2, r2, #3
 80008a0:	3a04      	subs	r2, #4
 80008a2:	2106      	movs	r1, #6
 80008a4:	fa01 f202 	lsl.w	r2, r1, r2
 80008a8:	431a      	orrs	r2, r3
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	619a      	str	r2, [r3, #24]
	}
	TIMx->CR1 |= (1 << 0);
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f043 0201 	orr.w	r2, r3, #1
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	601a      	str	r2, [r3, #0]
	while (!(TIMx->SR & TIM_SR_UIF));
 80008ba:	bf00      	nop
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	691b      	ldr	r3, [r3, #16]
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d0f9      	beq.n	80008bc <TIMx_PWM_Init+0xa0>
}
 80008c8:	bf00      	nop
 80008ca:	bf00      	nop
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	40012c00 	.word	0x40012c00
 80008d8:	40021000 	.word	0x40021000

080008dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	db0b      	blt.n	8000906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 021f 	and.w	r2, r3, #31
 80008f4:	4906      	ldr	r1, [pc, #24]	; (8000910 <__NVIC_EnableIRQ+0x34>)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	095b      	lsrs	r3, r3, #5
 80008fc:	2001      	movs	r0, #1
 80008fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	e000e100 	.word	0xe000e100

08000914 <TIM2_Configure>:
#include "TIM_Configure.h"
#include "stm32f1xx.h"

#define UP  1
#define DO  0
void TIM2_Configure(uint16_t PSC, uint32_t ARR){
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	6039      	str	r1, [r7, #0]
 800091e:	80fb      	strh	r3, [r7, #6]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <TIM2_Configure+0x54>)
 8000922:	69db      	ldr	r3, [r3, #28]
 8000924:	4a10      	ldr	r2, [pc, #64]	; (8000968 <TIM2_Configure+0x54>)
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	61d3      	str	r3, [r2, #28]
	TIM2->PSC = PSC;
 800092c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000930:	88fb      	ldrh	r3, [r7, #6]
 8000932:	6293      	str	r3, [r2, #40]	; 0x28
	TIM2->ARR = ARR;
 8000934:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CR1 |= (1 << 0);
 800093c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	6013      	str	r3, [r2, #0]
	while (!(TIM2->SR & TIM_SR_UIF));
 800094c:	bf00      	nop
 800094e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000952:	691b      	ldr	r3, [r3, #16]
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	2b00      	cmp	r3, #0
 800095a:	d0f8      	beq.n	800094e <TIM2_Configure+0x3a>
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	40021000 	.word	0x40021000

0800096c <TIM4_Configure>:
	TIM1->PSC = PSC;
	TIM1->ARR = ARR;
	TIM1->CR1 |= (1 << 0);
	while (!(TIM1->SR & TIM_SR_UIF));
}
void TIM4_Configure(uint16_t PSC, uint32_t ARR){
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	6039      	str	r1, [r7, #0]
 8000976:	80fb      	strh	r3, [r7, #6]
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <TIM4_Configure+0x64>)
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <TIM4_Configure+0x64>)
 800097e:	f043 0304 	orr.w	r3, r3, #4
 8000982:	61d3      	str	r3, [r2, #28]
	TIM4->PSC = PSC;
 8000984:	4a13      	ldr	r2, [pc, #76]	; (80009d4 <TIM4_Configure+0x68>)
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	6293      	str	r3, [r2, #40]	; 0x28
	TIM4->ARR = ARR;
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <TIM4_Configure+0x68>)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM4->DIER |= TIM_DIER_UIE;
 8000990:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <TIM4_Configure+0x68>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	4a0f      	ldr	r2, [pc, #60]	; (80009d4 <TIM4_Configure+0x68>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	60d3      	str	r3, [r2, #12]
	TIM4->CR1 |= TIM_CR1_ARPE | TIM_CR1_URS;
 800099c:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <TIM4_Configure+0x68>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0c      	ldr	r2, [pc, #48]	; (80009d4 <TIM4_Configure+0x68>)
 80009a2:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 80009a6:	6013      	str	r3, [r2, #0]
	TIM4->EGR |= TIM_EGR_UG;
 80009a8:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <TIM4_Configure+0x68>)
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	4a09      	ldr	r2, [pc, #36]	; (80009d4 <TIM4_Configure+0x68>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	6153      	str	r3, [r2, #20]
	NVIC_EnableIRQ(TIM4_IRQn);
 80009b4:	201e      	movs	r0, #30
 80009b6:	f7ff ff91 	bl	80008dc <__NVIC_EnableIRQ>
	TIM4->CR1 |= TIM_CR1_CEN;
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <TIM4_Configure+0x68>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <TIM4_Configure+0x68>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6013      	str	r3, [r2, #0]
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40000800 	.word	0x40000800

080009d8 <delay_us2>:
void delay_us2(uint16_t us){
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	80fb      	strh	r3, [r7, #6]
	TIM2->CNT = 0;
 80009e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
	while (TIM2->CNT < us);
 80009ea:	bf00      	nop
 80009ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d3f9      	bcc.n	80009ec <delay_us2+0x14>
}
 80009f8:	bf00      	nop
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <delay_ms2>:
void delay_us1(uint16_t us){
	TIM1->CNT = 0;
	while (TIM1->CNT < us);
}
void delay_ms2(uint16_t ms){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	80fb      	strh	r3, [r7, #6]
	while (ms--){
 8000a0e:	e003      	b.n	8000a18 <delay_ms2+0x14>
		delay_us2(1000);
 8000a10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a14:	f7ff ffe0 	bl	80009d8 <delay_us2>
	while (ms--){
 8000a18:	88fb      	ldrh	r3, [r7, #6]
 8000a1a:	1e5a      	subs	r2, r3, #1
 8000a1c:	80fa      	strh	r2, [r7, #6]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d1f6      	bne.n	8000a10 <delay_ms2+0xc>
	}
}
 8000a22:	bf00      	nop
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <UART_Configure>:
 */

#include "UART_Configure.h"
#include "stm32f1xx.h"

void UART_Configure(void){
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000a30:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <UART_Configure+0x88>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <UART_Configure+0x88>)
 8000a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3a:	6193      	str	r3, [r2, #24]
	GPIOA->CRH &= 0xFFFFFF0F;
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <UART_Configure+0x8c>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	4a1d      	ldr	r2, [pc, #116]	; (8000ab8 <UART_Configure+0x8c>)
 8000a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a46:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (11 << 4);  //TX PA9
 8000a48:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <UART_Configure+0x8c>)
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	4a1a      	ldr	r2, [pc, #104]	; (8000ab8 <UART_Configure+0x8c>)
 8000a4e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8000a52:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= 0xFFFFF0FF;
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <UART_Configure+0x8c>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <UART_Configure+0x8c>)
 8000a5a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000a5e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (1 << 10); //RX PA10
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <UART_Configure+0x8c>)
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <UART_Configure+0x8c>)
 8000a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a6a:	6053      	str	r3, [r2, #4]
	GPIOA->CRL &= 0xFFFF0FFF;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <UART_Configure+0x8c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a11      	ldr	r2, [pc, #68]	; (8000ab8 <UART_Configure+0x8c>)
 8000a72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000a76:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (2 << 12);
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <UART_Configure+0x8c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <UART_Configure+0x8c>)
 8000a7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a82:	6013      	str	r3, [r2, #0]
	/* UART configure */
	USART1->BRR |= (39 << 4) | (1 << 0);
 8000a84:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <UART_Configure+0x90>)
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	4a0c      	ldr	r2, [pc, #48]	; (8000abc <UART_Configure+0x90>)
 8000a8a:	f443 731c 	orr.w	r3, r3, #624	; 0x270
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6093      	str	r3, [r2, #8]
	USART1->CR1 |= (1 << 2) | (1 << 3) | (1 << 5) ;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <UART_Configure+0x90>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	4a08      	ldr	r2, [pc, #32]	; (8000abc <UART_Configure+0x90>)
 8000a9a:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8000a9e:	60d3      	str	r3, [r2, #12]
//	NVIC_EnableIRQ(USART1_IRQn);
//	NVIC_SetPriority(USART1_IRQn, 1);
	USART1->CR1 |= (1 << 13);
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <UART_Configure+0x90>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	4a05      	ldr	r2, [pc, #20]	; (8000abc <UART_Configure+0x90>)
 8000aa6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000aaa:	60d3      	str	r3, [r2, #12]
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010800 	.word	0x40010800
 8000abc:	40013800 	.word	0x40013800

08000ac0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <vApplicationGetIdleTaskMemory+0x28>)
 8000ad0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	4a05      	ldr	r2, [pc, #20]	; (8000aec <vApplicationGetIdleTaskMemory+0x2c>)
 8000ad6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ade:	bf00      	nop
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	20000098 	.word	0x20000098
 8000aec:	2000014c 	.word	0x2000014c

08000af0 <main>:
//uint8_t GPIOB_mode[] = {1,1};
uint8_t GPIOA_Pin[] = {3,4};
uint8_t numberADC[2] = {3,4};
uint8_t GPIOA_mode[] = {0,0};
uint16_t buffer[2];
int main(void){
 8000af0:	b5b0      	push	{r4, r5, r7, lr}
 8000af2:	b08e      	sub	sp, #56	; 0x38
 8000af4:	af00      	add	r7, sp, #0
	RCC_Configure();
 8000af6:	f7ff fe2d 	bl	8000754 <RCC_Configure>
	I2C_GPIO_Config();
 8000afa:	f7ff fc61 	bl	80003c0 <I2C_GPIO_Config>
	GPIO_configureRCC("C");
 8000afe:	4832      	ldr	r0, [pc, #200]	; (8000bc8 <main+0xd8>)
 8000b00:	f7ff fbdc 	bl	80002bc <GPIO_configureRCC>
	GPIO_configure((GPIO_TypeDef*)GPIOC, (uint8_t*)GPIOC_Pin ,(uint8_t*)GPIOC_mode);
 8000b04:	4a31      	ldr	r2, [pc, #196]	; (8000bcc <main+0xdc>)
 8000b06:	4932      	ldr	r1, [pc, #200]	; (8000bd0 <main+0xe0>)
 8000b08:	4832      	ldr	r0, [pc, #200]	; (8000bd4 <main+0xe4>)
 8000b0a:	f7ff fc09 	bl	8000320 <GPIO_configure>
//	GPIO_configure((GPIO_TypeDef*)GPIOB, (uint8_t*)GPIOB_Pin ,(uint8_t*)GPIOB_mode);
//	GPIO_configure((GPIO_TypeDef*)GPIOA, (uint8_t*)GPIOA_Pin ,(uint8_t*)GPIOA_mode);
	TIM2_Configure(71, 0xFFFF);
 8000b0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b12:	2047      	movs	r0, #71	; 0x47
 8000b14:	f7ff fefe 	bl	8000914 <TIM2_Configure>
	I2C1_Configure();
 8000b18:	f7ff fc76 	bl	8000408 <I2C1_Configure>
	  lcd_init(&lcd, LCD_ADDR_DEFAULT);
 8000b1c:	2127      	movs	r1, #39	; 0x27
 8000b1e:	482e      	ldr	r0, [pc, #184]	; (8000bd8 <main+0xe8>)
 8000b20:	f7ff fddd 	bl	80006de <lcd_init>
	  lcd_set_cursor(&lcd, 0,0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	482b      	ldr	r0, [pc, #172]	; (8000bd8 <main+0xe8>)
 8000b2a:	f7ff fd67 	bl	80005fc <lcd_set_cursor>
	  lcd_printf(&lcd, "oke!");
 8000b2e:	492b      	ldr	r1, [pc, #172]	; (8000bdc <main+0xec>)
 8000b30:	4829      	ldr	r0, [pc, #164]	; (8000bd8 <main+0xe8>)
 8000b32:	f7ff fd9d 	bl	8000670 <lcd_printf>
	TIMx_PWM_Init((TIM_TypeDef*)TIM1, 1, 9999, 71);
 8000b36:	2347      	movs	r3, #71	; 0x47
 8000b38:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	4828      	ldr	r0, [pc, #160]	; (8000be0 <main+0xf0>)
 8000b40:	f7ff fe6c 	bl	800081c <TIMx_PWM_Init>
	ADC1_Configure((uint8_t*)numberADC, 5, 2);
 8000b44:	2202      	movs	r2, #2
 8000b46:	2105      	movs	r1, #5
 8000b48:	4826      	ldr	r0, [pc, #152]	; (8000be4 <main+0xf4>)
 8000b4a:	f7ff fb09 	bl	8000160 <ADC1_Configure>
	UART_Configure();
 8000b4e:	f7ff ff6d 	bl	8000a2c <UART_Configure>
	DMA_ConfigureADC((uint32_t*)buffer, 2);
 8000b52:	2102      	movs	r1, #2
 8000b54:	4824      	ldr	r0, [pc, #144]	; (8000be8 <main+0xf8>)
 8000b56:	f7ff fb7b 	bl	8000250 <DMA_ConfigureADC>
	TIM4_Configure(7199, 999);
 8000b5a:	f240 31e7 	movw	r1, #999	; 0x3e7
 8000b5e:	f641 401f 	movw	r0, #7199	; 0x1c1f
 8000b62:	f7ff ff03 	bl	800096c <TIM4_Configure>
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b66:	4b21      	ldr	r3, [pc, #132]	; (8000bec <main+0xfc>)
 8000b68:	f107 041c 	add.w	r4, r7, #28
 8000b6c:	461d      	mov	r5, r3
 8000b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 f92d 	bl	8000de0 <osThreadCreate>
 8000b86:	4603      	mov	r3, r0
 8000b88:	4a19      	ldr	r2, [pc, #100]	; (8000bf0 <main+0x100>)
 8000b8a:	6013      	str	r3, [r2, #0]
	osThreadDef(task2, StartDefaultTask2, osPriorityBelowNormal, 0, 128);
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <main+0x104>)
 8000b8e:	463c      	mov	r4, r7
 8000b90:	461d      	mov	r5, r3
 8000b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	task2 = osThreadCreate(osThread(task2), NULL);
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f91c 	bl	8000de0 <osThreadCreate>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	4a13      	ldr	r2, [pc, #76]	; (8000bf8 <main+0x108>)
 8000bac:	6013      	str	r3, [r2, #0]
	osKernelStart();
 8000bae:	f000 f910 	bl	8000dd2 <osKernelStart>
	while(1){
		GPIOB->ODR^=(1<<13);
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <main+0x10c>)
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <main+0x10c>)
 8000bb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000bbc:	60d3      	str	r3, [r2, #12]
//		Read_ADC1((uint16_t*)buffer, 2);
		delay_ms2(2000);
 8000bbe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bc2:	f7ff ff1f 	bl	8000a04 <delay_ms2>
		GPIOB->ODR^=(1<<13);
 8000bc6:	e7f4      	b.n	8000bb2 <main+0xc2>
 8000bc8:	08002c08 	.word	0x08002c08
 8000bcc:	20000004 	.word	0x20000004
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	40011000 	.word	0x40011000
 8000bd8:	2000034c 	.word	0x2000034c
 8000bdc:	08002c0c 	.word	0x08002c0c
 8000be0:	40012c00 	.word	0x40012c00
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000358 	.word	0x20000358
 8000bec:	08002c14 	.word	0x08002c14
 8000bf0:	20000350 	.word	0x20000350
 8000bf4:	08002c30 	.word	0x08002c30
 8000bf8:	20000354 	.word	0x20000354
 8000bfc:	40010c00 	.word	0x40010c00

08000c00 <StartDefaultTask>:
	}
}
void StartDefaultTask(void const * argument)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	GPIOC->ODR ^= (1<<13);
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <StartDefaultTask+0x20>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <StartDefaultTask+0x20>)
 8000c0e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000c12:	60d3      	str	r3, [r2, #12]
	osDelay(1000);
 8000c14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c18:	f000 f92e 	bl	8000e78 <osDelay>
	GPIOC->ODR ^= (1<<13);
 8000c1c:	e7f4      	b.n	8000c08 <StartDefaultTask+0x8>
 8000c1e:	bf00      	nop
 8000c20:	40011000 	.word	0x40011000

08000c24 <StartDefaultTask2>:
  }
}
void StartDefaultTask2(void const * argument)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  for(;;)
 8000c2c:	e7fe      	b.n	8000c2c <StartDefaultTask2+0x8>
	...

08000c30 <TIM4_IRQHandler>:
  {
//	printf("canhanh2\n");
//    osDelay(1000);
  }
}
void TIM4_IRQHandler(void) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	if (TIM4->SR & TIM_SR_UIF) {
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <TIM4_IRQHandler+0x24>)
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d007      	beq.n	8000c50 <TIM4_IRQHandler+0x20>
		xPortSysTickHandler();
 8000c40:	f001 f89a 	bl	8001d78 <SysTick_Handler>
		TIM4->SR &= ~TIM_SR_UIF;
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <TIM4_IRQHandler+0x24>)
 8000c46:	691b      	ldr	r3, [r3, #16]
 8000c48:	4a02      	ldr	r2, [pc, #8]	; (8000c54 <TIM4_IRQHandler+0x24>)
 8000c4a:	f023 0301 	bic.w	r3, r3, #1
 8000c4e:	6113      	str	r3, [r2, #16]
	}
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40000800 	.word	0x40000800

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <NMI_Handler+0x4>

08000c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c76 <DebugMon_Handler>:
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    /* USER CODE END W1_UsageFault_IRQn 0 */
  }
}
void DebugMon_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
	...

08000c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c8c:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <_sbrk+0x5c>)
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <_sbrk+0x60>)
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d102      	bne.n	8000ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <_sbrk+0x64>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <_sbrk+0x68>)
 8000ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d207      	bcs.n	8000cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb4:	f001 fa7c 	bl	80021b0 <__errno>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	220c      	movs	r2, #12
 8000cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc2:	e009      	b.n	8000cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <_sbrk+0x64>)
 8000cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;}
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20005000 	.word	0x20005000
 8000ce4:	00000400 	.word	0x00000400
 8000ce8:	2000035c 	.word	0x2000035c
 8000cec:	200010c0 	.word	0x200010c0

08000cf0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cfc:	f7ff fff8 	bl	8000cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d00:	480b      	ldr	r0, [pc, #44]	; (8000d30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d02:	490c      	ldr	r1, [pc, #48]	; (8000d34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d04:	4a0c      	ldr	r2, [pc, #48]	; (8000d38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d08:	e002      	b.n	8000d10 <LoopCopyDataInit>

08000d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0e:	3304      	adds	r3, #4

08000d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d14:	d3f9      	bcc.n	8000d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d16:	4a09      	ldr	r2, [pc, #36]	; (8000d3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d18:	4c09      	ldr	r4, [pc, #36]	; (8000d40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d1c:	e001      	b.n	8000d22 <LoopFillZerobss>

08000d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d20:	3204      	adds	r2, #4

08000d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d24:	d3fb      	bcc.n	8000d1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d26:	f001 fa49 	bl	80021bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d2a:	f7ff fee1 	bl	8000af0 <main>
  bx lr
 8000d2e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d38:	08002cf0 	.word	0x08002cf0
  ldr r2, =_sbss
 8000d3c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000d40:	200010c0 	.word	0x200010c0

08000d44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC1_2_IRQHandler>
	...

08000d48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d4c:	4b02      	ldr	r3, [pc, #8]	; (8000d58 <HAL_GetTick+0x10>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	20000360 	.word	0x20000360

08000d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d64:	f7ff fff0 	bl	8000d48 <HAL_GetTick>
 8000d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d74:	d005      	beq.n	8000d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_Delay+0x44>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4413      	add	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d82:	bf00      	nop
 8000d84:	f7ff ffe0 	bl	8000d48 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d8f7      	bhi.n	8000d84 <HAL_Delay+0x28>
  {
  }
}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000010 	.word	0x20000010

08000da4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8000db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db6:	2b84      	cmp	r3, #132	; 0x84
 8000db8:	d005      	beq.n	8000dc6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8000dba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	3303      	adds	r3, #3
 8000dc4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr

08000dd2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8000dd6:	f000 faeb 	bl	80013b0 <vTaskStartScheduler>
  
  return osOK;
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af04      	add	r7, sp, #16
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d020      	beq.n	8000e34 <osThreadCreate+0x54>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d01c      	beq.n	8000e34 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685c      	ldr	r4, [r3, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681d      	ldr	r5, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	691e      	ldr	r6, [r3, #16]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ffc9 	bl	8000da4 <makeFreeRtosPriority>
 8000e12:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000e1c:	9202      	str	r2, [sp, #8]
 8000e1e:	9301      	str	r3, [sp, #4]
 8000e20:	9100      	str	r1, [sp, #0]
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	4632      	mov	r2, r6
 8000e26:	4629      	mov	r1, r5
 8000e28:	4620      	mov	r0, r4
 8000e2a:	f000 f8eb 	bl	8001004 <xTaskCreateStatic>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	e01c      	b.n	8000e6e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685c      	ldr	r4, [r3, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000e40:	b29e      	uxth	r6, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ffab 	bl	8000da4 <makeFreeRtosPriority>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	9301      	str	r3, [sp, #4]
 8000e56:	9200      	str	r2, [sp, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	4632      	mov	r2, r6
 8000e5c:	4629      	mov	r1, r5
 8000e5e:	4620      	mov	r0, r4
 8000e60:	f000 f92c 	bl	80010bc <xTaskCreate>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d001      	beq.n	8000e6e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e78 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec*5;
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	4613      	mov	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4413      	add	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <osDelay+0x1c>
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	e000      	b.n	8000e96 <osDelay+0x1e>
 8000e94:	2301      	movs	r3, #1
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 fa56 	bl	8001348 <vTaskDelay>
  
  return osOK;
 8000e9c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f103 0208 	add.w	r2, r3, #8
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f04f 32ff 	mov.w	r2, #4294967295
 8000ebe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f103 0208 	add.w	r2, r3, #8
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f103 0208 	add.w	r2, r3, #8
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	1c5a      	adds	r2, r3, #1
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	601a      	str	r2, [r3, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr

08000f42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000f42:	b480      	push	{r7}
 8000f44:	b085      	sub	sp, #20
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f58:	d103      	bne.n	8000f62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	e00c      	b.n	8000f7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3308      	adds	r3, #8
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	e002      	b.n	8000f70 <vListInsert+0x2e>
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d2f6      	bcs.n	8000f6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	1c5a      	adds	r2, r3, #1
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	601a      	str	r2, [r3, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr

08000fb2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b085      	sub	sp, #20
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	6892      	ldr	r2, [r2, #8]
 8000fc8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	6852      	ldr	r2, [r2, #4]
 8000fd2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d103      	bne.n	8000fe6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	1e5a      	subs	r2, r3, #1
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08e      	sub	sp, #56	; 0x38
 8001008:	af04      	add	r7, sp, #16
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001014:	2b00      	cmp	r3, #0
 8001016:	d10a      	bne.n	800102e <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800101c:	f383 8811 	msr	BASEPRI, r3
 8001020:	f3bf 8f6f 	isb	sy
 8001024:	f3bf 8f4f 	dsb	sy
 8001028:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800102a:	bf00      	nop
 800102c:	e7fe      	b.n	800102c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800102e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001030:	2b00      	cmp	r3, #0
 8001032:	d10a      	bne.n	800104a <xTaskCreateStatic+0x46>
	__asm volatile
 8001034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001038:	f383 8811 	msr	BASEPRI, r3
 800103c:	f3bf 8f6f 	isb	sy
 8001040:	f3bf 8f4f 	dsb	sy
 8001044:	61fb      	str	r3, [r7, #28]
}
 8001046:	bf00      	nop
 8001048:	e7fe      	b.n	8001048 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800104a:	23b4      	movs	r3, #180	; 0xb4
 800104c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	2bb4      	cmp	r3, #180	; 0xb4
 8001052:	d00a      	beq.n	800106a <xTaskCreateStatic+0x66>
	__asm volatile
 8001054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001058:	f383 8811 	msr	BASEPRI, r3
 800105c:	f3bf 8f6f 	isb	sy
 8001060:	f3bf 8f4f 	dsb	sy
 8001064:	61bb      	str	r3, [r7, #24]
}
 8001066:	bf00      	nop
 8001068:	e7fe      	b.n	8001068 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800106a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800106c:	2b00      	cmp	r3, #0
 800106e:	d01e      	beq.n	80010ae <xTaskCreateStatic+0xaa>
 8001070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001072:	2b00      	cmp	r3, #0
 8001074:	d01b      	beq.n	80010ae <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800107e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	2202      	movs	r2, #2
 8001084:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001088:	2300      	movs	r3, #0
 800108a:	9303      	str	r3, [sp, #12]
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	9302      	str	r3, [sp, #8]
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	68b9      	ldr	r1, [r7, #8]
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f000 f851 	bl	8001148 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80010a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010a8:	f000 f8e4 	bl	8001274 <prvAddNewTaskToReadyList>
 80010ac:	e001      	b.n	80010b2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80010b2:	697b      	ldr	r3, [r7, #20]
	}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3728      	adds	r7, #40	; 0x28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08c      	sub	sp, #48	; 0x30
 80010c0:	af04      	add	r7, sp, #16
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	4613      	mov	r3, r2
 80010ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fe95 	bl	8001e00 <pvPortMalloc>
 80010d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00e      	beq.n	80010fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80010de:	20b4      	movs	r0, #180	; 0xb4
 80010e0:	f000 fe8e 	bl	8001e00 <pvPortMalloc>
 80010e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	631a      	str	r2, [r3, #48]	; 0x30
 80010f2:	e005      	b.n	8001100 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80010f4:	6978      	ldr	r0, [r7, #20]
 80010f6:	f000 ff47 	bl	8001f88 <vPortFree>
 80010fa:	e001      	b.n	8001100 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d017      	beq.n	8001136 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800110e:	88fa      	ldrh	r2, [r7, #6]
 8001110:	2300      	movs	r3, #0
 8001112:	9303      	str	r3, [sp, #12]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68b9      	ldr	r1, [r7, #8]
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f000 f80f 	bl	8001148 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800112a:	69f8      	ldr	r0, [r7, #28]
 800112c:	f000 f8a2 	bl	8001274 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001130:	2301      	movs	r3, #1
 8001132:	61bb      	str	r3, [r7, #24]
 8001134:	e002      	b.n	800113c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800113c:	69bb      	ldr	r3, [r7, #24]
	}
 800113e:	4618      	mov	r0, r3
 8001140:	3720      	adds	r7, #32
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001160:	3b01      	subs	r3, #1
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	f023 0307 	bic.w	r3, r3, #7
 800116e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	2b00      	cmp	r3, #0
 8001178:	d00a      	beq.n	8001190 <prvInitialiseNewTask+0x48>
	__asm volatile
 800117a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800117e:	f383 8811 	msr	BASEPRI, r3
 8001182:	f3bf 8f6f 	isb	sy
 8001186:	f3bf 8f4f 	dsb	sy
 800118a:	617b      	str	r3, [r7, #20]
}
 800118c:	bf00      	nop
 800118e:	e7fe      	b.n	800118e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
 8001194:	e012      	b.n	80011bc <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	4413      	add	r3, r2
 800119c:	7819      	ldrb	r1, [r3, #0]
 800119e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	4413      	add	r3, r2
 80011a4:	3334      	adds	r3, #52	; 0x34
 80011a6:	460a      	mov	r2, r1
 80011a8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	4413      	add	r3, r2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d006      	beq.n	80011c4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3301      	adds	r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	2b0f      	cmp	r3, #15
 80011c0:	d9e9      	bls.n	8001196 <prvInitialiseNewTask+0x4e>
 80011c2:	e000      	b.n	80011c6 <prvInitialiseNewTask+0x7e>
		{
			break;
 80011c4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80011c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80011ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d0:	2b06      	cmp	r3, #6
 80011d2:	d901      	bls.n	80011d8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80011d4:	2306      	movs	r3, #6
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80011d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80011de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011e2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80011e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e6:	2200      	movs	r2, #0
 80011e8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80011ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ec:	3304      	adds	r3, #4
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fe78 	bl	8000ee4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80011f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011f6:	3318      	adds	r3, #24
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fe73 	bl	8000ee4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80011fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001202:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001206:	f1c3 0207 	rsb	r2, r3, #7
 800120a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800120c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800120e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001212:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001216:	2200      	movs	r2, #0
 8001218:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800121c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800121e:	2200      	movs	r2, #0
 8001220:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001226:	334c      	adds	r3, #76	; 0x4c
 8001228:	2260      	movs	r2, #96	; 0x60
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f000 fff9 	bl	8002224 <memset>
 8001232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001234:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <prvInitialiseNewTask+0x120>)
 8001236:	651a      	str	r2, [r3, #80]	; 0x50
 8001238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800123a:	4a0c      	ldr	r2, [pc, #48]	; (800126c <prvInitialiseNewTask+0x124>)
 800123c:	655a      	str	r2, [r3, #84]	; 0x54
 800123e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001240:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <prvInitialiseNewTask+0x128>)
 8001242:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	68f9      	ldr	r1, [r7, #12]
 8001248:	69b8      	ldr	r0, [r7, #24]
 800124a:	f000 fc29 	bl	8001aa0 <pxPortInitialiseStack>
 800124e:	4602      	mov	r2, r0
 8001250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001252:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800125a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800125e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001260:	bf00      	nop
 8001262:	3720      	adds	r7, #32
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	08002c74 	.word	0x08002c74
 800126c:	08002c94 	.word	0x08002c94
 8001270:	08002c54 	.word	0x08002c54

08001274 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800127c:	f000 fcfe 	bl	8001c7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001280:	4b2a      	ldr	r3, [pc, #168]	; (800132c <prvAddNewTaskToReadyList+0xb8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	4a29      	ldr	r2, [pc, #164]	; (800132c <prvAddNewTaskToReadyList+0xb8>)
 8001288:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800128a:	4b29      	ldr	r3, [pc, #164]	; (8001330 <prvAddNewTaskToReadyList+0xbc>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d109      	bne.n	80012a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001292:	4a27      	ldr	r2, [pc, #156]	; (8001330 <prvAddNewTaskToReadyList+0xbc>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001298:	4b24      	ldr	r3, [pc, #144]	; (800132c <prvAddNewTaskToReadyList+0xb8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d110      	bne.n	80012c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80012a0:	f000 fad2 	bl	8001848 <prvInitialiseTaskLists>
 80012a4:	e00d      	b.n	80012c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80012a6:	4b23      	ldr	r3, [pc, #140]	; (8001334 <prvAddNewTaskToReadyList+0xc0>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d109      	bne.n	80012c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80012ae:	4b20      	ldr	r3, [pc, #128]	; (8001330 <prvAddNewTaskToReadyList+0xbc>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d802      	bhi.n	80012c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80012bc:	4a1c      	ldr	r2, [pc, #112]	; (8001330 <prvAddNewTaskToReadyList+0xbc>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <prvAddNewTaskToReadyList+0xc4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	3301      	adds	r3, #1
 80012c8:	4a1b      	ldr	r2, [pc, #108]	; (8001338 <prvAddNewTaskToReadyList+0xc4>)
 80012ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d0:	2201      	movs	r2, #1
 80012d2:	409a      	lsls	r2, r3
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <prvAddNewTaskToReadyList+0xc8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4313      	orrs	r3, r2
 80012da:	4a18      	ldr	r2, [pc, #96]	; (800133c <prvAddNewTaskToReadyList+0xc8>)
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4a15      	ldr	r2, [pc, #84]	; (8001340 <prvAddNewTaskToReadyList+0xcc>)
 80012ec:	441a      	add	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3304      	adds	r3, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4610      	mov	r0, r2
 80012f6:	f7ff fe01 	bl	8000efc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80012fa:	f000 fcef 	bl	8001cdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <prvAddNewTaskToReadyList+0xc0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00e      	beq.n	8001324 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <prvAddNewTaskToReadyList+0xbc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001310:	429a      	cmp	r2, r3
 8001312:	d207      	bcs.n	8001324 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <prvAddNewTaskToReadyList+0xd0>)
 8001316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	f3bf 8f4f 	dsb	sy
 8001320:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000464 	.word	0x20000464
 8001330:	20000364 	.word	0x20000364
 8001334:	20000470 	.word	0x20000470
 8001338:	20000480 	.word	0x20000480
 800133c:	2000046c 	.word	0x2000046c
 8001340:	20000368 	.word	0x20000368
 8001344:	e000ed04 	.word	0xe000ed04

08001348 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d017      	beq.n	800138a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <vTaskDelay+0x60>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00a      	beq.n	8001378 <vTaskDelay+0x30>
	__asm volatile
 8001362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001366:	f383 8811 	msr	BASEPRI, r3
 800136a:	f3bf 8f6f 	isb	sy
 800136e:	f3bf 8f4f 	dsb	sy
 8001372:	60bb      	str	r3, [r7, #8]
}
 8001374:	bf00      	nop
 8001376:	e7fe      	b.n	8001376 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001378:	f000 f884 	bl	8001484 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800137c:	2100      	movs	r1, #0
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 fb28 	bl	80019d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001384:	f000 f88c 	bl	80014a0 <xTaskResumeAll>
 8001388:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d107      	bne.n	80013a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <vTaskDelay+0x64>)
 8001392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	f3bf 8f4f 	dsb	sy
 800139c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000048c 	.word	0x2000048c
 80013ac:	e000ed04 	.word	0xe000ed04

080013b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80013be:	463a      	mov	r2, r7
 80013c0:	1d39      	adds	r1, r7, #4
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fb7a 	bl	8000ac0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80013cc:	6839      	ldr	r1, [r7, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	9202      	str	r2, [sp, #8]
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	2300      	movs	r3, #0
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2300      	movs	r3, #0
 80013dc:	460a      	mov	r2, r1
 80013de:	4921      	ldr	r1, [pc, #132]	; (8001464 <vTaskStartScheduler+0xb4>)
 80013e0:	4821      	ldr	r0, [pc, #132]	; (8001468 <vTaskStartScheduler+0xb8>)
 80013e2:	f7ff fe0f 	bl	8001004 <xTaskCreateStatic>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4a20      	ldr	r2, [pc, #128]	; (800146c <vTaskStartScheduler+0xbc>)
 80013ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80013ec:	4b1f      	ldr	r3, [pc, #124]	; (800146c <vTaskStartScheduler+0xbc>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d002      	beq.n	80013fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80013f4:	2301      	movs	r3, #1
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	e001      	b.n	80013fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d11b      	bne.n	800143c <vTaskStartScheduler+0x8c>
	__asm volatile
 8001404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001408:	f383 8811 	msr	BASEPRI, r3
 800140c:	f3bf 8f6f 	isb	sy
 8001410:	f3bf 8f4f 	dsb	sy
 8001414:	613b      	str	r3, [r7, #16]
}
 8001416:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <vTaskStartScheduler+0xc0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	334c      	adds	r3, #76	; 0x4c
 800141e:	4a15      	ldr	r2, [pc, #84]	; (8001474 <vTaskStartScheduler+0xc4>)
 8001420:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <vTaskStartScheduler+0xc8>)
 8001424:	f04f 32ff 	mov.w	r2, #4294967295
 8001428:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800142a:	4b14      	ldr	r3, [pc, #80]	; (800147c <vTaskStartScheduler+0xcc>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <vTaskStartScheduler+0xd0>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001436:	f000 fbaf 	bl	8001b98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800143a:	e00e      	b.n	800145a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001442:	d10a      	bne.n	800145a <vTaskStartScheduler+0xaa>
	__asm volatile
 8001444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001448:	f383 8811 	msr	BASEPRI, r3
 800144c:	f3bf 8f6f 	isb	sy
 8001450:	f3bf 8f4f 	dsb	sy
 8001454:	60fb      	str	r3, [r7, #12]
}
 8001456:	bf00      	nop
 8001458:	e7fe      	b.n	8001458 <vTaskStartScheduler+0xa8>
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	08002c4c 	.word	0x08002c4c
 8001468:	08001819 	.word	0x08001819
 800146c:	20000488 	.word	0x20000488
 8001470:	20000364 	.word	0x20000364
 8001474:	20000018 	.word	0x20000018
 8001478:	20000484 	.word	0x20000484
 800147c:	20000470 	.word	0x20000470
 8001480:	20000468 	.word	0x20000468

08001484 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <vTaskSuspendAll+0x18>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	4a03      	ldr	r2, [pc, #12]	; (800149c <vTaskSuspendAll+0x18>)
 8001490:	6013      	str	r3, [r2, #0]
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	2000048c 	.word	0x2000048c

080014a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80014ae:	4b41      	ldr	r3, [pc, #260]	; (80015b4 <xTaskResumeAll+0x114>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10a      	bne.n	80014cc <xTaskResumeAll+0x2c>
	__asm volatile
 80014b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ba:	f383 8811 	msr	BASEPRI, r3
 80014be:	f3bf 8f6f 	isb	sy
 80014c2:	f3bf 8f4f 	dsb	sy
 80014c6:	603b      	str	r3, [r7, #0]
}
 80014c8:	bf00      	nop
 80014ca:	e7fe      	b.n	80014ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80014cc:	f000 fbd6 	bl	8001c7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80014d0:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <xTaskResumeAll+0x114>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	4a37      	ldr	r2, [pc, #220]	; (80015b4 <xTaskResumeAll+0x114>)
 80014d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80014da:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <xTaskResumeAll+0x114>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d161      	bne.n	80015a6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80014e2:	4b35      	ldr	r3, [pc, #212]	; (80015b8 <xTaskResumeAll+0x118>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d05d      	beq.n	80015a6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80014ea:	e02e      	b.n	800154a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80014ec:	4b33      	ldr	r3, [pc, #204]	; (80015bc <xTaskResumeAll+0x11c>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	3318      	adds	r3, #24
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fd5a 	bl	8000fb2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3304      	adds	r3, #4
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fd55 	bl	8000fb2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	2201      	movs	r2, #1
 800150e:	409a      	lsls	r2, r3
 8001510:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <xTaskResumeAll+0x120>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4313      	orrs	r3, r2
 8001516:	4a2a      	ldr	r2, [pc, #168]	; (80015c0 <xTaskResumeAll+0x120>)
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4a27      	ldr	r2, [pc, #156]	; (80015c4 <xTaskResumeAll+0x124>)
 8001528:	441a      	add	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	3304      	adds	r3, #4
 800152e:	4619      	mov	r1, r3
 8001530:	4610      	mov	r0, r2
 8001532:	f7ff fce3 	bl	8000efc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800153a:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <xTaskResumeAll+0x128>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001540:	429a      	cmp	r2, r3
 8001542:	d302      	bcc.n	800154a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8001544:	4b21      	ldr	r3, [pc, #132]	; (80015cc <xTaskResumeAll+0x12c>)
 8001546:	2201      	movs	r2, #1
 8001548:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <xTaskResumeAll+0x11c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1cc      	bne.n	80014ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001558:	f000 fa18 	bl	800198c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800155c:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <xTaskResumeAll+0x130>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d010      	beq.n	800158a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001568:	f000 f836 	bl	80015d8 <xTaskIncrementTick>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d002      	beq.n	8001578 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8001572:	4b16      	ldr	r3, [pc, #88]	; (80015cc <xTaskResumeAll+0x12c>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1f1      	bne.n	8001568 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <xTaskResumeAll+0x130>)
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <xTaskResumeAll+0x12c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d009      	beq.n	80015a6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001592:	2301      	movs	r3, #1
 8001594:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <xTaskResumeAll+0x134>)
 8001598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	f3bf 8f4f 	dsb	sy
 80015a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80015a6:	f000 fb99 	bl	8001cdc <vPortExitCritical>

	return xAlreadyYielded;
 80015aa:	68bb      	ldr	r3, [r7, #8]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2000048c 	.word	0x2000048c
 80015b8:	20000464 	.word	0x20000464
 80015bc:	20000424 	.word	0x20000424
 80015c0:	2000046c 	.word	0x2000046c
 80015c4:	20000368 	.word	0x20000368
 80015c8:	20000364 	.word	0x20000364
 80015cc:	20000478 	.word	0x20000478
 80015d0:	20000474 	.word	0x20000474
 80015d4:	e000ed04 	.word	0xe000ed04

080015d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015e2:	4b51      	ldr	r3, [pc, #324]	; (8001728 <xTaskIncrementTick+0x150>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f040 808d 	bne.w	8001706 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80015ec:	4b4f      	ldr	r3, [pc, #316]	; (800172c <xTaskIncrementTick+0x154>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80015f4:	4a4d      	ldr	r2, [pc, #308]	; (800172c <xTaskIncrementTick+0x154>)
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d120      	bne.n	8001642 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001600:	4b4b      	ldr	r3, [pc, #300]	; (8001730 <xTaskIncrementTick+0x158>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00a      	beq.n	8001620 <xTaskIncrementTick+0x48>
	__asm volatile
 800160a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800160e:	f383 8811 	msr	BASEPRI, r3
 8001612:	f3bf 8f6f 	isb	sy
 8001616:	f3bf 8f4f 	dsb	sy
 800161a:	603b      	str	r3, [r7, #0]
}
 800161c:	bf00      	nop
 800161e:	e7fe      	b.n	800161e <xTaskIncrementTick+0x46>
 8001620:	4b43      	ldr	r3, [pc, #268]	; (8001730 <xTaskIncrementTick+0x158>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b43      	ldr	r3, [pc, #268]	; (8001734 <xTaskIncrementTick+0x15c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a41      	ldr	r2, [pc, #260]	; (8001730 <xTaskIncrementTick+0x158>)
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	4a41      	ldr	r2, [pc, #260]	; (8001734 <xTaskIncrementTick+0x15c>)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b40      	ldr	r3, [pc, #256]	; (8001738 <xTaskIncrementTick+0x160>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	3301      	adds	r3, #1
 800163a:	4a3f      	ldr	r2, [pc, #252]	; (8001738 <xTaskIncrementTick+0x160>)
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	f000 f9a5 	bl	800198c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001642:	4b3e      	ldr	r3, [pc, #248]	; (800173c <xTaskIncrementTick+0x164>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	429a      	cmp	r2, r3
 800164a:	d34d      	bcc.n	80016e8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800164c:	4b38      	ldr	r3, [pc, #224]	; (8001730 <xTaskIncrementTick+0x158>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <xTaskIncrementTick+0x82>
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <xTaskIncrementTick+0x84>
 800165a:	2300      	movs	r3, #0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d004      	beq.n	800166a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001660:	4b36      	ldr	r3, [pc, #216]	; (800173c <xTaskIncrementTick+0x164>)
 8001662:	f04f 32ff 	mov.w	r2, #4294967295
 8001666:	601a      	str	r2, [r3, #0]
					break;
 8001668:	e03e      	b.n	80016e8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800166a:	4b31      	ldr	r3, [pc, #196]	; (8001730 <xTaskIncrementTick+0x158>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	429a      	cmp	r2, r3
 8001680:	d203      	bcs.n	800168a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001682:	4a2e      	ldr	r2, [pc, #184]	; (800173c <xTaskIncrementTick+0x164>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6013      	str	r3, [r2, #0]
						break;
 8001688:	e02e      	b.n	80016e8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	3304      	adds	r3, #4
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fc8f 	bl	8000fb2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	2b00      	cmp	r3, #0
 800169a:	d004      	beq.n	80016a6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	3318      	adds	r3, #24
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fc86 	bl	8000fb2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016aa:	2201      	movs	r2, #1
 80016ac:	409a      	lsls	r2, r3
 80016ae:	4b24      	ldr	r3, [pc, #144]	; (8001740 <xTaskIncrementTick+0x168>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	4a22      	ldr	r2, [pc, #136]	; (8001740 <xTaskIncrementTick+0x168>)
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4a1f      	ldr	r2, [pc, #124]	; (8001744 <xTaskIncrementTick+0x16c>)
 80016c6:	441a      	add	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	3304      	adds	r3, #4
 80016cc:	4619      	mov	r1, r3
 80016ce:	4610      	mov	r0, r2
 80016d0:	f7ff fc14 	bl	8000efc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <xTaskIncrementTick+0x170>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	429a      	cmp	r2, r3
 80016e0:	d3b4      	bcc.n	800164c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80016e2:	2301      	movs	r3, #1
 80016e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016e6:	e7b1      	b.n	800164c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80016e8:	4b17      	ldr	r3, [pc, #92]	; (8001748 <xTaskIncrementTick+0x170>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ee:	4915      	ldr	r1, [pc, #84]	; (8001744 <xTaskIncrementTick+0x16c>)
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d907      	bls.n	8001710 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8001700:	2301      	movs	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	e004      	b.n	8001710 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <xTaskIncrementTick+0x174>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	3301      	adds	r3, #1
 800170c:	4a0f      	ldr	r2, [pc, #60]	; (800174c <xTaskIncrementTick+0x174>)
 800170e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <xTaskIncrementTick+0x178>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8001718:	2301      	movs	r3, #1
 800171a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800171c:	697b      	ldr	r3, [r7, #20]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	2000048c 	.word	0x2000048c
 800172c:	20000468 	.word	0x20000468
 8001730:	2000041c 	.word	0x2000041c
 8001734:	20000420 	.word	0x20000420
 8001738:	2000047c 	.word	0x2000047c
 800173c:	20000484 	.word	0x20000484
 8001740:	2000046c 	.word	0x2000046c
 8001744:	20000368 	.word	0x20000368
 8001748:	20000364 	.word	0x20000364
 800174c:	20000474 	.word	0x20000474
 8001750:	20000478 	.word	0x20000478

08001754 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800175a:	4b29      	ldr	r3, [pc, #164]	; (8001800 <vTaskSwitchContext+0xac>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001762:	4b28      	ldr	r3, [pc, #160]	; (8001804 <vTaskSwitchContext+0xb0>)
 8001764:	2201      	movs	r2, #1
 8001766:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001768:	e044      	b.n	80017f4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800176a:	4b26      	ldr	r3, [pc, #152]	; (8001804 <vTaskSwitchContext+0xb0>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001770:	4b25      	ldr	r3, [pc, #148]	; (8001808 <vTaskSwitchContext+0xb4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	fab3 f383 	clz	r3, r3
 800177c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800177e:	7afb      	ldrb	r3, [r7, #11]
 8001780:	f1c3 031f 	rsb	r3, r3, #31
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	4921      	ldr	r1, [pc, #132]	; (800180c <vTaskSwitchContext+0xb8>)
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	440b      	add	r3, r1
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10a      	bne.n	80017b0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800179a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800179e:	f383 8811 	msr	BASEPRI, r3
 80017a2:	f3bf 8f6f 	isb	sy
 80017a6:	f3bf 8f4f 	dsb	sy
 80017aa:	607b      	str	r3, [r7, #4]
}
 80017ac:	bf00      	nop
 80017ae:	e7fe      	b.n	80017ae <vTaskSwitchContext+0x5a>
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4a14      	ldr	r2, [pc, #80]	; (800180c <vTaskSwitchContext+0xb8>)
 80017bc:	4413      	add	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	3308      	adds	r3, #8
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d104      	bne.n	80017e0 <vTaskSwitchContext+0x8c>
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <vTaskSwitchContext+0xbc>)
 80017e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <vTaskSwitchContext+0xbc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	334c      	adds	r3, #76	; 0x4c
 80017f0:	4a08      	ldr	r2, [pc, #32]	; (8001814 <vTaskSwitchContext+0xc0>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	371c      	adds	r7, #28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	2000048c 	.word	0x2000048c
 8001804:	20000478 	.word	0x20000478
 8001808:	2000046c 	.word	0x2000046c
 800180c:	20000368 	.word	0x20000368
 8001810:	20000364 	.word	0x20000364
 8001814:	20000018 	.word	0x20000018

08001818 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001820:	f000 f852 	bl	80018c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <prvIdleTask+0x28>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d9f9      	bls.n	8001820 <prvIdleTask+0x8>
			{
				taskYIELD();
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <prvIdleTask+0x2c>)
 800182e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	f3bf 8f4f 	dsb	sy
 8001838:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800183c:	e7f0      	b.n	8001820 <prvIdleTask+0x8>
 800183e:	bf00      	nop
 8001840:	20000368 	.word	0x20000368
 8001844:	e000ed04 	.word	0xe000ed04

08001848 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	e00c      	b.n	800186e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <prvInitialiseTaskLists+0x60>)
 8001860:	4413      	add	r3, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fb1f 	bl	8000ea6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3301      	adds	r3, #1
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b06      	cmp	r3, #6
 8001872:	d9ef      	bls.n	8001854 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001874:	480d      	ldr	r0, [pc, #52]	; (80018ac <prvInitialiseTaskLists+0x64>)
 8001876:	f7ff fb16 	bl	8000ea6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800187a:	480d      	ldr	r0, [pc, #52]	; (80018b0 <prvInitialiseTaskLists+0x68>)
 800187c:	f7ff fb13 	bl	8000ea6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001880:	480c      	ldr	r0, [pc, #48]	; (80018b4 <prvInitialiseTaskLists+0x6c>)
 8001882:	f7ff fb10 	bl	8000ea6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001886:	480c      	ldr	r0, [pc, #48]	; (80018b8 <prvInitialiseTaskLists+0x70>)
 8001888:	f7ff fb0d 	bl	8000ea6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800188c:	480b      	ldr	r0, [pc, #44]	; (80018bc <prvInitialiseTaskLists+0x74>)
 800188e:	f7ff fb0a 	bl	8000ea6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <prvInitialiseTaskLists+0x78>)
 8001894:	4a05      	ldr	r2, [pc, #20]	; (80018ac <prvInitialiseTaskLists+0x64>)
 8001896:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <prvInitialiseTaskLists+0x7c>)
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <prvInitialiseTaskLists+0x68>)
 800189c:	601a      	str	r2, [r3, #0]
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000368 	.word	0x20000368
 80018ac:	200003f4 	.word	0x200003f4
 80018b0:	20000408 	.word	0x20000408
 80018b4:	20000424 	.word	0x20000424
 80018b8:	20000438 	.word	0x20000438
 80018bc:	20000450 	.word	0x20000450
 80018c0:	2000041c 	.word	0x2000041c
 80018c4:	20000420 	.word	0x20000420

080018c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80018ce:	e019      	b.n	8001904 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80018d0:	f000 f9d4 	bl	8001c7c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80018d4:	4b10      	ldr	r3, [pc, #64]	; (8001918 <prvCheckTasksWaitingTermination+0x50>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3304      	adds	r3, #4
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fb66 	bl	8000fb2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <prvCheckTasksWaitingTermination+0x54>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	4a0b      	ldr	r2, [pc, #44]	; (800191c <prvCheckTasksWaitingTermination+0x54>)
 80018ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <prvCheckTasksWaitingTermination+0x58>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <prvCheckTasksWaitingTermination+0x58>)
 80018f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80018fa:	f000 f9ef 	bl	8001cdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f810 	bl	8001924 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <prvCheckTasksWaitingTermination+0x58>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1e1      	bne.n	80018d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000438 	.word	0x20000438
 800191c:	20000464 	.word	0x20000464
 8001920:	2000044c 	.word	0x2000044c

08001924 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	334c      	adds	r3, #76	; 0x4c
 8001930:	4618      	mov	r0, r3
 8001932:	f000 fd21 	bl	8002378 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800193c:	2b00      	cmp	r3, #0
 800193e:	d108      	bne.n	8001952 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	4618      	mov	r0, r3
 8001946:	f000 fb1f 	bl	8001f88 <vPortFree>
				vPortFree( pxTCB );
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fb1c 	bl	8001f88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001950:	e018      	b.n	8001984 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8001958:	2b01      	cmp	r3, #1
 800195a:	d103      	bne.n	8001964 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 fb13 	bl	8001f88 <vPortFree>
	}
 8001962:	e00f      	b.n	8001984 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800196a:	2b02      	cmp	r3, #2
 800196c:	d00a      	beq.n	8001984 <prvDeleteTCB+0x60>
	__asm volatile
 800196e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001972:	f383 8811 	msr	BASEPRI, r3
 8001976:	f3bf 8f6f 	isb	sy
 800197a:	f3bf 8f4f 	dsb	sy
 800197e:	60fb      	str	r3, [r7, #12]
}
 8001980:	bf00      	nop
 8001982:	e7fe      	b.n	8001982 <prvDeleteTCB+0x5e>
	}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <prvResetNextTaskUnblockTime+0x40>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <prvResetNextTaskUnblockTime+0x14>
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <prvResetNextTaskUnblockTime+0x16>
 80019a0:	2300      	movs	r3, #0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d004      	beq.n	80019b0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <prvResetNextTaskUnblockTime+0x44>)
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80019ae:	e008      	b.n	80019c2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <prvResetNextTaskUnblockTime+0x40>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <prvResetNextTaskUnblockTime+0x44>)
 80019c0:	6013      	str	r3, [r2, #0]
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	2000041c 	.word	0x2000041c
 80019d0:	20000484 	.word	0x20000484

080019d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80019de:	4b29      	ldr	r3, [pc, #164]	; (8001a84 <prvAddCurrentTaskToDelayedList+0xb0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80019e4:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <prvAddCurrentTaskToDelayedList+0xb4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3304      	adds	r3, #4
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fae1 	bl	8000fb2 <uxListRemove>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10b      	bne.n	8001a0e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80019f6:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <prvAddCurrentTaskToDelayedList+0xb4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	2201      	movs	r2, #1
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	4a20      	ldr	r2, [pc, #128]	; (8001a8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8001a0c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a14:	d10a      	bne.n	8001a2c <prvAddCurrentTaskToDelayedList+0x58>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d007      	beq.n	8001a2c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	3304      	adds	r3, #4
 8001a22:	4619      	mov	r1, r3
 8001a24:	481a      	ldr	r0, [pc, #104]	; (8001a90 <prvAddCurrentTaskToDelayedList+0xbc>)
 8001a26:	f7ff fa69 	bl	8000efc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001a2a:	e026      	b.n	8001a7a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001a3c:	68ba      	ldr	r2, [r7, #8]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d209      	bcs.n	8001a58 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <prvAddCurrentTaskToDelayedList+0xc0>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4610      	mov	r0, r2
 8001a52:	f7ff fa76 	bl	8000f42 <vListInsert>
}
 8001a56:	e010      	b.n	8001a7a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <prvAddCurrentTaskToDelayedList+0xc4>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	3304      	adds	r3, #4
 8001a62:	4619      	mov	r1, r3
 8001a64:	4610      	mov	r0, r2
 8001a66:	f7ff fa6c 	bl	8000f42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d202      	bcs.n	8001a7a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8001a74:	4a09      	ldr	r2, [pc, #36]	; (8001a9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	6013      	str	r3, [r2, #0]
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000468 	.word	0x20000468
 8001a88:	20000364 	.word	0x20000364
 8001a8c:	2000046c 	.word	0x2000046c
 8001a90:	20000450 	.word	0x20000450
 8001a94:	20000420 	.word	0x20000420
 8001a98:	2000041c 	.word	0x2000041c
 8001a9c:	20000484 	.word	0x20000484

08001aa0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3b04      	subs	r3, #4
 8001ab0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ab8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3b04      	subs	r3, #4
 8001abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	f023 0201 	bic.w	r2, r3, #1
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3b04      	subs	r3, #4
 8001ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001ad0:	4a08      	ldr	r2, [pc, #32]	; (8001af4 <pxPortInitialiseStack+0x54>)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3b14      	subs	r3, #20
 8001ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	3b20      	subs	r3, #32
 8001ae6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	08001af9 	.word	0x08001af9

08001af8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <prvTaskExitError+0x54>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0a:	d00a      	beq.n	8001b22 <prvTaskExitError+0x2a>
	__asm volatile
 8001b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b10:	f383 8811 	msr	BASEPRI, r3
 8001b14:	f3bf 8f6f 	isb	sy
 8001b18:	f3bf 8f4f 	dsb	sy
 8001b1c:	60fb      	str	r3, [r7, #12]
}
 8001b1e:	bf00      	nop
 8001b20:	e7fe      	b.n	8001b20 <prvTaskExitError+0x28>
	__asm volatile
 8001b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b26:	f383 8811 	msr	BASEPRI, r3
 8001b2a:	f3bf 8f6f 	isb	sy
 8001b2e:	f3bf 8f4f 	dsb	sy
 8001b32:	60bb      	str	r3, [r7, #8]
}
 8001b34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001b36:	bf00      	nop
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0fc      	beq.n	8001b38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001b3e:	bf00      	nop
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000014 	.word	0x20000014

08001b50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <pxCurrentTCBConst2>)
 8001b52:	6819      	ldr	r1, [r3, #0]
 8001b54:	6808      	ldr	r0, [r1, #0]
 8001b56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001b5a:	f380 8809 	msr	PSP, r0
 8001b5e:	f3bf 8f6f 	isb	sy
 8001b62:	f04f 0000 	mov.w	r0, #0
 8001b66:	f380 8811 	msr	BASEPRI, r0
 8001b6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8001b6e:	4770      	bx	lr

08001b70 <pxCurrentTCBConst2>:
 8001b70:	20000364 	.word	0x20000364
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop

08001b78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001b78:	4806      	ldr	r0, [pc, #24]	; (8001b94 <prvPortStartFirstTask+0x1c>)
 8001b7a:	6800      	ldr	r0, [r0, #0]
 8001b7c:	6800      	ldr	r0, [r0, #0]
 8001b7e:	f380 8808 	msr	MSP, r0
 8001b82:	b662      	cpsie	i
 8001b84:	b661      	cpsie	f
 8001b86:	f3bf 8f4f 	dsb	sy
 8001b8a:	f3bf 8f6f 	isb	sy
 8001b8e:	df00      	svc	0
 8001b90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001b92:	bf00      	nop
 8001b94:	e000ed08 	.word	0xe000ed08

08001b98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001b9e:	4b32      	ldr	r3, [pc, #200]	; (8001c68 <xPortStartScheduler+0xd0>)
 8001ba0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	22ff      	movs	r2, #255	; 0xff
 8001bae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <xPortStartScheduler+0xd4>)
 8001bc4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001bc6:	4b2a      	ldr	r3, [pc, #168]	; (8001c70 <xPortStartScheduler+0xd8>)
 8001bc8:	2207      	movs	r2, #7
 8001bca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001bcc:	e009      	b.n	8001be2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8001bce:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <xPortStartScheduler+0xd8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	4a26      	ldr	r2, [pc, #152]	; (8001c70 <xPortStartScheduler+0xd8>)
 8001bd6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bea:	2b80      	cmp	r3, #128	; 0x80
 8001bec:	d0ef      	beq.n	8001bce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001bee:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <xPortStartScheduler+0xd8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f1c3 0307 	rsb	r3, r3, #7
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d00a      	beq.n	8001c10 <xPortStartScheduler+0x78>
	__asm volatile
 8001bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bfe:	f383 8811 	msr	BASEPRI, r3
 8001c02:	f3bf 8f6f 	isb	sy
 8001c06:	f3bf 8f4f 	dsb	sy
 8001c0a:	60bb      	str	r3, [r7, #8]
}
 8001c0c:	bf00      	nop
 8001c0e:	e7fe      	b.n	8001c0e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001c10:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <xPortStartScheduler+0xd8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	021b      	lsls	r3, r3, #8
 8001c16:	4a16      	ldr	r2, [pc, #88]	; (8001c70 <xPortStartScheduler+0xd8>)
 8001c18:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <xPortStartScheduler+0xd8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c22:	4a13      	ldr	r2, [pc, #76]	; (8001c70 <xPortStartScheduler+0xd8>)
 8001c24:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <xPortStartScheduler+0xdc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a10      	ldr	r2, [pc, #64]	; (8001c74 <xPortStartScheduler+0xdc>)
 8001c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <xPortStartScheduler+0xdc>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a0d      	ldr	r2, [pc, #52]	; (8001c74 <xPortStartScheduler+0xdc>)
 8001c40:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001c44:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001c46:	f000 f8b9 	bl	8001dbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <xPortStartScheduler+0xe0>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001c50:	f7ff ff92 	bl	8001b78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001c54:	f7ff fd7e 	bl	8001754 <vTaskSwitchContext>
	prvTaskExitError();
 8001c58:	f7ff ff4e 	bl	8001af8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	e000e400 	.word	0xe000e400
 8001c6c:	20000490 	.word	0x20000490
 8001c70:	20000494 	.word	0x20000494
 8001c74:	e000ed20 	.word	0xe000ed20
 8001c78:	20000014 	.word	0x20000014

08001c7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
	__asm volatile
 8001c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c86:	f383 8811 	msr	BASEPRI, r3
 8001c8a:	f3bf 8f6f 	isb	sy
 8001c8e:	f3bf 8f4f 	dsb	sy
 8001c92:	607b      	str	r3, [r7, #4]
}
 8001c94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001c96:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <vPortEnterCritical+0x58>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	4a0d      	ldr	r2, [pc, #52]	; (8001cd4 <vPortEnterCritical+0x58>)
 8001c9e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <vPortEnterCritical+0x58>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d10f      	bne.n	8001cc8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <vPortEnterCritical+0x5c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00a      	beq.n	8001cc8 <vPortEnterCritical+0x4c>
	__asm volatile
 8001cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb6:	f383 8811 	msr	BASEPRI, r3
 8001cba:	f3bf 8f6f 	isb	sy
 8001cbe:	f3bf 8f4f 	dsb	sy
 8001cc2:	603b      	str	r3, [r7, #0]
}
 8001cc4:	bf00      	nop
 8001cc6:	e7fe      	b.n	8001cc6 <vPortEnterCritical+0x4a>
	}
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000014 	.word	0x20000014
 8001cd8:	e000ed04 	.word	0xe000ed04

08001cdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <vPortExitCritical+0x4c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10a      	bne.n	8001d00 <vPortExitCritical+0x24>
	__asm volatile
 8001cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cee:	f383 8811 	msr	BASEPRI, r3
 8001cf2:	f3bf 8f6f 	isb	sy
 8001cf6:	f3bf 8f4f 	dsb	sy
 8001cfa:	607b      	str	r3, [r7, #4]
}
 8001cfc:	bf00      	nop
 8001cfe:	e7fe      	b.n	8001cfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <vPortExitCritical+0x4c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	4a08      	ldr	r2, [pc, #32]	; (8001d28 <vPortExitCritical+0x4c>)
 8001d08:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <vPortExitCritical+0x4c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d105      	bne.n	8001d1e <vPortExitCritical+0x42>
 8001d12:	2300      	movs	r3, #0
 8001d14:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001d1c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	20000014 	.word	0x20000014
 8001d2c:	00000000 	.word	0x00000000

08001d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001d30:	f3ef 8009 	mrs	r0, PSP
 8001d34:	f3bf 8f6f 	isb	sy
 8001d38:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <pxCurrentTCBConst>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001d40:	6010      	str	r0, [r2, #0]
 8001d42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001d46:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001d4a:	f380 8811 	msr	BASEPRI, r0
 8001d4e:	f7ff fd01 	bl	8001754 <vTaskSwitchContext>
 8001d52:	f04f 0000 	mov.w	r0, #0
 8001d56:	f380 8811 	msr	BASEPRI, r0
 8001d5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001d5e:	6819      	ldr	r1, [r3, #0]
 8001d60:	6808      	ldr	r0, [r1, #0]
 8001d62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001d66:	f380 8809 	msr	PSP, r0
 8001d6a:	f3bf 8f6f 	isb	sy
 8001d6e:	4770      	bx	lr

08001d70 <pxCurrentTCBConst>:
 8001d70:	20000364 	.word	0x20000364
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop

08001d78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8001d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d82:	f383 8811 	msr	BASEPRI, r3
 8001d86:	f3bf 8f6f 	isb	sy
 8001d8a:	f3bf 8f4f 	dsb	sy
 8001d8e:	607b      	str	r3, [r7, #4]
}
 8001d90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001d92:	f7ff fc21 	bl	80015d8 <xTaskIncrementTick>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <SysTick_Handler+0x40>)
 8001d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	2300      	movs	r3, #0
 8001da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	f383 8811 	msr	BASEPRI, r3
}
 8001dae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	e000ed04 	.word	0xe000ed04

08001dbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <vPortSetupTimerInterrupt+0x30>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <vPortSetupTimerInterrupt+0x34>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001dcc:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <vPortSetupTimerInterrupt+0x38>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <vPortSetupTimerInterrupt+0x3c>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	099b      	lsrs	r3, r3, #6
 8001dd8:	4a08      	ldr	r2, [pc, #32]	; (8001dfc <vPortSetupTimerInterrupt+0x40>)
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001dde:	4b03      	ldr	r3, [pc, #12]	; (8001dec <vPortSetupTimerInterrupt+0x30>)
 8001de0:	2207      	movs	r2, #7
 8001de2:	601a      	str	r2, [r3, #0]
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	e000e010 	.word	0xe000e010
 8001df0:	e000e018 	.word	0xe000e018
 8001df4:	2000000c 	.word	0x2000000c
 8001df8:	10624dd3 	.word	0x10624dd3
 8001dfc:	e000e014 	.word	0xe000e014

08001e00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001e0c:	f7ff fb3a 	bl	8001484 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001e10:	4b58      	ldr	r3, [pc, #352]	; (8001f74 <pvPortMalloc+0x174>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001e18:	f000 f910 	bl	800203c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001e1c:	4b56      	ldr	r3, [pc, #344]	; (8001f78 <pvPortMalloc+0x178>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f040 808e 	bne.w	8001f46 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d01d      	beq.n	8001e6c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8001e30:	2208      	movs	r2, #8
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d014      	beq.n	8001e6c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f023 0307 	bic.w	r3, r3, #7
 8001e48:	3308      	adds	r3, #8
 8001e4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00a      	beq.n	8001e6c <pvPortMalloc+0x6c>
	__asm volatile
 8001e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5a:	f383 8811 	msr	BASEPRI, r3
 8001e5e:	f3bf 8f6f 	isb	sy
 8001e62:	f3bf 8f4f 	dsb	sy
 8001e66:	617b      	str	r3, [r7, #20]
}
 8001e68:	bf00      	nop
 8001e6a:	e7fe      	b.n	8001e6a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d069      	beq.n	8001f46 <pvPortMalloc+0x146>
 8001e72:	4b42      	ldr	r3, [pc, #264]	; (8001f7c <pvPortMalloc+0x17c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d864      	bhi.n	8001f46 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001e7c:	4b40      	ldr	r3, [pc, #256]	; (8001f80 <pvPortMalloc+0x180>)
 8001e7e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001e80:	4b3f      	ldr	r3, [pc, #252]	; (8001f80 <pvPortMalloc+0x180>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001e86:	e004      	b.n	8001e92 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d903      	bls.n	8001ea4 <pvPortMalloc+0xa4>
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f1      	bne.n	8001e88 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001ea4:	4b33      	ldr	r3, [pc, #204]	; (8001f74 <pvPortMalloc+0x174>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d04b      	beq.n	8001f46 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2208      	movs	r2, #8
 8001eb4:	4413      	add	r3, r2
 8001eb6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	1ad2      	subs	r2, r2, r3
 8001ec8:	2308      	movs	r3, #8
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d91f      	bls.n	8001f10 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <pvPortMalloc+0xf8>
	__asm volatile
 8001ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee6:	f383 8811 	msr	BASEPRI, r3
 8001eea:	f3bf 8f6f 	isb	sy
 8001eee:	f3bf 8f4f 	dsb	sy
 8001ef2:	613b      	str	r3, [r7, #16]
}
 8001ef4:	bf00      	nop
 8001ef6:	e7fe      	b.n	8001ef6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	1ad2      	subs	r2, r2, r3
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001f0a:	69b8      	ldr	r0, [r7, #24]
 8001f0c:	f000 f8f8 	bl	8002100 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001f10:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <pvPortMalloc+0x17c>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	4a18      	ldr	r2, [pc, #96]	; (8001f7c <pvPortMalloc+0x17c>)
 8001f1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001f1e:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <pvPortMalloc+0x17c>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <pvPortMalloc+0x184>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d203      	bcs.n	8001f32 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001f2a:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <pvPortMalloc+0x17c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a15      	ldr	r2, [pc, #84]	; (8001f84 <pvPortMalloc+0x184>)
 8001f30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <pvPortMalloc+0x178>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001f46:	f7ff faab 	bl	80014a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00a      	beq.n	8001f6a <pvPortMalloc+0x16a>
	__asm volatile
 8001f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f58:	f383 8811 	msr	BASEPRI, r3
 8001f5c:	f3bf 8f6f 	isb	sy
 8001f60:	f3bf 8f4f 	dsb	sy
 8001f64:	60fb      	str	r3, [r7, #12]
}
 8001f66:	bf00      	nop
 8001f68:	e7fe      	b.n	8001f68 <pvPortMalloc+0x168>
	return pvReturn;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3728      	adds	r7, #40	; 0x28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200010a0 	.word	0x200010a0
 8001f78:	200010ac 	.word	0x200010ac
 8001f7c:	200010a4 	.word	0x200010a4
 8001f80:	20001098 	.word	0x20001098
 8001f84:	200010a8 	.word	0x200010a8

08001f88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d048      	beq.n	800202c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001f9a:	2308      	movs	r3, #8
 8001f9c:	425b      	negs	r3, r3
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	4b21      	ldr	r3, [pc, #132]	; (8002034 <vPortFree+0xac>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10a      	bne.n	8001fcc <vPortFree+0x44>
	__asm volatile
 8001fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fba:	f383 8811 	msr	BASEPRI, r3
 8001fbe:	f3bf 8f6f 	isb	sy
 8001fc2:	f3bf 8f4f 	dsb	sy
 8001fc6:	60fb      	str	r3, [r7, #12]
}
 8001fc8:	bf00      	nop
 8001fca:	e7fe      	b.n	8001fca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00a      	beq.n	8001fea <vPortFree+0x62>
	__asm volatile
 8001fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd8:	f383 8811 	msr	BASEPRI, r3
 8001fdc:	f3bf 8f6f 	isb	sy
 8001fe0:	f3bf 8f4f 	dsb	sy
 8001fe4:	60bb      	str	r3, [r7, #8]
}
 8001fe6:	bf00      	nop
 8001fe8:	e7fe      	b.n	8001fe8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <vPortFree+0xac>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d019      	beq.n	800202c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d115      	bne.n	800202c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <vPortFree+0xac>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	43db      	mvns	r3, r3
 800200a:	401a      	ands	r2, r3
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002010:	f7ff fa38 	bl	8001484 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <vPortFree+0xb0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4413      	add	r3, r2
 800201e:	4a06      	ldr	r2, [pc, #24]	; (8002038 <vPortFree+0xb0>)
 8002020:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002022:	6938      	ldr	r0, [r7, #16]
 8002024:	f000 f86c 	bl	8002100 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002028:	f7ff fa3a 	bl	80014a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800202c:	bf00      	nop
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	200010ac 	.word	0x200010ac
 8002038:	200010a4 	.word	0x200010a4

0800203c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002042:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002046:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002048:	4b27      	ldr	r3, [pc, #156]	; (80020e8 <prvHeapInit+0xac>)
 800204a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00c      	beq.n	8002070 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3307      	adds	r3, #7
 800205a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f023 0307 	bic.w	r3, r3, #7
 8002062:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	4a1f      	ldr	r2, [pc, #124]	; (80020e8 <prvHeapInit+0xac>)
 800206c:	4413      	add	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002074:	4a1d      	ldr	r2, [pc, #116]	; (80020ec <prvHeapInit+0xb0>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800207a:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <prvHeapInit+0xb0>)
 800207c:	2200      	movs	r2, #0
 800207e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	4413      	add	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002088:	2208      	movs	r2, #8
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1a9b      	subs	r3, r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f023 0307 	bic.w	r3, r3, #7
 8002096:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4a15      	ldr	r2, [pc, #84]	; (80020f0 <prvHeapInit+0xb4>)
 800209c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800209e:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <prvHeapInit+0xb4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2200      	movs	r2, #0
 80020a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80020a6:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <prvHeapInit+0xb4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	1ad2      	subs	r2, r2, r3
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <prvHeapInit+0xb4>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <prvHeapInit+0xb8>)
 80020ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4a09      	ldr	r2, [pc, #36]	; (80020f8 <prvHeapInit+0xbc>)
 80020d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80020d4:	4b09      	ldr	r3, [pc, #36]	; (80020fc <prvHeapInit+0xc0>)
 80020d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80020da:	601a      	str	r2, [r3, #0]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000498 	.word	0x20000498
 80020ec:	20001098 	.word	0x20001098
 80020f0:	200010a0 	.word	0x200010a0
 80020f4:	200010a8 	.word	0x200010a8
 80020f8:	200010a4 	.word	0x200010a4
 80020fc:	200010ac 	.word	0x200010ac

08002100 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002108:	4b27      	ldr	r3, [pc, #156]	; (80021a8 <prvInsertBlockIntoFreeList+0xa8>)
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	e002      	b.n	8002114 <prvInsertBlockIntoFreeList+0x14>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	429a      	cmp	r2, r3
 800211c:	d8f7      	bhi.n	800210e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	4413      	add	r3, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	429a      	cmp	r2, r3
 800212e:	d108      	bne.n	8002142 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	441a      	add	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	441a      	add	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d118      	bne.n	8002188 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4b14      	ldr	r3, [pc, #80]	; (80021ac <prvInsertBlockIntoFreeList+0xac>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d00d      	beq.n	800217e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	441a      	add	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	e008      	b.n	8002190 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800217e:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <prvInsertBlockIntoFreeList+0xac>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	e003      	b.n	8002190 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	429a      	cmp	r2, r3
 8002196:	d002      	beq.n	800219e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800219e:	bf00      	nop
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	20001098 	.word	0x20001098
 80021ac:	200010a0 	.word	0x200010a0

080021b0 <__errno>:
 80021b0:	4b01      	ldr	r3, [pc, #4]	; (80021b8 <__errno+0x8>)
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000018 	.word	0x20000018

080021bc <__libc_init_array>:
 80021bc:	b570      	push	{r4, r5, r6, lr}
 80021be:	2600      	movs	r6, #0
 80021c0:	4d0c      	ldr	r5, [pc, #48]	; (80021f4 <__libc_init_array+0x38>)
 80021c2:	4c0d      	ldr	r4, [pc, #52]	; (80021f8 <__libc_init_array+0x3c>)
 80021c4:	1b64      	subs	r4, r4, r5
 80021c6:	10a4      	asrs	r4, r4, #2
 80021c8:	42a6      	cmp	r6, r4
 80021ca:	d109      	bne.n	80021e0 <__libc_init_array+0x24>
 80021cc:	f000 fd06 	bl	8002bdc <_init>
 80021d0:	2600      	movs	r6, #0
 80021d2:	4d0a      	ldr	r5, [pc, #40]	; (80021fc <__libc_init_array+0x40>)
 80021d4:	4c0a      	ldr	r4, [pc, #40]	; (8002200 <__libc_init_array+0x44>)
 80021d6:	1b64      	subs	r4, r4, r5
 80021d8:	10a4      	asrs	r4, r4, #2
 80021da:	42a6      	cmp	r6, r4
 80021dc:	d105      	bne.n	80021ea <__libc_init_array+0x2e>
 80021de:	bd70      	pop	{r4, r5, r6, pc}
 80021e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80021e4:	4798      	blx	r3
 80021e6:	3601      	adds	r6, #1
 80021e8:	e7ee      	b.n	80021c8 <__libc_init_array+0xc>
 80021ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80021ee:	4798      	blx	r3
 80021f0:	3601      	adds	r6, #1
 80021f2:	e7f2      	b.n	80021da <__libc_init_array+0x1e>
 80021f4:	08002ce8 	.word	0x08002ce8
 80021f8:	08002ce8 	.word	0x08002ce8
 80021fc:	08002ce8 	.word	0x08002ce8
 8002200:	08002cec 	.word	0x08002cec

08002204 <__retarget_lock_acquire_recursive>:
 8002204:	4770      	bx	lr

08002206 <__retarget_lock_release_recursive>:
 8002206:	4770      	bx	lr

08002208 <memcpy>:
 8002208:	440a      	add	r2, r1
 800220a:	4291      	cmp	r1, r2
 800220c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002210:	d100      	bne.n	8002214 <memcpy+0xc>
 8002212:	4770      	bx	lr
 8002214:	b510      	push	{r4, lr}
 8002216:	f811 4b01 	ldrb.w	r4, [r1], #1
 800221a:	4291      	cmp	r1, r2
 800221c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002220:	d1f9      	bne.n	8002216 <memcpy+0xe>
 8002222:	bd10      	pop	{r4, pc}

08002224 <memset>:
 8002224:	4603      	mov	r3, r0
 8002226:	4402      	add	r2, r0
 8002228:	4293      	cmp	r3, r2
 800222a:	d100      	bne.n	800222e <memset+0xa>
 800222c:	4770      	bx	lr
 800222e:	f803 1b01 	strb.w	r1, [r3], #1
 8002232:	e7f9      	b.n	8002228 <memset+0x4>

08002234 <sbrk_aligned>:
 8002234:	b570      	push	{r4, r5, r6, lr}
 8002236:	4e0e      	ldr	r6, [pc, #56]	; (8002270 <sbrk_aligned+0x3c>)
 8002238:	460c      	mov	r4, r1
 800223a:	6831      	ldr	r1, [r6, #0]
 800223c:	4605      	mov	r5, r0
 800223e:	b911      	cbnz	r1, 8002246 <sbrk_aligned+0x12>
 8002240:	f000 f8f6 	bl	8002430 <_sbrk_r>
 8002244:	6030      	str	r0, [r6, #0]
 8002246:	4621      	mov	r1, r4
 8002248:	4628      	mov	r0, r5
 800224a:	f000 f8f1 	bl	8002430 <_sbrk_r>
 800224e:	1c43      	adds	r3, r0, #1
 8002250:	d00a      	beq.n	8002268 <sbrk_aligned+0x34>
 8002252:	1cc4      	adds	r4, r0, #3
 8002254:	f024 0403 	bic.w	r4, r4, #3
 8002258:	42a0      	cmp	r0, r4
 800225a:	d007      	beq.n	800226c <sbrk_aligned+0x38>
 800225c:	1a21      	subs	r1, r4, r0
 800225e:	4628      	mov	r0, r5
 8002260:	f000 f8e6 	bl	8002430 <_sbrk_r>
 8002264:	3001      	adds	r0, #1
 8002266:	d101      	bne.n	800226c <sbrk_aligned+0x38>
 8002268:	f04f 34ff 	mov.w	r4, #4294967295
 800226c:	4620      	mov	r0, r4
 800226e:	bd70      	pop	{r4, r5, r6, pc}
 8002270:	200010b8 	.word	0x200010b8

08002274 <_malloc_r>:
 8002274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002278:	1ccd      	adds	r5, r1, #3
 800227a:	f025 0503 	bic.w	r5, r5, #3
 800227e:	3508      	adds	r5, #8
 8002280:	2d0c      	cmp	r5, #12
 8002282:	bf38      	it	cc
 8002284:	250c      	movcc	r5, #12
 8002286:	2d00      	cmp	r5, #0
 8002288:	4607      	mov	r7, r0
 800228a:	db01      	blt.n	8002290 <_malloc_r+0x1c>
 800228c:	42a9      	cmp	r1, r5
 800228e:	d905      	bls.n	800229c <_malloc_r+0x28>
 8002290:	230c      	movs	r3, #12
 8002292:	2600      	movs	r6, #0
 8002294:	603b      	str	r3, [r7, #0]
 8002296:	4630      	mov	r0, r6
 8002298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800229c:	4e2e      	ldr	r6, [pc, #184]	; (8002358 <_malloc_r+0xe4>)
 800229e:	f000 f8f7 	bl	8002490 <__malloc_lock>
 80022a2:	6833      	ldr	r3, [r6, #0]
 80022a4:	461c      	mov	r4, r3
 80022a6:	bb34      	cbnz	r4, 80022f6 <_malloc_r+0x82>
 80022a8:	4629      	mov	r1, r5
 80022aa:	4638      	mov	r0, r7
 80022ac:	f7ff ffc2 	bl	8002234 <sbrk_aligned>
 80022b0:	1c43      	adds	r3, r0, #1
 80022b2:	4604      	mov	r4, r0
 80022b4:	d14d      	bne.n	8002352 <_malloc_r+0xde>
 80022b6:	6834      	ldr	r4, [r6, #0]
 80022b8:	4626      	mov	r6, r4
 80022ba:	2e00      	cmp	r6, #0
 80022bc:	d140      	bne.n	8002340 <_malloc_r+0xcc>
 80022be:	6823      	ldr	r3, [r4, #0]
 80022c0:	4631      	mov	r1, r6
 80022c2:	4638      	mov	r0, r7
 80022c4:	eb04 0803 	add.w	r8, r4, r3
 80022c8:	f000 f8b2 	bl	8002430 <_sbrk_r>
 80022cc:	4580      	cmp	r8, r0
 80022ce:	d13a      	bne.n	8002346 <_malloc_r+0xd2>
 80022d0:	6821      	ldr	r1, [r4, #0]
 80022d2:	3503      	adds	r5, #3
 80022d4:	1a6d      	subs	r5, r5, r1
 80022d6:	f025 0503 	bic.w	r5, r5, #3
 80022da:	3508      	adds	r5, #8
 80022dc:	2d0c      	cmp	r5, #12
 80022de:	bf38      	it	cc
 80022e0:	250c      	movcc	r5, #12
 80022e2:	4638      	mov	r0, r7
 80022e4:	4629      	mov	r1, r5
 80022e6:	f7ff ffa5 	bl	8002234 <sbrk_aligned>
 80022ea:	3001      	adds	r0, #1
 80022ec:	d02b      	beq.n	8002346 <_malloc_r+0xd2>
 80022ee:	6823      	ldr	r3, [r4, #0]
 80022f0:	442b      	add	r3, r5
 80022f2:	6023      	str	r3, [r4, #0]
 80022f4:	e00e      	b.n	8002314 <_malloc_r+0xa0>
 80022f6:	6822      	ldr	r2, [r4, #0]
 80022f8:	1b52      	subs	r2, r2, r5
 80022fa:	d41e      	bmi.n	800233a <_malloc_r+0xc6>
 80022fc:	2a0b      	cmp	r2, #11
 80022fe:	d916      	bls.n	800232e <_malloc_r+0xba>
 8002300:	1961      	adds	r1, r4, r5
 8002302:	42a3      	cmp	r3, r4
 8002304:	6025      	str	r5, [r4, #0]
 8002306:	bf18      	it	ne
 8002308:	6059      	strne	r1, [r3, #4]
 800230a:	6863      	ldr	r3, [r4, #4]
 800230c:	bf08      	it	eq
 800230e:	6031      	streq	r1, [r6, #0]
 8002310:	5162      	str	r2, [r4, r5]
 8002312:	604b      	str	r3, [r1, #4]
 8002314:	4638      	mov	r0, r7
 8002316:	f104 060b 	add.w	r6, r4, #11
 800231a:	f000 f8bf 	bl	800249c <__malloc_unlock>
 800231e:	f026 0607 	bic.w	r6, r6, #7
 8002322:	1d23      	adds	r3, r4, #4
 8002324:	1af2      	subs	r2, r6, r3
 8002326:	d0b6      	beq.n	8002296 <_malloc_r+0x22>
 8002328:	1b9b      	subs	r3, r3, r6
 800232a:	50a3      	str	r3, [r4, r2]
 800232c:	e7b3      	b.n	8002296 <_malloc_r+0x22>
 800232e:	6862      	ldr	r2, [r4, #4]
 8002330:	42a3      	cmp	r3, r4
 8002332:	bf0c      	ite	eq
 8002334:	6032      	streq	r2, [r6, #0]
 8002336:	605a      	strne	r2, [r3, #4]
 8002338:	e7ec      	b.n	8002314 <_malloc_r+0xa0>
 800233a:	4623      	mov	r3, r4
 800233c:	6864      	ldr	r4, [r4, #4]
 800233e:	e7b2      	b.n	80022a6 <_malloc_r+0x32>
 8002340:	4634      	mov	r4, r6
 8002342:	6876      	ldr	r6, [r6, #4]
 8002344:	e7b9      	b.n	80022ba <_malloc_r+0x46>
 8002346:	230c      	movs	r3, #12
 8002348:	4638      	mov	r0, r7
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	f000 f8a6 	bl	800249c <__malloc_unlock>
 8002350:	e7a1      	b.n	8002296 <_malloc_r+0x22>
 8002352:	6025      	str	r5, [r4, #0]
 8002354:	e7de      	b.n	8002314 <_malloc_r+0xa0>
 8002356:	bf00      	nop
 8002358:	200010b4 	.word	0x200010b4

0800235c <cleanup_glue>:
 800235c:	b538      	push	{r3, r4, r5, lr}
 800235e:	460c      	mov	r4, r1
 8002360:	6809      	ldr	r1, [r1, #0]
 8002362:	4605      	mov	r5, r0
 8002364:	b109      	cbz	r1, 800236a <cleanup_glue+0xe>
 8002366:	f7ff fff9 	bl	800235c <cleanup_glue>
 800236a:	4621      	mov	r1, r4
 800236c:	4628      	mov	r0, r5
 800236e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002372:	f000 b899 	b.w	80024a8 <_free_r>
	...

08002378 <_reclaim_reent>:
 8002378:	4b2c      	ldr	r3, [pc, #176]	; (800242c <_reclaim_reent+0xb4>)
 800237a:	b570      	push	{r4, r5, r6, lr}
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4604      	mov	r4, r0
 8002380:	4283      	cmp	r3, r0
 8002382:	d051      	beq.n	8002428 <_reclaim_reent+0xb0>
 8002384:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002386:	b143      	cbz	r3, 800239a <_reclaim_reent+0x22>
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d14a      	bne.n	8002424 <_reclaim_reent+0xac>
 800238e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002390:	6819      	ldr	r1, [r3, #0]
 8002392:	b111      	cbz	r1, 800239a <_reclaim_reent+0x22>
 8002394:	4620      	mov	r0, r4
 8002396:	f000 f887 	bl	80024a8 <_free_r>
 800239a:	6961      	ldr	r1, [r4, #20]
 800239c:	b111      	cbz	r1, 80023a4 <_reclaim_reent+0x2c>
 800239e:	4620      	mov	r0, r4
 80023a0:	f000 f882 	bl	80024a8 <_free_r>
 80023a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80023a6:	b111      	cbz	r1, 80023ae <_reclaim_reent+0x36>
 80023a8:	4620      	mov	r0, r4
 80023aa:	f000 f87d 	bl	80024a8 <_free_r>
 80023ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80023b0:	b111      	cbz	r1, 80023b8 <_reclaim_reent+0x40>
 80023b2:	4620      	mov	r0, r4
 80023b4:	f000 f878 	bl	80024a8 <_free_r>
 80023b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80023ba:	b111      	cbz	r1, 80023c2 <_reclaim_reent+0x4a>
 80023bc:	4620      	mov	r0, r4
 80023be:	f000 f873 	bl	80024a8 <_free_r>
 80023c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80023c4:	b111      	cbz	r1, 80023cc <_reclaim_reent+0x54>
 80023c6:	4620      	mov	r0, r4
 80023c8:	f000 f86e 	bl	80024a8 <_free_r>
 80023cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80023ce:	b111      	cbz	r1, 80023d6 <_reclaim_reent+0x5e>
 80023d0:	4620      	mov	r0, r4
 80023d2:	f000 f869 	bl	80024a8 <_free_r>
 80023d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80023d8:	b111      	cbz	r1, 80023e0 <_reclaim_reent+0x68>
 80023da:	4620      	mov	r0, r4
 80023dc:	f000 f864 	bl	80024a8 <_free_r>
 80023e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023e2:	b111      	cbz	r1, 80023ea <_reclaim_reent+0x72>
 80023e4:	4620      	mov	r0, r4
 80023e6:	f000 f85f 	bl	80024a8 <_free_r>
 80023ea:	69a3      	ldr	r3, [r4, #24]
 80023ec:	b1e3      	cbz	r3, 8002428 <_reclaim_reent+0xb0>
 80023ee:	4620      	mov	r0, r4
 80023f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023f2:	4798      	blx	r3
 80023f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80023f6:	b1b9      	cbz	r1, 8002428 <_reclaim_reent+0xb0>
 80023f8:	4620      	mov	r0, r4
 80023fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80023fe:	f7ff bfad 	b.w	800235c <cleanup_glue>
 8002402:	5949      	ldr	r1, [r1, r5]
 8002404:	b941      	cbnz	r1, 8002418 <_reclaim_reent+0xa0>
 8002406:	3504      	adds	r5, #4
 8002408:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800240a:	2d80      	cmp	r5, #128	; 0x80
 800240c:	68d9      	ldr	r1, [r3, #12]
 800240e:	d1f8      	bne.n	8002402 <_reclaim_reent+0x8a>
 8002410:	4620      	mov	r0, r4
 8002412:	f000 f849 	bl	80024a8 <_free_r>
 8002416:	e7ba      	b.n	800238e <_reclaim_reent+0x16>
 8002418:	680e      	ldr	r6, [r1, #0]
 800241a:	4620      	mov	r0, r4
 800241c:	f000 f844 	bl	80024a8 <_free_r>
 8002420:	4631      	mov	r1, r6
 8002422:	e7ef      	b.n	8002404 <_reclaim_reent+0x8c>
 8002424:	2500      	movs	r5, #0
 8002426:	e7ef      	b.n	8002408 <_reclaim_reent+0x90>
 8002428:	bd70      	pop	{r4, r5, r6, pc}
 800242a:	bf00      	nop
 800242c:	20000018 	.word	0x20000018

08002430 <_sbrk_r>:
 8002430:	b538      	push	{r3, r4, r5, lr}
 8002432:	2300      	movs	r3, #0
 8002434:	4d05      	ldr	r5, [pc, #20]	; (800244c <_sbrk_r+0x1c>)
 8002436:	4604      	mov	r4, r0
 8002438:	4608      	mov	r0, r1
 800243a:	602b      	str	r3, [r5, #0]
 800243c:	f7fe fc22 	bl	8000c84 <_sbrk>
 8002440:	1c43      	adds	r3, r0, #1
 8002442:	d102      	bne.n	800244a <_sbrk_r+0x1a>
 8002444:	682b      	ldr	r3, [r5, #0]
 8002446:	b103      	cbz	r3, 800244a <_sbrk_r+0x1a>
 8002448:	6023      	str	r3, [r4, #0]
 800244a:	bd38      	pop	{r3, r4, r5, pc}
 800244c:	200010bc 	.word	0x200010bc

08002450 <_vsiprintf_r>:
 8002450:	b500      	push	{lr}
 8002452:	b09b      	sub	sp, #108	; 0x6c
 8002454:	9100      	str	r1, [sp, #0]
 8002456:	9104      	str	r1, [sp, #16]
 8002458:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800245c:	9105      	str	r1, [sp, #20]
 800245e:	9102      	str	r1, [sp, #8]
 8002460:	4905      	ldr	r1, [pc, #20]	; (8002478 <_vsiprintf_r+0x28>)
 8002462:	9103      	str	r1, [sp, #12]
 8002464:	4669      	mov	r1, sp
 8002466:	f000 f8c3 	bl	80025f0 <_svfiprintf_r>
 800246a:	2200      	movs	r2, #0
 800246c:	9b00      	ldr	r3, [sp, #0]
 800246e:	701a      	strb	r2, [r3, #0]
 8002470:	b01b      	add	sp, #108	; 0x6c
 8002472:	f85d fb04 	ldr.w	pc, [sp], #4
 8002476:	bf00      	nop
 8002478:	ffff0208 	.word	0xffff0208

0800247c <vsiprintf>:
 800247c:	4613      	mov	r3, r2
 800247e:	460a      	mov	r2, r1
 8002480:	4601      	mov	r1, r0
 8002482:	4802      	ldr	r0, [pc, #8]	; (800248c <vsiprintf+0x10>)
 8002484:	6800      	ldr	r0, [r0, #0]
 8002486:	f7ff bfe3 	b.w	8002450 <_vsiprintf_r>
 800248a:	bf00      	nop
 800248c:	20000018 	.word	0x20000018

08002490 <__malloc_lock>:
 8002490:	4801      	ldr	r0, [pc, #4]	; (8002498 <__malloc_lock+0x8>)
 8002492:	f7ff beb7 	b.w	8002204 <__retarget_lock_acquire_recursive>
 8002496:	bf00      	nop
 8002498:	200010b0 	.word	0x200010b0

0800249c <__malloc_unlock>:
 800249c:	4801      	ldr	r0, [pc, #4]	; (80024a4 <__malloc_unlock+0x8>)
 800249e:	f7ff beb2 	b.w	8002206 <__retarget_lock_release_recursive>
 80024a2:	bf00      	nop
 80024a4:	200010b0 	.word	0x200010b0

080024a8 <_free_r>:
 80024a8:	b538      	push	{r3, r4, r5, lr}
 80024aa:	4605      	mov	r5, r0
 80024ac:	2900      	cmp	r1, #0
 80024ae:	d040      	beq.n	8002532 <_free_r+0x8a>
 80024b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024b4:	1f0c      	subs	r4, r1, #4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	bfb8      	it	lt
 80024ba:	18e4      	addlt	r4, r4, r3
 80024bc:	f7ff ffe8 	bl	8002490 <__malloc_lock>
 80024c0:	4a1c      	ldr	r2, [pc, #112]	; (8002534 <_free_r+0x8c>)
 80024c2:	6813      	ldr	r3, [r2, #0]
 80024c4:	b933      	cbnz	r3, 80024d4 <_free_r+0x2c>
 80024c6:	6063      	str	r3, [r4, #4]
 80024c8:	6014      	str	r4, [r2, #0]
 80024ca:	4628      	mov	r0, r5
 80024cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024d0:	f7ff bfe4 	b.w	800249c <__malloc_unlock>
 80024d4:	42a3      	cmp	r3, r4
 80024d6:	d908      	bls.n	80024ea <_free_r+0x42>
 80024d8:	6820      	ldr	r0, [r4, #0]
 80024da:	1821      	adds	r1, r4, r0
 80024dc:	428b      	cmp	r3, r1
 80024de:	bf01      	itttt	eq
 80024e0:	6819      	ldreq	r1, [r3, #0]
 80024e2:	685b      	ldreq	r3, [r3, #4]
 80024e4:	1809      	addeq	r1, r1, r0
 80024e6:	6021      	streq	r1, [r4, #0]
 80024e8:	e7ed      	b.n	80024c6 <_free_r+0x1e>
 80024ea:	461a      	mov	r2, r3
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	b10b      	cbz	r3, 80024f4 <_free_r+0x4c>
 80024f0:	42a3      	cmp	r3, r4
 80024f2:	d9fa      	bls.n	80024ea <_free_r+0x42>
 80024f4:	6811      	ldr	r1, [r2, #0]
 80024f6:	1850      	adds	r0, r2, r1
 80024f8:	42a0      	cmp	r0, r4
 80024fa:	d10b      	bne.n	8002514 <_free_r+0x6c>
 80024fc:	6820      	ldr	r0, [r4, #0]
 80024fe:	4401      	add	r1, r0
 8002500:	1850      	adds	r0, r2, r1
 8002502:	4283      	cmp	r3, r0
 8002504:	6011      	str	r1, [r2, #0]
 8002506:	d1e0      	bne.n	80024ca <_free_r+0x22>
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4401      	add	r1, r0
 800250e:	6011      	str	r1, [r2, #0]
 8002510:	6053      	str	r3, [r2, #4]
 8002512:	e7da      	b.n	80024ca <_free_r+0x22>
 8002514:	d902      	bls.n	800251c <_free_r+0x74>
 8002516:	230c      	movs	r3, #12
 8002518:	602b      	str	r3, [r5, #0]
 800251a:	e7d6      	b.n	80024ca <_free_r+0x22>
 800251c:	6820      	ldr	r0, [r4, #0]
 800251e:	1821      	adds	r1, r4, r0
 8002520:	428b      	cmp	r3, r1
 8002522:	bf01      	itttt	eq
 8002524:	6819      	ldreq	r1, [r3, #0]
 8002526:	685b      	ldreq	r3, [r3, #4]
 8002528:	1809      	addeq	r1, r1, r0
 800252a:	6021      	streq	r1, [r4, #0]
 800252c:	6063      	str	r3, [r4, #4]
 800252e:	6054      	str	r4, [r2, #4]
 8002530:	e7cb      	b.n	80024ca <_free_r+0x22>
 8002532:	bd38      	pop	{r3, r4, r5, pc}
 8002534:	200010b4 	.word	0x200010b4

08002538 <__ssputs_r>:
 8002538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800253c:	688e      	ldr	r6, [r1, #8]
 800253e:	4682      	mov	sl, r0
 8002540:	429e      	cmp	r6, r3
 8002542:	460c      	mov	r4, r1
 8002544:	4690      	mov	r8, r2
 8002546:	461f      	mov	r7, r3
 8002548:	d838      	bhi.n	80025bc <__ssputs_r+0x84>
 800254a:	898a      	ldrh	r2, [r1, #12]
 800254c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002550:	d032      	beq.n	80025b8 <__ssputs_r+0x80>
 8002552:	6825      	ldr	r5, [r4, #0]
 8002554:	6909      	ldr	r1, [r1, #16]
 8002556:	3301      	adds	r3, #1
 8002558:	eba5 0901 	sub.w	r9, r5, r1
 800255c:	6965      	ldr	r5, [r4, #20]
 800255e:	444b      	add	r3, r9
 8002560:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002564:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002568:	106d      	asrs	r5, r5, #1
 800256a:	429d      	cmp	r5, r3
 800256c:	bf38      	it	cc
 800256e:	461d      	movcc	r5, r3
 8002570:	0553      	lsls	r3, r2, #21
 8002572:	d531      	bpl.n	80025d8 <__ssputs_r+0xa0>
 8002574:	4629      	mov	r1, r5
 8002576:	f7ff fe7d 	bl	8002274 <_malloc_r>
 800257a:	4606      	mov	r6, r0
 800257c:	b950      	cbnz	r0, 8002594 <__ssputs_r+0x5c>
 800257e:	230c      	movs	r3, #12
 8002580:	f04f 30ff 	mov.w	r0, #4294967295
 8002584:	f8ca 3000 	str.w	r3, [sl]
 8002588:	89a3      	ldrh	r3, [r4, #12]
 800258a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800258e:	81a3      	strh	r3, [r4, #12]
 8002590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002594:	464a      	mov	r2, r9
 8002596:	6921      	ldr	r1, [r4, #16]
 8002598:	f7ff fe36 	bl	8002208 <memcpy>
 800259c:	89a3      	ldrh	r3, [r4, #12]
 800259e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80025a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a6:	81a3      	strh	r3, [r4, #12]
 80025a8:	6126      	str	r6, [r4, #16]
 80025aa:	444e      	add	r6, r9
 80025ac:	6026      	str	r6, [r4, #0]
 80025ae:	463e      	mov	r6, r7
 80025b0:	6165      	str	r5, [r4, #20]
 80025b2:	eba5 0509 	sub.w	r5, r5, r9
 80025b6:	60a5      	str	r5, [r4, #8]
 80025b8:	42be      	cmp	r6, r7
 80025ba:	d900      	bls.n	80025be <__ssputs_r+0x86>
 80025bc:	463e      	mov	r6, r7
 80025be:	4632      	mov	r2, r6
 80025c0:	4641      	mov	r1, r8
 80025c2:	6820      	ldr	r0, [r4, #0]
 80025c4:	f000 fab8 	bl	8002b38 <memmove>
 80025c8:	68a3      	ldr	r3, [r4, #8]
 80025ca:	2000      	movs	r0, #0
 80025cc:	1b9b      	subs	r3, r3, r6
 80025ce:	60a3      	str	r3, [r4, #8]
 80025d0:	6823      	ldr	r3, [r4, #0]
 80025d2:	4433      	add	r3, r6
 80025d4:	6023      	str	r3, [r4, #0]
 80025d6:	e7db      	b.n	8002590 <__ssputs_r+0x58>
 80025d8:	462a      	mov	r2, r5
 80025da:	f000 fac7 	bl	8002b6c <_realloc_r>
 80025de:	4606      	mov	r6, r0
 80025e0:	2800      	cmp	r0, #0
 80025e2:	d1e1      	bne.n	80025a8 <__ssputs_r+0x70>
 80025e4:	4650      	mov	r0, sl
 80025e6:	6921      	ldr	r1, [r4, #16]
 80025e8:	f7ff ff5e 	bl	80024a8 <_free_r>
 80025ec:	e7c7      	b.n	800257e <__ssputs_r+0x46>
	...

080025f0 <_svfiprintf_r>:
 80025f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025f4:	4698      	mov	r8, r3
 80025f6:	898b      	ldrh	r3, [r1, #12]
 80025f8:	4607      	mov	r7, r0
 80025fa:	061b      	lsls	r3, r3, #24
 80025fc:	460d      	mov	r5, r1
 80025fe:	4614      	mov	r4, r2
 8002600:	b09d      	sub	sp, #116	; 0x74
 8002602:	d50e      	bpl.n	8002622 <_svfiprintf_r+0x32>
 8002604:	690b      	ldr	r3, [r1, #16]
 8002606:	b963      	cbnz	r3, 8002622 <_svfiprintf_r+0x32>
 8002608:	2140      	movs	r1, #64	; 0x40
 800260a:	f7ff fe33 	bl	8002274 <_malloc_r>
 800260e:	6028      	str	r0, [r5, #0]
 8002610:	6128      	str	r0, [r5, #16]
 8002612:	b920      	cbnz	r0, 800261e <_svfiprintf_r+0x2e>
 8002614:	230c      	movs	r3, #12
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	f04f 30ff 	mov.w	r0, #4294967295
 800261c:	e0d1      	b.n	80027c2 <_svfiprintf_r+0x1d2>
 800261e:	2340      	movs	r3, #64	; 0x40
 8002620:	616b      	str	r3, [r5, #20]
 8002622:	2300      	movs	r3, #0
 8002624:	9309      	str	r3, [sp, #36]	; 0x24
 8002626:	2320      	movs	r3, #32
 8002628:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800262c:	2330      	movs	r3, #48	; 0x30
 800262e:	f04f 0901 	mov.w	r9, #1
 8002632:	f8cd 800c 	str.w	r8, [sp, #12]
 8002636:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80027dc <_svfiprintf_r+0x1ec>
 800263a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800263e:	4623      	mov	r3, r4
 8002640:	469a      	mov	sl, r3
 8002642:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002646:	b10a      	cbz	r2, 800264c <_svfiprintf_r+0x5c>
 8002648:	2a25      	cmp	r2, #37	; 0x25
 800264a:	d1f9      	bne.n	8002640 <_svfiprintf_r+0x50>
 800264c:	ebba 0b04 	subs.w	fp, sl, r4
 8002650:	d00b      	beq.n	800266a <_svfiprintf_r+0x7a>
 8002652:	465b      	mov	r3, fp
 8002654:	4622      	mov	r2, r4
 8002656:	4629      	mov	r1, r5
 8002658:	4638      	mov	r0, r7
 800265a:	f7ff ff6d 	bl	8002538 <__ssputs_r>
 800265e:	3001      	adds	r0, #1
 8002660:	f000 80aa 	beq.w	80027b8 <_svfiprintf_r+0x1c8>
 8002664:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002666:	445a      	add	r2, fp
 8002668:	9209      	str	r2, [sp, #36]	; 0x24
 800266a:	f89a 3000 	ldrb.w	r3, [sl]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 80a2 	beq.w	80027b8 <_svfiprintf_r+0x1c8>
 8002674:	2300      	movs	r3, #0
 8002676:	f04f 32ff 	mov.w	r2, #4294967295
 800267a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800267e:	f10a 0a01 	add.w	sl, sl, #1
 8002682:	9304      	str	r3, [sp, #16]
 8002684:	9307      	str	r3, [sp, #28]
 8002686:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800268a:	931a      	str	r3, [sp, #104]	; 0x68
 800268c:	4654      	mov	r4, sl
 800268e:	2205      	movs	r2, #5
 8002690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002694:	4851      	ldr	r0, [pc, #324]	; (80027dc <_svfiprintf_r+0x1ec>)
 8002696:	f000 fa41 	bl	8002b1c <memchr>
 800269a:	9a04      	ldr	r2, [sp, #16]
 800269c:	b9d8      	cbnz	r0, 80026d6 <_svfiprintf_r+0xe6>
 800269e:	06d0      	lsls	r0, r2, #27
 80026a0:	bf44      	itt	mi
 80026a2:	2320      	movmi	r3, #32
 80026a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026a8:	0711      	lsls	r1, r2, #28
 80026aa:	bf44      	itt	mi
 80026ac:	232b      	movmi	r3, #43	; 0x2b
 80026ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026b2:	f89a 3000 	ldrb.w	r3, [sl]
 80026b6:	2b2a      	cmp	r3, #42	; 0x2a
 80026b8:	d015      	beq.n	80026e6 <_svfiprintf_r+0xf6>
 80026ba:	4654      	mov	r4, sl
 80026bc:	2000      	movs	r0, #0
 80026be:	f04f 0c0a 	mov.w	ip, #10
 80026c2:	9a07      	ldr	r2, [sp, #28]
 80026c4:	4621      	mov	r1, r4
 80026c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026ca:	3b30      	subs	r3, #48	; 0x30
 80026cc:	2b09      	cmp	r3, #9
 80026ce:	d94e      	bls.n	800276e <_svfiprintf_r+0x17e>
 80026d0:	b1b0      	cbz	r0, 8002700 <_svfiprintf_r+0x110>
 80026d2:	9207      	str	r2, [sp, #28]
 80026d4:	e014      	b.n	8002700 <_svfiprintf_r+0x110>
 80026d6:	eba0 0308 	sub.w	r3, r0, r8
 80026da:	fa09 f303 	lsl.w	r3, r9, r3
 80026de:	4313      	orrs	r3, r2
 80026e0:	46a2      	mov	sl, r4
 80026e2:	9304      	str	r3, [sp, #16]
 80026e4:	e7d2      	b.n	800268c <_svfiprintf_r+0x9c>
 80026e6:	9b03      	ldr	r3, [sp, #12]
 80026e8:	1d19      	adds	r1, r3, #4
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	9103      	str	r1, [sp, #12]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	bfbb      	ittet	lt
 80026f2:	425b      	neglt	r3, r3
 80026f4:	f042 0202 	orrlt.w	r2, r2, #2
 80026f8:	9307      	strge	r3, [sp, #28]
 80026fa:	9307      	strlt	r3, [sp, #28]
 80026fc:	bfb8      	it	lt
 80026fe:	9204      	strlt	r2, [sp, #16]
 8002700:	7823      	ldrb	r3, [r4, #0]
 8002702:	2b2e      	cmp	r3, #46	; 0x2e
 8002704:	d10c      	bne.n	8002720 <_svfiprintf_r+0x130>
 8002706:	7863      	ldrb	r3, [r4, #1]
 8002708:	2b2a      	cmp	r3, #42	; 0x2a
 800270a:	d135      	bne.n	8002778 <_svfiprintf_r+0x188>
 800270c:	9b03      	ldr	r3, [sp, #12]
 800270e:	3402      	adds	r4, #2
 8002710:	1d1a      	adds	r2, r3, #4
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	9203      	str	r2, [sp, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	bfb8      	it	lt
 800271a:	f04f 33ff 	movlt.w	r3, #4294967295
 800271e:	9305      	str	r3, [sp, #20]
 8002720:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80027e0 <_svfiprintf_r+0x1f0>
 8002724:	2203      	movs	r2, #3
 8002726:	4650      	mov	r0, sl
 8002728:	7821      	ldrb	r1, [r4, #0]
 800272a:	f000 f9f7 	bl	8002b1c <memchr>
 800272e:	b140      	cbz	r0, 8002742 <_svfiprintf_r+0x152>
 8002730:	2340      	movs	r3, #64	; 0x40
 8002732:	eba0 000a 	sub.w	r0, r0, sl
 8002736:	fa03 f000 	lsl.w	r0, r3, r0
 800273a:	9b04      	ldr	r3, [sp, #16]
 800273c:	3401      	adds	r4, #1
 800273e:	4303      	orrs	r3, r0
 8002740:	9304      	str	r3, [sp, #16]
 8002742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002746:	2206      	movs	r2, #6
 8002748:	4826      	ldr	r0, [pc, #152]	; (80027e4 <_svfiprintf_r+0x1f4>)
 800274a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800274e:	f000 f9e5 	bl	8002b1c <memchr>
 8002752:	2800      	cmp	r0, #0
 8002754:	d038      	beq.n	80027c8 <_svfiprintf_r+0x1d8>
 8002756:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <_svfiprintf_r+0x1f8>)
 8002758:	bb1b      	cbnz	r3, 80027a2 <_svfiprintf_r+0x1b2>
 800275a:	9b03      	ldr	r3, [sp, #12]
 800275c:	3307      	adds	r3, #7
 800275e:	f023 0307 	bic.w	r3, r3, #7
 8002762:	3308      	adds	r3, #8
 8002764:	9303      	str	r3, [sp, #12]
 8002766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002768:	4433      	add	r3, r6
 800276a:	9309      	str	r3, [sp, #36]	; 0x24
 800276c:	e767      	b.n	800263e <_svfiprintf_r+0x4e>
 800276e:	460c      	mov	r4, r1
 8002770:	2001      	movs	r0, #1
 8002772:	fb0c 3202 	mla	r2, ip, r2, r3
 8002776:	e7a5      	b.n	80026c4 <_svfiprintf_r+0xd4>
 8002778:	2300      	movs	r3, #0
 800277a:	f04f 0c0a 	mov.w	ip, #10
 800277e:	4619      	mov	r1, r3
 8002780:	3401      	adds	r4, #1
 8002782:	9305      	str	r3, [sp, #20]
 8002784:	4620      	mov	r0, r4
 8002786:	f810 2b01 	ldrb.w	r2, [r0], #1
 800278a:	3a30      	subs	r2, #48	; 0x30
 800278c:	2a09      	cmp	r2, #9
 800278e:	d903      	bls.n	8002798 <_svfiprintf_r+0x1a8>
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0c5      	beq.n	8002720 <_svfiprintf_r+0x130>
 8002794:	9105      	str	r1, [sp, #20]
 8002796:	e7c3      	b.n	8002720 <_svfiprintf_r+0x130>
 8002798:	4604      	mov	r4, r0
 800279a:	2301      	movs	r3, #1
 800279c:	fb0c 2101 	mla	r1, ip, r1, r2
 80027a0:	e7f0      	b.n	8002784 <_svfiprintf_r+0x194>
 80027a2:	ab03      	add	r3, sp, #12
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	462a      	mov	r2, r5
 80027a8:	4638      	mov	r0, r7
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <_svfiprintf_r+0x1fc>)
 80027ac:	a904      	add	r1, sp, #16
 80027ae:	f3af 8000 	nop.w
 80027b2:	1c42      	adds	r2, r0, #1
 80027b4:	4606      	mov	r6, r0
 80027b6:	d1d6      	bne.n	8002766 <_svfiprintf_r+0x176>
 80027b8:	89ab      	ldrh	r3, [r5, #12]
 80027ba:	065b      	lsls	r3, r3, #25
 80027bc:	f53f af2c 	bmi.w	8002618 <_svfiprintf_r+0x28>
 80027c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027c2:	b01d      	add	sp, #116	; 0x74
 80027c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027c8:	ab03      	add	r3, sp, #12
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	462a      	mov	r2, r5
 80027ce:	4638      	mov	r0, r7
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <_svfiprintf_r+0x1fc>)
 80027d2:	a904      	add	r1, sp, #16
 80027d4:	f000 f87c 	bl	80028d0 <_printf_i>
 80027d8:	e7eb      	b.n	80027b2 <_svfiprintf_r+0x1c2>
 80027da:	bf00      	nop
 80027dc:	08002cb4 	.word	0x08002cb4
 80027e0:	08002cba 	.word	0x08002cba
 80027e4:	08002cbe 	.word	0x08002cbe
 80027e8:	00000000 	.word	0x00000000
 80027ec:	08002539 	.word	0x08002539

080027f0 <_printf_common>:
 80027f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027f4:	4616      	mov	r6, r2
 80027f6:	4699      	mov	r9, r3
 80027f8:	688a      	ldr	r2, [r1, #8]
 80027fa:	690b      	ldr	r3, [r1, #16]
 80027fc:	4607      	mov	r7, r0
 80027fe:	4293      	cmp	r3, r2
 8002800:	bfb8      	it	lt
 8002802:	4613      	movlt	r3, r2
 8002804:	6033      	str	r3, [r6, #0]
 8002806:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800280a:	460c      	mov	r4, r1
 800280c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002810:	b10a      	cbz	r2, 8002816 <_printf_common+0x26>
 8002812:	3301      	adds	r3, #1
 8002814:	6033      	str	r3, [r6, #0]
 8002816:	6823      	ldr	r3, [r4, #0]
 8002818:	0699      	lsls	r1, r3, #26
 800281a:	bf42      	ittt	mi
 800281c:	6833      	ldrmi	r3, [r6, #0]
 800281e:	3302      	addmi	r3, #2
 8002820:	6033      	strmi	r3, [r6, #0]
 8002822:	6825      	ldr	r5, [r4, #0]
 8002824:	f015 0506 	ands.w	r5, r5, #6
 8002828:	d106      	bne.n	8002838 <_printf_common+0x48>
 800282a:	f104 0a19 	add.w	sl, r4, #25
 800282e:	68e3      	ldr	r3, [r4, #12]
 8002830:	6832      	ldr	r2, [r6, #0]
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	42ab      	cmp	r3, r5
 8002836:	dc28      	bgt.n	800288a <_printf_common+0x9a>
 8002838:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800283c:	1e13      	subs	r3, r2, #0
 800283e:	6822      	ldr	r2, [r4, #0]
 8002840:	bf18      	it	ne
 8002842:	2301      	movne	r3, #1
 8002844:	0692      	lsls	r2, r2, #26
 8002846:	d42d      	bmi.n	80028a4 <_printf_common+0xb4>
 8002848:	4649      	mov	r1, r9
 800284a:	4638      	mov	r0, r7
 800284c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002850:	47c0      	blx	r8
 8002852:	3001      	adds	r0, #1
 8002854:	d020      	beq.n	8002898 <_printf_common+0xa8>
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	68e5      	ldr	r5, [r4, #12]
 800285a:	f003 0306 	and.w	r3, r3, #6
 800285e:	2b04      	cmp	r3, #4
 8002860:	bf18      	it	ne
 8002862:	2500      	movne	r5, #0
 8002864:	6832      	ldr	r2, [r6, #0]
 8002866:	f04f 0600 	mov.w	r6, #0
 800286a:	68a3      	ldr	r3, [r4, #8]
 800286c:	bf08      	it	eq
 800286e:	1aad      	subeq	r5, r5, r2
 8002870:	6922      	ldr	r2, [r4, #16]
 8002872:	bf08      	it	eq
 8002874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002878:	4293      	cmp	r3, r2
 800287a:	bfc4      	itt	gt
 800287c:	1a9b      	subgt	r3, r3, r2
 800287e:	18ed      	addgt	r5, r5, r3
 8002880:	341a      	adds	r4, #26
 8002882:	42b5      	cmp	r5, r6
 8002884:	d11a      	bne.n	80028bc <_printf_common+0xcc>
 8002886:	2000      	movs	r0, #0
 8002888:	e008      	b.n	800289c <_printf_common+0xac>
 800288a:	2301      	movs	r3, #1
 800288c:	4652      	mov	r2, sl
 800288e:	4649      	mov	r1, r9
 8002890:	4638      	mov	r0, r7
 8002892:	47c0      	blx	r8
 8002894:	3001      	adds	r0, #1
 8002896:	d103      	bne.n	80028a0 <_printf_common+0xb0>
 8002898:	f04f 30ff 	mov.w	r0, #4294967295
 800289c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028a0:	3501      	adds	r5, #1
 80028a2:	e7c4      	b.n	800282e <_printf_common+0x3e>
 80028a4:	2030      	movs	r0, #48	; 0x30
 80028a6:	18e1      	adds	r1, r4, r3
 80028a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028b2:	4422      	add	r2, r4
 80028b4:	3302      	adds	r3, #2
 80028b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028ba:	e7c5      	b.n	8002848 <_printf_common+0x58>
 80028bc:	2301      	movs	r3, #1
 80028be:	4622      	mov	r2, r4
 80028c0:	4649      	mov	r1, r9
 80028c2:	4638      	mov	r0, r7
 80028c4:	47c0      	blx	r8
 80028c6:	3001      	adds	r0, #1
 80028c8:	d0e6      	beq.n	8002898 <_printf_common+0xa8>
 80028ca:	3601      	adds	r6, #1
 80028cc:	e7d9      	b.n	8002882 <_printf_common+0x92>
	...

080028d0 <_printf_i>:
 80028d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028d4:	7e0f      	ldrb	r7, [r1, #24]
 80028d6:	4691      	mov	r9, r2
 80028d8:	2f78      	cmp	r7, #120	; 0x78
 80028da:	4680      	mov	r8, r0
 80028dc:	460c      	mov	r4, r1
 80028de:	469a      	mov	sl, r3
 80028e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80028e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80028e6:	d807      	bhi.n	80028f8 <_printf_i+0x28>
 80028e8:	2f62      	cmp	r7, #98	; 0x62
 80028ea:	d80a      	bhi.n	8002902 <_printf_i+0x32>
 80028ec:	2f00      	cmp	r7, #0
 80028ee:	f000 80d9 	beq.w	8002aa4 <_printf_i+0x1d4>
 80028f2:	2f58      	cmp	r7, #88	; 0x58
 80028f4:	f000 80a4 	beq.w	8002a40 <_printf_i+0x170>
 80028f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002900:	e03a      	b.n	8002978 <_printf_i+0xa8>
 8002902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002906:	2b15      	cmp	r3, #21
 8002908:	d8f6      	bhi.n	80028f8 <_printf_i+0x28>
 800290a:	a101      	add	r1, pc, #4	; (adr r1, 8002910 <_printf_i+0x40>)
 800290c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002910:	08002969 	.word	0x08002969
 8002914:	0800297d 	.word	0x0800297d
 8002918:	080028f9 	.word	0x080028f9
 800291c:	080028f9 	.word	0x080028f9
 8002920:	080028f9 	.word	0x080028f9
 8002924:	080028f9 	.word	0x080028f9
 8002928:	0800297d 	.word	0x0800297d
 800292c:	080028f9 	.word	0x080028f9
 8002930:	080028f9 	.word	0x080028f9
 8002934:	080028f9 	.word	0x080028f9
 8002938:	080028f9 	.word	0x080028f9
 800293c:	08002a8b 	.word	0x08002a8b
 8002940:	080029ad 	.word	0x080029ad
 8002944:	08002a6d 	.word	0x08002a6d
 8002948:	080028f9 	.word	0x080028f9
 800294c:	080028f9 	.word	0x080028f9
 8002950:	08002aad 	.word	0x08002aad
 8002954:	080028f9 	.word	0x080028f9
 8002958:	080029ad 	.word	0x080029ad
 800295c:	080028f9 	.word	0x080028f9
 8002960:	080028f9 	.word	0x080028f9
 8002964:	08002a75 	.word	0x08002a75
 8002968:	682b      	ldr	r3, [r5, #0]
 800296a:	1d1a      	adds	r2, r3, #4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	602a      	str	r2, [r5, #0]
 8002970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002978:	2301      	movs	r3, #1
 800297a:	e0a4      	b.n	8002ac6 <_printf_i+0x1f6>
 800297c:	6820      	ldr	r0, [r4, #0]
 800297e:	6829      	ldr	r1, [r5, #0]
 8002980:	0606      	lsls	r6, r0, #24
 8002982:	f101 0304 	add.w	r3, r1, #4
 8002986:	d50a      	bpl.n	800299e <_printf_i+0xce>
 8002988:	680e      	ldr	r6, [r1, #0]
 800298a:	602b      	str	r3, [r5, #0]
 800298c:	2e00      	cmp	r6, #0
 800298e:	da03      	bge.n	8002998 <_printf_i+0xc8>
 8002990:	232d      	movs	r3, #45	; 0x2d
 8002992:	4276      	negs	r6, r6
 8002994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002998:	230a      	movs	r3, #10
 800299a:	485e      	ldr	r0, [pc, #376]	; (8002b14 <_printf_i+0x244>)
 800299c:	e019      	b.n	80029d2 <_printf_i+0x102>
 800299e:	680e      	ldr	r6, [r1, #0]
 80029a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80029a4:	602b      	str	r3, [r5, #0]
 80029a6:	bf18      	it	ne
 80029a8:	b236      	sxthne	r6, r6
 80029aa:	e7ef      	b.n	800298c <_printf_i+0xbc>
 80029ac:	682b      	ldr	r3, [r5, #0]
 80029ae:	6820      	ldr	r0, [r4, #0]
 80029b0:	1d19      	adds	r1, r3, #4
 80029b2:	6029      	str	r1, [r5, #0]
 80029b4:	0601      	lsls	r1, r0, #24
 80029b6:	d501      	bpl.n	80029bc <_printf_i+0xec>
 80029b8:	681e      	ldr	r6, [r3, #0]
 80029ba:	e002      	b.n	80029c2 <_printf_i+0xf2>
 80029bc:	0646      	lsls	r6, r0, #25
 80029be:	d5fb      	bpl.n	80029b8 <_printf_i+0xe8>
 80029c0:	881e      	ldrh	r6, [r3, #0]
 80029c2:	2f6f      	cmp	r7, #111	; 0x6f
 80029c4:	bf0c      	ite	eq
 80029c6:	2308      	moveq	r3, #8
 80029c8:	230a      	movne	r3, #10
 80029ca:	4852      	ldr	r0, [pc, #328]	; (8002b14 <_printf_i+0x244>)
 80029cc:	2100      	movs	r1, #0
 80029ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029d2:	6865      	ldr	r5, [r4, #4]
 80029d4:	2d00      	cmp	r5, #0
 80029d6:	bfa8      	it	ge
 80029d8:	6821      	ldrge	r1, [r4, #0]
 80029da:	60a5      	str	r5, [r4, #8]
 80029dc:	bfa4      	itt	ge
 80029de:	f021 0104 	bicge.w	r1, r1, #4
 80029e2:	6021      	strge	r1, [r4, #0]
 80029e4:	b90e      	cbnz	r6, 80029ea <_printf_i+0x11a>
 80029e6:	2d00      	cmp	r5, #0
 80029e8:	d04d      	beq.n	8002a86 <_printf_i+0x1b6>
 80029ea:	4615      	mov	r5, r2
 80029ec:	fbb6 f1f3 	udiv	r1, r6, r3
 80029f0:	fb03 6711 	mls	r7, r3, r1, r6
 80029f4:	5dc7      	ldrb	r7, [r0, r7]
 80029f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80029fa:	4637      	mov	r7, r6
 80029fc:	42bb      	cmp	r3, r7
 80029fe:	460e      	mov	r6, r1
 8002a00:	d9f4      	bls.n	80029ec <_printf_i+0x11c>
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d10b      	bne.n	8002a1e <_printf_i+0x14e>
 8002a06:	6823      	ldr	r3, [r4, #0]
 8002a08:	07de      	lsls	r6, r3, #31
 8002a0a:	d508      	bpl.n	8002a1e <_printf_i+0x14e>
 8002a0c:	6923      	ldr	r3, [r4, #16]
 8002a0e:	6861      	ldr	r1, [r4, #4]
 8002a10:	4299      	cmp	r1, r3
 8002a12:	bfde      	ittt	le
 8002a14:	2330      	movle	r3, #48	; 0x30
 8002a16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002a1e:	1b52      	subs	r2, r2, r5
 8002a20:	6122      	str	r2, [r4, #16]
 8002a22:	464b      	mov	r3, r9
 8002a24:	4621      	mov	r1, r4
 8002a26:	4640      	mov	r0, r8
 8002a28:	f8cd a000 	str.w	sl, [sp]
 8002a2c:	aa03      	add	r2, sp, #12
 8002a2e:	f7ff fedf 	bl	80027f0 <_printf_common>
 8002a32:	3001      	adds	r0, #1
 8002a34:	d14c      	bne.n	8002ad0 <_printf_i+0x200>
 8002a36:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3a:	b004      	add	sp, #16
 8002a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a40:	4834      	ldr	r0, [pc, #208]	; (8002b14 <_printf_i+0x244>)
 8002a42:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002a46:	6829      	ldr	r1, [r5, #0]
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a4e:	6029      	str	r1, [r5, #0]
 8002a50:	061d      	lsls	r5, r3, #24
 8002a52:	d514      	bpl.n	8002a7e <_printf_i+0x1ae>
 8002a54:	07df      	lsls	r7, r3, #31
 8002a56:	bf44      	itt	mi
 8002a58:	f043 0320 	orrmi.w	r3, r3, #32
 8002a5c:	6023      	strmi	r3, [r4, #0]
 8002a5e:	b91e      	cbnz	r6, 8002a68 <_printf_i+0x198>
 8002a60:	6823      	ldr	r3, [r4, #0]
 8002a62:	f023 0320 	bic.w	r3, r3, #32
 8002a66:	6023      	str	r3, [r4, #0]
 8002a68:	2310      	movs	r3, #16
 8002a6a:	e7af      	b.n	80029cc <_printf_i+0xfc>
 8002a6c:	6823      	ldr	r3, [r4, #0]
 8002a6e:	f043 0320 	orr.w	r3, r3, #32
 8002a72:	6023      	str	r3, [r4, #0]
 8002a74:	2378      	movs	r3, #120	; 0x78
 8002a76:	4828      	ldr	r0, [pc, #160]	; (8002b18 <_printf_i+0x248>)
 8002a78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a7c:	e7e3      	b.n	8002a46 <_printf_i+0x176>
 8002a7e:	0659      	lsls	r1, r3, #25
 8002a80:	bf48      	it	mi
 8002a82:	b2b6      	uxthmi	r6, r6
 8002a84:	e7e6      	b.n	8002a54 <_printf_i+0x184>
 8002a86:	4615      	mov	r5, r2
 8002a88:	e7bb      	b.n	8002a02 <_printf_i+0x132>
 8002a8a:	682b      	ldr	r3, [r5, #0]
 8002a8c:	6826      	ldr	r6, [r4, #0]
 8002a8e:	1d18      	adds	r0, r3, #4
 8002a90:	6961      	ldr	r1, [r4, #20]
 8002a92:	6028      	str	r0, [r5, #0]
 8002a94:	0635      	lsls	r5, r6, #24
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	d501      	bpl.n	8002a9e <_printf_i+0x1ce>
 8002a9a:	6019      	str	r1, [r3, #0]
 8002a9c:	e002      	b.n	8002aa4 <_printf_i+0x1d4>
 8002a9e:	0670      	lsls	r0, r6, #25
 8002aa0:	d5fb      	bpl.n	8002a9a <_printf_i+0x1ca>
 8002aa2:	8019      	strh	r1, [r3, #0]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	4615      	mov	r5, r2
 8002aa8:	6123      	str	r3, [r4, #16]
 8002aaa:	e7ba      	b.n	8002a22 <_printf_i+0x152>
 8002aac:	682b      	ldr	r3, [r5, #0]
 8002aae:	2100      	movs	r1, #0
 8002ab0:	1d1a      	adds	r2, r3, #4
 8002ab2:	602a      	str	r2, [r5, #0]
 8002ab4:	681d      	ldr	r5, [r3, #0]
 8002ab6:	6862      	ldr	r2, [r4, #4]
 8002ab8:	4628      	mov	r0, r5
 8002aba:	f000 f82f 	bl	8002b1c <memchr>
 8002abe:	b108      	cbz	r0, 8002ac4 <_printf_i+0x1f4>
 8002ac0:	1b40      	subs	r0, r0, r5
 8002ac2:	6060      	str	r0, [r4, #4]
 8002ac4:	6863      	ldr	r3, [r4, #4]
 8002ac6:	6123      	str	r3, [r4, #16]
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ace:	e7a8      	b.n	8002a22 <_printf_i+0x152>
 8002ad0:	462a      	mov	r2, r5
 8002ad2:	4649      	mov	r1, r9
 8002ad4:	4640      	mov	r0, r8
 8002ad6:	6923      	ldr	r3, [r4, #16]
 8002ad8:	47d0      	blx	sl
 8002ada:	3001      	adds	r0, #1
 8002adc:	d0ab      	beq.n	8002a36 <_printf_i+0x166>
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	079b      	lsls	r3, r3, #30
 8002ae2:	d413      	bmi.n	8002b0c <_printf_i+0x23c>
 8002ae4:	68e0      	ldr	r0, [r4, #12]
 8002ae6:	9b03      	ldr	r3, [sp, #12]
 8002ae8:	4298      	cmp	r0, r3
 8002aea:	bfb8      	it	lt
 8002aec:	4618      	movlt	r0, r3
 8002aee:	e7a4      	b.n	8002a3a <_printf_i+0x16a>
 8002af0:	2301      	movs	r3, #1
 8002af2:	4632      	mov	r2, r6
 8002af4:	4649      	mov	r1, r9
 8002af6:	4640      	mov	r0, r8
 8002af8:	47d0      	blx	sl
 8002afa:	3001      	adds	r0, #1
 8002afc:	d09b      	beq.n	8002a36 <_printf_i+0x166>
 8002afe:	3501      	adds	r5, #1
 8002b00:	68e3      	ldr	r3, [r4, #12]
 8002b02:	9903      	ldr	r1, [sp, #12]
 8002b04:	1a5b      	subs	r3, r3, r1
 8002b06:	42ab      	cmp	r3, r5
 8002b08:	dcf2      	bgt.n	8002af0 <_printf_i+0x220>
 8002b0a:	e7eb      	b.n	8002ae4 <_printf_i+0x214>
 8002b0c:	2500      	movs	r5, #0
 8002b0e:	f104 0619 	add.w	r6, r4, #25
 8002b12:	e7f5      	b.n	8002b00 <_printf_i+0x230>
 8002b14:	08002cc5 	.word	0x08002cc5
 8002b18:	08002cd6 	.word	0x08002cd6

08002b1c <memchr>:
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	b510      	push	{r4, lr}
 8002b20:	b2c9      	uxtb	r1, r1
 8002b22:	4402      	add	r2, r0
 8002b24:	4293      	cmp	r3, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	d101      	bne.n	8002b2e <memchr+0x12>
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	e003      	b.n	8002b36 <memchr+0x1a>
 8002b2e:	7804      	ldrb	r4, [r0, #0]
 8002b30:	3301      	adds	r3, #1
 8002b32:	428c      	cmp	r4, r1
 8002b34:	d1f6      	bne.n	8002b24 <memchr+0x8>
 8002b36:	bd10      	pop	{r4, pc}

08002b38 <memmove>:
 8002b38:	4288      	cmp	r0, r1
 8002b3a:	b510      	push	{r4, lr}
 8002b3c:	eb01 0402 	add.w	r4, r1, r2
 8002b40:	d902      	bls.n	8002b48 <memmove+0x10>
 8002b42:	4284      	cmp	r4, r0
 8002b44:	4623      	mov	r3, r4
 8002b46:	d807      	bhi.n	8002b58 <memmove+0x20>
 8002b48:	1e43      	subs	r3, r0, #1
 8002b4a:	42a1      	cmp	r1, r4
 8002b4c:	d008      	beq.n	8002b60 <memmove+0x28>
 8002b4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002b56:	e7f8      	b.n	8002b4a <memmove+0x12>
 8002b58:	4601      	mov	r1, r0
 8002b5a:	4402      	add	r2, r0
 8002b5c:	428a      	cmp	r2, r1
 8002b5e:	d100      	bne.n	8002b62 <memmove+0x2a>
 8002b60:	bd10      	pop	{r4, pc}
 8002b62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002b6a:	e7f7      	b.n	8002b5c <memmove+0x24>

08002b6c <_realloc_r>:
 8002b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b70:	4680      	mov	r8, r0
 8002b72:	4614      	mov	r4, r2
 8002b74:	460e      	mov	r6, r1
 8002b76:	b921      	cbnz	r1, 8002b82 <_realloc_r+0x16>
 8002b78:	4611      	mov	r1, r2
 8002b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b7e:	f7ff bb79 	b.w	8002274 <_malloc_r>
 8002b82:	b92a      	cbnz	r2, 8002b90 <_realloc_r+0x24>
 8002b84:	f7ff fc90 	bl	80024a8 <_free_r>
 8002b88:	4625      	mov	r5, r4
 8002b8a:	4628      	mov	r0, r5
 8002b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b90:	f000 f81b 	bl	8002bca <_malloc_usable_size_r>
 8002b94:	4284      	cmp	r4, r0
 8002b96:	4607      	mov	r7, r0
 8002b98:	d802      	bhi.n	8002ba0 <_realloc_r+0x34>
 8002b9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002b9e:	d812      	bhi.n	8002bc6 <_realloc_r+0x5a>
 8002ba0:	4621      	mov	r1, r4
 8002ba2:	4640      	mov	r0, r8
 8002ba4:	f7ff fb66 	bl	8002274 <_malloc_r>
 8002ba8:	4605      	mov	r5, r0
 8002baa:	2800      	cmp	r0, #0
 8002bac:	d0ed      	beq.n	8002b8a <_realloc_r+0x1e>
 8002bae:	42bc      	cmp	r4, r7
 8002bb0:	4622      	mov	r2, r4
 8002bb2:	4631      	mov	r1, r6
 8002bb4:	bf28      	it	cs
 8002bb6:	463a      	movcs	r2, r7
 8002bb8:	f7ff fb26 	bl	8002208 <memcpy>
 8002bbc:	4631      	mov	r1, r6
 8002bbe:	4640      	mov	r0, r8
 8002bc0:	f7ff fc72 	bl	80024a8 <_free_r>
 8002bc4:	e7e1      	b.n	8002b8a <_realloc_r+0x1e>
 8002bc6:	4635      	mov	r5, r6
 8002bc8:	e7df      	b.n	8002b8a <_realloc_r+0x1e>

08002bca <_malloc_usable_size_r>:
 8002bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bce:	1f18      	subs	r0, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bfbc      	itt	lt
 8002bd4:	580b      	ldrlt	r3, [r1, r0]
 8002bd6:	18c0      	addlt	r0, r0, r3
 8002bd8:	4770      	bx	lr
	...

08002bdc <_init>:
 8002bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bde:	bf00      	nop
 8002be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be2:	bc08      	pop	{r3}
 8002be4:	469e      	mov	lr, r3
 8002be6:	4770      	bx	lr

08002be8 <_fini>:
 8002be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bea:	bf00      	nop
 8002bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bee:	bc08      	pop	{r3}
 8002bf0:	469e      	mov	lr, r3
 8002bf2:	4770      	bx	lr
