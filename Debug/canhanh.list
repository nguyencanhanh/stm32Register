
canhanh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002630  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08002740  08002740  00012740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002808  08002808  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002808  08002808  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002808  08002808  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002808  08002808  00012808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800280c  0800280c  0001280c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001038  20000074  08002884  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010ac  08002884  000210ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000891b  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a18  00000000  00000000  000289b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0002a3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  0002ab20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000366c  00000000  00000000  0002b168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097dd  00000000  00000000  0002e7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088dbd  00000000  00000000  00037fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c0d6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002154  00000000  00000000  000c0dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08002728 	.word	0x08002728

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08002728 	.word	0x08002728

08000150 <GPIO_configureRCC>:
 *  Created on: Jun 5, 2023
 *      Author: nguye
 */
#include "GPIO_configure.h"

void GPIO_configureRCC(char* GPIOx){
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	while(*GPIOx){
 8000158:	e020      	b.n	800019c <GPIO_configureRCC+0x4c>
		if(*GPIOx == 'C') RCC->APB2ENR |= (1 << 4);
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	781b      	ldrb	r3, [r3, #0]
 800015e:	2b43      	cmp	r3, #67	; 0x43
 8000160:	d105      	bne.n	800016e <GPIO_configureRCC+0x1e>
 8000162:	4b13      	ldr	r3, [pc, #76]	; (80001b0 <GPIO_configureRCC+0x60>)
 8000164:	699b      	ldr	r3, [r3, #24]
 8000166:	4a12      	ldr	r2, [pc, #72]	; (80001b0 <GPIO_configureRCC+0x60>)
 8000168:	f043 0310 	orr.w	r3, r3, #16
 800016c:	6193      	str	r3, [r2, #24]
		if(*GPIOx == 'B') RCC->APB2ENR |= (1 << 3);
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	781b      	ldrb	r3, [r3, #0]
 8000172:	2b42      	cmp	r3, #66	; 0x42
 8000174:	d105      	bne.n	8000182 <GPIO_configureRCC+0x32>
 8000176:	4b0e      	ldr	r3, [pc, #56]	; (80001b0 <GPIO_configureRCC+0x60>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	4a0d      	ldr	r2, [pc, #52]	; (80001b0 <GPIO_configureRCC+0x60>)
 800017c:	f043 0308 	orr.w	r3, r3, #8
 8000180:	6193      	str	r3, [r2, #24]
		if(*GPIOx == 'A') RCC->APB2ENR |= (1 << 2);
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	2b41      	cmp	r3, #65	; 0x41
 8000188:	d105      	bne.n	8000196 <GPIO_configureRCC+0x46>
 800018a:	4b09      	ldr	r3, [pc, #36]	; (80001b0 <GPIO_configureRCC+0x60>)
 800018c:	699b      	ldr	r3, [r3, #24]
 800018e:	4a08      	ldr	r2, [pc, #32]	; (80001b0 <GPIO_configureRCC+0x60>)
 8000190:	f043 0304 	orr.w	r3, r3, #4
 8000194:	6193      	str	r3, [r2, #24]
		GPIOx++;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	3301      	adds	r3, #1
 800019a:	607b      	str	r3, [r7, #4]
	while(*GPIOx){
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d1da      	bne.n	800015a <GPIO_configureRCC+0xa>
	}
}
 80001a4:	bf00      	nop
 80001a6:	bf00      	nop
 80001a8:	370c      	adds	r7, #12
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr
 80001b0:	40021000 	.word	0x40021000

080001b4 <GPIO_configure>:
void GPIO_configure(GPIO_TypeDef*GPIOx, uint8_t* Pin, uint8_t* mode){
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	60f8      	str	r0, [r7, #12]
 80001bc:	60b9      	str	r1, [r7, #8]
 80001be:	607a      	str	r2, [r7, #4]
	while(*Pin){
 80001c0:	e03e      	b.n	8000240 <GPIO_configure+0x8c>
		if(*Pin > 7){
 80001c2:	68bb      	ldr	r3, [r7, #8]
 80001c4:	781b      	ldrb	r3, [r3, #0]
 80001c6:	2b07      	cmp	r3, #7
 80001c8:	d91b      	bls.n	8000202 <GPIO_configure+0x4e>
			GPIOx->CRH &= ~(15<<(*Pin * 4 - 32));
 80001ca:	68fb      	ldr	r3, [r7, #12]
 80001cc:	685b      	ldr	r3, [r3, #4]
 80001ce:	68ba      	ldr	r2, [r7, #8]
 80001d0:	7812      	ldrb	r2, [r2, #0]
 80001d2:	3a08      	subs	r2, #8
 80001d4:	0092      	lsls	r2, r2, #2
 80001d6:	210f      	movs	r1, #15
 80001d8:	fa01 f202 	lsl.w	r2, r1, r2
 80001dc:	43d2      	mvns	r2, r2
 80001de:	401a      	ands	r2, r3
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	605a      	str	r2, [r3, #4]
			GPIOx->CRH |= *mode << (*Pin * 4 - 32);
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	685b      	ldr	r3, [r3, #4]
 80001e8:	687a      	ldr	r2, [r7, #4]
 80001ea:	7812      	ldrb	r2, [r2, #0]
 80001ec:	4611      	mov	r1, r2
 80001ee:	68ba      	ldr	r2, [r7, #8]
 80001f0:	7812      	ldrb	r2, [r2, #0]
 80001f2:	3a08      	subs	r2, #8
 80001f4:	0092      	lsls	r2, r2, #2
 80001f6:	fa01 f202 	lsl.w	r2, r1, r2
 80001fa:	431a      	orrs	r2, r3
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	e018      	b.n	8000234 <GPIO_configure+0x80>
		}else{
			GPIOx->CRL &= ~(15<<(*Pin * 4));
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	68ba      	ldr	r2, [r7, #8]
 8000208:	7812      	ldrb	r2, [r2, #0]
 800020a:	0092      	lsls	r2, r2, #2
 800020c:	210f      	movs	r1, #15
 800020e:	fa01 f202 	lsl.w	r2, r1, r2
 8000212:	43d2      	mvns	r2, r2
 8000214:	401a      	ands	r2, r3
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	601a      	str	r2, [r3, #0]
			GPIOx->CRL |= *mode << (*Pin * 4);
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	7812      	ldrb	r2, [r2, #0]
 8000222:	4611      	mov	r1, r2
 8000224:	68ba      	ldr	r2, [r7, #8]
 8000226:	7812      	ldrb	r2, [r2, #0]
 8000228:	0092      	lsls	r2, r2, #2
 800022a:	fa01 f202 	lsl.w	r2, r1, r2
 800022e:	431a      	orrs	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	601a      	str	r2, [r3, #0]
		}
		Pin++;
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	3301      	adds	r3, #1
 8000238:	60bb      	str	r3, [r7, #8]
		mode++;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	3301      	adds	r3, #1
 800023e:	607b      	str	r3, [r7, #4]
	while(*Pin){
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d1bc      	bne.n	80001c2 <GPIO_configure+0xe>
	}
}
 8000248:	bf00      	nop
 800024a:	bf00      	nop
 800024c:	3714      	adds	r7, #20
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr

08000254 <I2C_GPIO_Config>:
#include"I2C_Configure.h"
#include "stm32f1xx.h"
void I2C_GPIO_Config(void) {
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
    // Báº­t clock cho GPIOB
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000258:	4b07      	ldr	r3, [pc, #28]	; (8000278 <I2C_GPIO_Config+0x24>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	4a06      	ldr	r2, [pc, #24]	; (8000278 <I2C_GPIO_Config+0x24>)
 800025e:	f043 0308 	orr.w	r3, r3, #8
 8000262:	6193      	str	r3, [r2, #24]
    GPIOB->CRL |= 0xFF000000;
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <I2C_GPIO_Config+0x28>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a04      	ldr	r2, [pc, #16]	; (800027c <I2C_GPIO_Config+0x28>)
 800026a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800026e:	6013      	str	r3, [r2, #0]
}
 8000270:	bf00      	nop
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	40021000 	.word	0x40021000
 800027c:	40010c00 	.word	0x40010c00

08000280 <SystemInitAnh>:
 *      Author: nguye
 */
#include "stm32f103.h"
#include "stm32f1xx.h"

void SystemInitAnh(void){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000284:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <SystemInitAnh+0x24>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a06      	ldr	r2, [pc, #24]	; (80002a4 <SystemInitAnh+0x24>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6193      	str	r3, [r2, #24]
	AFIO->MAPR |= AFIO_MAPR_SWJ_CFG;
 8000290:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <SystemInitAnh+0x28>)
 8000292:	685b      	ldr	r3, [r3, #4]
 8000294:	4a04      	ldr	r2, [pc, #16]	; (80002a8 <SystemInitAnh+0x28>)
 8000296:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800029a:	6053      	str	r3, [r2, #4]
}
 800029c:	bf00      	nop
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr
 80002a4:	40021000 	.word	0x40021000
 80002a8:	40010000 	.word	0x40010000

080002ac <RCC_Configure>:
void RCC_Configure(){
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON;
 80002b0:	4b2b      	ldr	r3, [pc, #172]	; (8000360 <RCC_Configure+0xb4>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a2a      	ldr	r2, [pc, #168]	; (8000360 <RCC_Configure+0xb4>)
 80002b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002ba:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 80002bc:	bf00      	nop
 80002be:	4b28      	ldr	r3, [pc, #160]	; (8000360 <RCC_Configure+0xb4>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d0f9      	beq.n	80002be <RCC_Configure+0x12>

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002ca:	4b25      	ldr	r3, [pc, #148]	; (8000360 <RCC_Configure+0xb4>)
 80002cc:	69db      	ldr	r3, [r3, #28]
 80002ce:	4a24      	ldr	r2, [pc, #144]	; (8000360 <RCC_Configure+0xb4>)
 80002d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002d4:	61d3      	str	r3, [r2, #28]

	FLASH->ACR |= FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 80002d6:	4b23      	ldr	r3, [pc, #140]	; (8000364 <RCC_Configure+0xb8>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a22      	ldr	r2, [pc, #136]	; (8000364 <RCC_Configure+0xb8>)
 80002dc:	f043 0312 	orr.w	r3, r3, #18
 80002e0:	6013      	str	r3, [r2, #0]
	while (!(FLASH->ACR & FLASH_ACR_PRFTBS));
 80002e2:	bf00      	nop
 80002e4:	4b1f      	ldr	r3, [pc, #124]	; (8000364 <RCC_Configure+0xb8>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	f003 0320 	and.w	r3, r3, #32
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d0f9      	beq.n	80002e4 <RCC_Configure+0x38>

	RCC->CFGR |= RCC_CFGR_PLLSRC;
 80002f0:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <RCC_Configure+0xb4>)
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	4a1a      	ldr	r2, [pc, #104]	; (8000360 <RCC_Configure+0xb4>)
 80002f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002fa:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (7 << 18); // nhÃ¢n RCC vá»i 9
 80002fc:	4b18      	ldr	r3, [pc, #96]	; (8000360 <RCC_Configure+0xb4>)
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	4a17      	ldr	r2, [pc, #92]	; (8000360 <RCC_Configure+0xb4>)
 8000302:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000306:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (4 << 8); // chia Äá» bus APB1 max 36
 8000308:	4b15      	ldr	r3, [pc, #84]	; (8000360 <RCC_Configure+0xb4>)
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	4a14      	ldr	r2, [pc, #80]	; (8000360 <RCC_Configure+0xb4>)
 800030e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000312:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (3 << 14); // chia ADC cho 6 = 9M
 8000314:	4b12      	ldr	r3, [pc, #72]	; (8000360 <RCC_Configure+0xb4>)
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	4a11      	ldr	r2, [pc, #68]	; (8000360 <RCC_Configure+0xb4>)
 800031a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800031e:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 8000320:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <RCC_Configure+0xb4>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <RCC_Configure+0xb4>)
 8000326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800032a:	6013      	str	r3, [r2, #0]

	while (!(RCC->CR & RCC_CR_PLLRDY));
 800032c:	bf00      	nop
 800032e:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <RCC_Configure+0xb4>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000336:	2b00      	cmp	r3, #0
 8000338:	d0f9      	beq.n	800032e <RCC_Configure+0x82>
	RCC->CFGR |= (2 << 0);
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <RCC_Configure+0xb4>)
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	4a08      	ldr	r2, [pc, #32]	; (8000360 <RCC_Configure+0xb4>)
 8000340:	f043 0302 	orr.w	r3, r3, #2
 8000344:	6053      	str	r3, [r2, #4]
	while (!(RCC->CFGR & (2 << 2)));
 8000346:	bf00      	nop
 8000348:	4b05      	ldr	r3, [pc, #20]	; (8000360 <RCC_Configure+0xb4>)
 800034a:	685b      	ldr	r3, [r3, #4]
 800034c:	f003 0308 	and.w	r3, r3, #8
 8000350:	2b00      	cmp	r3, #0
 8000352:	d0f9      	beq.n	8000348 <RCC_Configure+0x9c>
}
 8000354:	bf00      	nop
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40021000 	.word	0x40021000
 8000364:	40022000 	.word	0x40022000

08000368 <TIM2_Configure>:
#include "TIM_Configure.h"
#include "stm32f1xx.h"

#define UP  1
#define DO  0
void TIM2_Configure(uint16_t PSC, uint32_t ARR){
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	6039      	str	r1, [r7, #0]
 8000372:	80fb      	strh	r3, [r7, #6]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000374:	4b11      	ldr	r3, [pc, #68]	; (80003bc <TIM2_Configure+0x54>)
 8000376:	69db      	ldr	r3, [r3, #28]
 8000378:	4a10      	ldr	r2, [pc, #64]	; (80003bc <TIM2_Configure+0x54>)
 800037a:	f043 0301 	orr.w	r3, r3, #1
 800037e:	61d3      	str	r3, [r2, #28]
	TIM2->PSC = PSC;
 8000380:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000384:	88fb      	ldrh	r3, [r7, #6]
 8000386:	6293      	str	r3, [r2, #40]	; 0x28
	TIM2->ARR = ARR;
 8000388:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CR1 |= (1 << 0);
 8000390:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800039a:	f043 0301 	orr.w	r3, r3, #1
 800039e:	6013      	str	r3, [r2, #0]
	while (!(TIM2->SR & TIM_SR_UIF));
 80003a0:	bf00      	nop
 80003a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	f003 0301 	and.w	r3, r3, #1
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0f8      	beq.n	80003a2 <TIM2_Configure+0x3a>
}
 80003b0:	bf00      	nop
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	40021000 	.word	0x40021000

080003c0 <delay_us2>:
	TIM4->CR1 |= TIM_CR1_ARPE | TIM_CR1_URS;
	TIM4->EGR |= TIM_EGR_UG;
	NVIC_EnableIRQ(TIM4_IRQn);
	TIM4->CR1 |= TIM_CR1_CEN;
}
void delay_us2(uint16_t us){
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	80fb      	strh	r3, [r7, #6]
	TIM2->CNT = 0;
 80003ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ce:	2200      	movs	r2, #0
 80003d0:	625a      	str	r2, [r3, #36]	; 0x24
	while (TIM2->CNT < us);
 80003d2:	bf00      	nop
 80003d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003da:	88fb      	ldrh	r3, [r7, #6]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d3f9      	bcc.n	80003d4 <delay_us2+0x14>
}
 80003e0:	bf00      	nop
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr

080003ec <delay_ms2>:
void delay_us1(uint16_t us){
	TIM1->CNT = 0;
	while (TIM1->CNT < us);
}
void delay_ms2(uint16_t ms){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	80fb      	strh	r3, [r7, #6]
	while (ms--){
 80003f6:	e003      	b.n	8000400 <delay_ms2+0x14>
		delay_us2(1000);
 80003f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003fc:	f7ff ffe0 	bl	80003c0 <delay_us2>
	while (ms--){
 8000400:	88fb      	ldrh	r3, [r7, #6]
 8000402:	1e5a      	subs	r2, r3, #1
 8000404:	80fa      	strh	r2, [r7, #6]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d1f6      	bne.n	80003f8 <delay_ms2+0xc>
	}
}
 800040a:	bf00      	nop
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <UART_SendData>:
	USART1->CR1 |= (1 << 2) | (1 << 3) | (1 << 5) ;
//	NVIC_EnableIRQ(USART1_IRQn);
//	NVIC_SetPriority(USART1_IRQn, 1);
	USART1->CR1 |= (1 << 13);
}
void UART_SendData(char* str){
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
	while (*str){
 800041c:	e00d      	b.n	800043a <UART_SendData+0x26>
		while (!(USART1->SR & (1 << 7)));
 800041e:	bf00      	nop
 8000420:	4b0e      	ldr	r3, [pc, #56]	; (800045c <UART_SendData+0x48>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000428:	2b00      	cmp	r3, #0
 800042a:	d0f9      	beq.n	8000420 <UART_SendData+0xc>
		USART1->DR = *str;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	781a      	ldrb	r2, [r3, #0]
 8000430:	4b0a      	ldr	r3, [pc, #40]	; (800045c <UART_SendData+0x48>)
 8000432:	605a      	str	r2, [r3, #4]
		str++;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	3301      	adds	r3, #1
 8000438:	607b      	str	r3, [r7, #4]
	while (*str){
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d1ed      	bne.n	800041e <UART_SendData+0xa>
	}
	while (!(USART1->SR & (1 << 6)));
 8000442:	bf00      	nop
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <UART_SendData+0x48>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800044c:	2b00      	cmp	r3, #0
 800044e:	d0f9      	beq.n	8000444 <UART_SendData+0x30>
}
 8000450:	bf00      	nop
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	40013800 	.word	0x40013800

08000460 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	60f8      	str	r0, [r7, #12]
 8000468:	60b9      	str	r1, [r7, #8]
 800046a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	4a06      	ldr	r2, [pc, #24]	; (8000488 <vApplicationGetIdleTaskMemory+0x28>)
 8000470:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	4a05      	ldr	r2, [pc, #20]	; (800048c <vApplicationGetIdleTaskMemory+0x2c>)
 8000476:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2280      	movs	r2, #128	; 0x80
 800047c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800047e:	bf00      	nop
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	20000090 	.word	0x20000090
 800048c:	20000144 	.word	0x20000144

08000490 <__io_putchar>:
#include "I2C_Configure.h"
#include "PWM.h"
#include "LiquidCrystal_I2C.h"
#include "FreeRTOSConfig.h"
#include "cmsis_os.h"
int __io_putchar(int ch) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
    UART_SendData((char*)&ch);
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff ffba 	bl	8000414 <UART_SendData>
    return ch;
 80004a0:	687b      	ldr	r3, [r7, #4]
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <main>:
uint8_t GPIOB_mode[] = {1,1};
//uint8_t GPIOA_Pin[] = {3,4};
//uint8_t numberADC[2] = {3,4};
//uint8_t GPIOA_mode[] = {0,0};
//uint16_t buffer[2];
int main(void){
 80004ac:	b5b0      	push	{r4, r5, r7, lr}
 80004ae:	b08e      	sub	sp, #56	; 0x38
 80004b0:	af00      	add	r7, sp, #0
	SystemInitAnh();
 80004b2:	f7ff fee5 	bl	8000280 <SystemInitAnh>
	RCC_Configure();
 80004b6:	f7ff fef9 	bl	80002ac <RCC_Configure>
	TIM2_Configure(71, 0xFFFF);
 80004ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80004be:	2047      	movs	r0, #71	; 0x47
 80004c0:	f7ff ff52 	bl	8000368 <TIM2_Configure>
	I2C_GPIO_Config();
 80004c4:	f7ff fec6 	bl	8000254 <I2C_GPIO_Config>
	GPIO_configureRCC("AB");
 80004c8:	481f      	ldr	r0, [pc, #124]	; (8000548 <main+0x9c>)
 80004ca:	f7ff fe41 	bl	8000150 <GPIO_configureRCC>
//	GPIO_configure((GPIO_TypeDef*)GPIOC, (uint8_t*)GPIOC_Pin ,(uint8_t*)GPIOC_mode);
	GPIO_configure((GPIO_TypeDef*)GPIOB, (uint8_t*)GPIOB_Pin ,(uint8_t*)GPIOB_mode);
 80004ce:	4a1f      	ldr	r2, [pc, #124]	; (800054c <main+0xa0>)
 80004d0:	491f      	ldr	r1, [pc, #124]	; (8000550 <main+0xa4>)
 80004d2:	4820      	ldr	r0, [pc, #128]	; (8000554 <main+0xa8>)
 80004d4:	f7ff fe6e 	bl	80001b4 <GPIO_configure>
//	TIMx_PWM_Init((TIM_TypeDef*)TIM1, 1, 9999, 71);
//	ADC1_Configure((uint8_t*)numberADC, 5, 2);
//	UART_Configure();
//	DMA_ConfigureADC((uint32_t*)buffer, 2);
//	TIM4_Configure(7199, 999);
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80004d8:	4b1f      	ldr	r3, [pc, #124]	; (8000558 <main+0xac>)
 80004da:	f107 041c 	add.w	r4, r7, #28
 80004de:	461d      	mov	r5, r3
 80004e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80004ec:	f107 031c 	add.w	r3, r7, #28
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 f99d 	bl	8000832 <osThreadCreate>
 80004f8:	4603      	mov	r3, r0
 80004fa:	4a18      	ldr	r2, [pc, #96]	; (800055c <main+0xb0>)
 80004fc:	6013      	str	r3, [r2, #0]
	osThreadDef(task2, StartDefaultTask2, osPriorityBelowNormal, 0, 128);
 80004fe:	4b18      	ldr	r3, [pc, #96]	; (8000560 <main+0xb4>)
 8000500:	463c      	mov	r4, r7
 8000502:	461d      	mov	r5, r3
 8000504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000508:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800050c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	task2 = osThreadCreate(osThread(task2), NULL);
 8000510:	463b      	mov	r3, r7
 8000512:	2100      	movs	r1, #0
 8000514:	4618      	mov	r0, r3
 8000516:	f000 f98c 	bl	8000832 <osThreadCreate>
 800051a:	4603      	mov	r3, r0
 800051c:	4a11      	ldr	r2, [pc, #68]	; (8000564 <main+0xb8>)
 800051e:	6013      	str	r3, [r2, #0]
	osKernelStart();
 8000520:	f000 f980 	bl	8000824 <osKernelStart>
	while(1){
		GPIOB->ODR^=(1<<13);
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <main+0xa8>)
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <main+0xa8>)
 800052a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800052e:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR^=(1<<12);
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <main+0xa8>)
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	4a07      	ldr	r2, [pc, #28]	; (8000554 <main+0xa8>)
 8000536:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800053a:	60d3      	str	r3, [r2, #12]
//		GPIOC->ODR^=(1<<13);
//		for (int i = 0; i < 1000000; i++);
		delay_ms2(2000);
 800053c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000540:	f7ff ff54 	bl	80003ec <delay_ms2>
		GPIOB->ODR^=(1<<13);
 8000544:	e7ee      	b.n	8000524 <main+0x78>
 8000546:	bf00      	nop
 8000548:	08002754 	.word	0x08002754
 800054c:	20000004 	.word	0x20000004
 8000550:	20000000 	.word	0x20000000
 8000554:	40010c00 	.word	0x40010c00
 8000558:	08002758 	.word	0x08002758
 800055c:	20000344 	.word	0x20000344
 8000560:	08002774 	.word	0x08002774
 8000564:	20000348 	.word	0x20000348

08000568 <StartDefaultTask>:
	}
}
void StartDefaultTask(void const * argument)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 uint8_t count = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	73fb      	strb	r3, [r7, #15]
 JUM1:
 for(;;){
	 if(!(GPIOA->IDR & (1 << 0)) && count == 0){
 8000574:	4b1d      	ldr	r3, [pc, #116]	; (80005ec <StartDefaultTask+0x84>)
 8000576:	689b      	ldr	r3, [r3, #8]
 8000578:	f003 0301 	and.w	r3, r3, #1
 800057c:	2b00      	cmp	r3, #0
 800057e:	d106      	bne.n	800058e <StartDefaultTask+0x26>
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d103      	bne.n	800058e <StartDefaultTask+0x26>
		 count=1;
 8000586:	2301      	movs	r3, #1
 8000588:	73fb      	strb	r3, [r7, #15]
		 goto JUM2;
 800058a:	bf00      	nop
 800058c:	e010      	b.n	80005b0 <StartDefaultTask+0x48>
	 }
	GPIOB->ODR^=(1<<13);
 800058e:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <StartDefaultTask+0x88>)
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <StartDefaultTask+0x88>)
 8000594:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000598:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR^=(1<<12);
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <StartDefaultTask+0x88>)
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	4a14      	ldr	r2, [pc, #80]	; (80005f0 <StartDefaultTask+0x88>)
 80005a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80005a4:	60d3      	str	r3, [r2, #12]
	osDelay(1000);
 80005a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005aa:	f000 f98e 	bl	80008ca <osDelay>
	 if(!(GPIOA->IDR & (1 << 0)) && count == 0){
 80005ae:	e7e1      	b.n	8000574 <StartDefaultTask+0xc>
 }
 JUM2:
 for(;;){
	 if((GPIOA->IDR & (1 << 0)) && count == 1){
 80005b0:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <StartDefaultTask+0x84>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d005      	beq.n	80005c8 <StartDefaultTask+0x60>
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d102      	bne.n	80005c8 <StartDefaultTask+0x60>
		 count=0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	73fb      	strb	r3, [r7, #15]
		 goto JUM1;
 80005c6:	e7d5      	b.n	8000574 <StartDefaultTask+0xc>
	 }
	 GPIOB->ODR^=(1<<13);
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <StartDefaultTask+0x88>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	4a08      	ldr	r2, [pc, #32]	; (80005f0 <StartDefaultTask+0x88>)
 80005ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80005d2:	60d3      	str	r3, [r2, #12]
	 GPIOB->ODR^=(1<<12);
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <StartDefaultTask+0x88>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	4a05      	ldr	r2, [pc, #20]	; (80005f0 <StartDefaultTask+0x88>)
 80005da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80005de:	60d3      	str	r3, [r2, #12]
	 osDelay(3000);
 80005e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005e4:	f000 f971 	bl	80008ca <osDelay>
	 if((GPIOA->IDR & (1 << 0)) && count == 1){
 80005e8:	e7e2      	b.n	80005b0 <StartDefaultTask+0x48>
 80005ea:	bf00      	nop
 80005ec:	40010800 	.word	0x40010800
 80005f0:	40010c00 	.word	0x40010c00

080005f4 <StartDefaultTask2>:
 }
}
void StartDefaultTask2(void const * argument)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 for(;;)
 {
	printf("canhanh2\n");
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <StartDefaultTask2+0x18>)
 80005fe:	f001 fd2d 	bl	800205c <puts>
   	osDelay(1000);
 8000602:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000606:	f000 f960 	bl	80008ca <osDelay>
	printf("canhanh2\n");
 800060a:	e7f7      	b.n	80005fc <StartDefaultTask2+0x8>
 800060c:	08002790 	.word	0x08002790

08000610 <TIM4_IRQHandler>:
 }
}
void TIM4_IRQHandler(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	if (TIM4->SR & TIM_SR_UIF) {
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <TIM4_IRQHandler+0x24>)
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	2b00      	cmp	r3, #0
 800061e:	d007      	beq.n	8000630 <TIM4_IRQHandler+0x20>
		xPortSysTickHandler();
 8000620:	f001 f8d2 	bl	80017c8 <SysTick_Handler>
		TIM4->SR &= ~TIM_SR_UIF;
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <TIM4_IRQHandler+0x24>)
 8000626:	691b      	ldr	r3, [r3, #16]
 8000628:	4a02      	ldr	r2, [pc, #8]	; (8000634 <TIM4_IRQHandler+0x24>)
 800062a:	f023 0301 	bic.w	r3, r3, #1
 800062e:	6113      	str	r3, [r2, #16]
	}
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40000800 	.word	0x40000800

08000638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800063c:	e7fe      	b.n	800063c <NMI_Handler+0x4>

0800063e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000642:	e7fe      	b.n	8000642 <HardFault_Handler+0x4>

08000644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <MemManage_Handler+0x4>

0800064a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <BusFault_Handler+0x4>

08000650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <UsageFault_Handler+0x4>

08000656 <DebugMon_Handler>:
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    /* USER CODE END W1_UsageFault_IRQn 0 */
  }
}
void DebugMon_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr

08000662 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b086      	sub	sp, #24
 8000666:	af00      	add	r7, sp, #0
 8000668:	60f8      	str	r0, [r7, #12]
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	e00a      	b.n	800068a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000674:	f3af 8000 	nop.w
 8000678:	4601      	mov	r1, r0
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	1c5a      	adds	r2, r3, #1
 800067e:	60ba      	str	r2, [r7, #8]
 8000680:	b2ca      	uxtb	r2, r1
 8000682:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	3301      	adds	r3, #1
 8000688:	617b      	str	r3, [r7, #20]
 800068a:	697a      	ldr	r2, [r7, #20]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	429a      	cmp	r2, r3
 8000690:	dbf0      	blt.n	8000674 <_read+0x12>
  }

  return len;
 8000692:	687b      	ldr	r3, [r7, #4]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
 80006ac:	e009      	b.n	80006c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	60ba      	str	r2, [r7, #8]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff feea 	bl	8000490 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	3301      	adds	r3, #1
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	697a      	ldr	r2, [r7, #20]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	dbf1      	blt.n	80006ae <_write+0x12>
  }
  return len;
 80006ca:	687b      	ldr	r3, [r7, #4]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <_close>:

int _close(int file)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr

080006ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
 80006f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006fa:	605a      	str	r2, [r3, #4]
  return 0;
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <_isatty>:

int _isatty(int file)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000710:	2301      	movs	r3, #1
}
 8000712:	4618      	mov	r0, r3
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800073c:	4a14      	ldr	r2, [pc, #80]	; (8000790 <_sbrk+0x5c>)
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <_sbrk+0x60>)
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <_sbrk+0x64>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d102      	bne.n	8000756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <_sbrk+0x64>)
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <_sbrk+0x68>)
 8000754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <_sbrk+0x64>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4413      	add	r3, r2
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	429a      	cmp	r2, r3
 8000762:	d207      	bcs.n	8000774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000764:	f001 fa4c 	bl	8001c00 <__errno>
 8000768:	4603      	mov	r3, r0
 800076a:	220c      	movs	r2, #12
 800076c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	e009      	b.n	8000788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <_sbrk+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <_sbrk+0x64>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	4a05      	ldr	r2, [pc, #20]	; (8000798 <_sbrk+0x64>)
 8000784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;}
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	4618      	mov	r0, r3
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20005000 	.word	0x20005000
 8000794:	00000400 	.word	0x00000400
 8000798:	2000034c 	.word	0x2000034c
 800079c:	200010b0 	.word	0x200010b0

080007a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr

080007ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007ac:	f7ff fff8 	bl	80007a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b0:	480b      	ldr	r0, [pc, #44]	; (80007e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007b2:	490c      	ldr	r1, [pc, #48]	; (80007e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007b4:	4a0c      	ldr	r2, [pc, #48]	; (80007e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b8:	e002      	b.n	80007c0 <LoopCopyDataInit>

080007ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007be:	3304      	adds	r3, #4

080007c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c4:	d3f9      	bcc.n	80007ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c6:	4a09      	ldr	r2, [pc, #36]	; (80007ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007c8:	4c09      	ldr	r4, [pc, #36]	; (80007f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007cc:	e001      	b.n	80007d2 <LoopFillZerobss>

080007ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d0:	3204      	adds	r2, #4

080007d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d4:	d3fb      	bcc.n	80007ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007d6:	f001 fb0f 	bl	8001df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007da:	f7ff fe67 	bl	80004ac <main>
  bx lr
 80007de:	4770      	bx	lr
  ldr r0, =_sdata
 80007e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80007e8:	08002810 	.word	0x08002810
  ldr r2, =_sbss
 80007ec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80007f0:	200010ac 	.word	0x200010ac

080007f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f4:	e7fe      	b.n	80007f4 <ADC1_2_IRQHandler>

080007f6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80007f6:	b480      	push	{r7}
 80007f8:	b085      	sub	sp, #20
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	4603      	mov	r3, r0
 80007fe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8000804:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000808:	2b84      	cmp	r3, #132	; 0x84
 800080a:	d005      	beq.n	8000818 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800080c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	4413      	add	r3, r2
 8000814:	3303      	adds	r3, #3
 8000816:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8000818:	68fb      	ldr	r3, [r7, #12]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8000828:	f000 faea 	bl	8000e00 <vTaskStartScheduler>
  
  return osOK;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	bd80      	pop	{r7, pc}

08000832 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000832:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000834:	b089      	sub	sp, #36	; 0x24
 8000836:	af04      	add	r7, sp, #16
 8000838:	6078      	str	r0, [r7, #4]
 800083a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d020      	beq.n	8000886 <osThreadCreate+0x54>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d01c      	beq.n	8000886 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	685c      	ldr	r4, [r3, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681d      	ldr	r5, [r3, #0]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	691e      	ldr	r6, [r3, #16]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ffc9 	bl	80007f6 <makeFreeRtosPriority>
 8000864:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800086e:	9202      	str	r2, [sp, #8]
 8000870:	9301      	str	r3, [sp, #4]
 8000872:	9100      	str	r1, [sp, #0]
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	4632      	mov	r2, r6
 8000878:	4629      	mov	r1, r5
 800087a:	4620      	mov	r0, r4
 800087c:	f000 f8eb 	bl	8000a56 <xTaskCreateStatic>
 8000880:	4603      	mov	r3, r0
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	e01c      	b.n	80008c0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	685c      	ldr	r4, [r3, #4]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000892:	b29e      	uxth	r6, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ffab 	bl	80007f6 <makeFreeRtosPriority>
 80008a0:	4602      	mov	r2, r0
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	9301      	str	r3, [sp, #4]
 80008a8:	9200      	str	r2, [sp, #0]
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	4632      	mov	r2, r6
 80008ae:	4629      	mov	r1, r5
 80008b0:	4620      	mov	r0, r4
 80008b2:	f000 f92c 	bl	8000b0e <xTaskCreate>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d001      	beq.n	80008c0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	e000      	b.n	80008c2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80008c0:	68fb      	ldr	r3, [r7, #12]
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008ca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b084      	sub	sp, #16
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec*5;
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	4613      	mov	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	4413      	add	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <osDelay+0x1c>
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	e000      	b.n	80008e8 <osDelay+0x1e>
 80008e6:	2301      	movs	r3, #1
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 fa55 	bl	8000d98 <vTaskDelay>
  
  return osOK;
 80008ee:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f103 0208 	add.w	r2, r3, #8
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f04f 32ff 	mov.w	r2, #4294967295
 8000910:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f103 0208 	add.w	r2, r3, #8
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f103 0208 	add.w	r2, r3, #8
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr

08000936 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr

0800094e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800094e:	b480      	push	{r7}
 8000950:	b085      	sub	sp, #20
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	68fa      	ldr	r2, [r7, #12]
 8000962:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	689a      	ldr	r2, [r3, #8]
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	683a      	ldr	r2, [r7, #0]
 8000972:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	683a      	ldr	r2, [r7, #0]
 8000978:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	1c5a      	adds	r2, r3, #1
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	601a      	str	r2, [r3, #0]
}
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009aa:	d103      	bne.n	80009b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	691b      	ldr	r3, [r3, #16]
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	e00c      	b.n	80009ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3308      	adds	r3, #8
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	e002      	b.n	80009c2 <vListInsert+0x2e>
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	68ba      	ldr	r2, [r7, #8]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d2f6      	bcs.n	80009bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	685a      	ldr	r2, [r3, #4]
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	683a      	ldr	r2, [r7, #0]
 80009dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	683a      	ldr	r2, [r7, #0]
 80009e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	601a      	str	r2, [r3, #0]
}
 80009fa:	bf00      	nop
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	691b      	ldr	r3, [r3, #16]
 8000a10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	6892      	ldr	r2, [r2, #8]
 8000a1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	6852      	ldr	r2, [r2, #4]
 8000a24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d103      	bne.n	8000a38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	1e5a      	subs	r2, r3, #1
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	681b      	ldr	r3, [r3, #0]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr

08000a56 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b08e      	sub	sp, #56	; 0x38
 8000a5a:	af04      	add	r7, sp, #16
 8000a5c:	60f8      	str	r0, [r7, #12]
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8000a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d10a      	bne.n	8000a80 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a6e:	f383 8811 	msr	BASEPRI, r3
 8000a72:	f3bf 8f6f 	isb	sy
 8000a76:	f3bf 8f4f 	dsb	sy
 8000a7a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a7c:	bf00      	nop
 8000a7e:	e7fe      	b.n	8000a7e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8000a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d10a      	bne.n	8000a9c <xTaskCreateStatic+0x46>
	__asm volatile
 8000a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a8a:	f383 8811 	msr	BASEPRI, r3
 8000a8e:	f3bf 8f6f 	isb	sy
 8000a92:	f3bf 8f4f 	dsb	sy
 8000a96:	61fb      	str	r3, [r7, #28]
}
 8000a98:	bf00      	nop
 8000a9a:	e7fe      	b.n	8000a9a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8000a9c:	23b4      	movs	r3, #180	; 0xb4
 8000a9e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	2bb4      	cmp	r3, #180	; 0xb4
 8000aa4:	d00a      	beq.n	8000abc <xTaskCreateStatic+0x66>
	__asm volatile
 8000aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aaa:	f383 8811 	msr	BASEPRI, r3
 8000aae:	f3bf 8f6f 	isb	sy
 8000ab2:	f3bf 8f4f 	dsb	sy
 8000ab6:	61bb      	str	r3, [r7, #24]
}
 8000ab8:	bf00      	nop
 8000aba:	e7fe      	b.n	8000aba <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8000abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d01e      	beq.n	8000b00 <xTaskCreateStatic+0xaa>
 8000ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d01b      	beq.n	8000b00 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ad0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8000ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8000ada:	2300      	movs	r3, #0
 8000adc:	9303      	str	r3, [sp, #12]
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	9302      	str	r3, [sp, #8]
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	68b9      	ldr	r1, [r7, #8]
 8000af2:	68f8      	ldr	r0, [r7, #12]
 8000af4:	f000 f850 	bl	8000b98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000af8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000afa:	f000 f8e3 	bl	8000cc4 <prvAddNewTaskToReadyList>
 8000afe:	e001      	b.n	8000b04 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8000b04:	697b      	ldr	r3, [r7, #20]
	}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3728      	adds	r7, #40	; 0x28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b08c      	sub	sp, #48	; 0x30
 8000b12:	af04      	add	r7, sp, #16
 8000b14:	60f8      	str	r0, [r7, #12]
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000b1e:	88fb      	ldrh	r3, [r7, #6]
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 fe94 	bl	8001850 <pvPortMalloc>
 8000b28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d00e      	beq.n	8000b4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8000b30:	20b4      	movs	r0, #180	; 0xb4
 8000b32:	f000 fe8d 	bl	8001850 <pvPortMalloc>
 8000b36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d003      	beq.n	8000b46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	631a      	str	r2, [r3, #48]	; 0x30
 8000b44:	e005      	b.n	8000b52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000b46:	6978      	ldr	r0, [r7, #20]
 8000b48:	f000 ff46 	bl	80019d8 <vPortFree>
 8000b4c:	e001      	b.n	8000b52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d017      	beq.n	8000b88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000b60:	88fa      	ldrh	r2, [r7, #6]
 8000b62:	2300      	movs	r3, #0
 8000b64:	9303      	str	r3, [sp, #12]
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	9302      	str	r3, [sp, #8]
 8000b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6c:	9301      	str	r3, [sp, #4]
 8000b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	68b9      	ldr	r1, [r7, #8]
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	f000 f80e 	bl	8000b98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000b7c:	69f8      	ldr	r0, [r7, #28]
 8000b7e:	f000 f8a1 	bl	8000cc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61bb      	str	r3, [r7, #24]
 8000b86:	e002      	b.n	8000b8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000b88:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000b8e:	69bb      	ldr	r3, [r7, #24]
	}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3720      	adds	r7, #32
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
 8000ba4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8000ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	4413      	add	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	f023 0307 	bic.w	r3, r3, #7
 8000bbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d00a      	beq.n	8000be0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8000bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bce:	f383 8811 	msr	BASEPRI, r3
 8000bd2:	f3bf 8f6f 	isb	sy
 8000bd6:	f3bf 8f4f 	dsb	sy
 8000bda:	617b      	str	r3, [r7, #20]
}
 8000bdc:	bf00      	nop
 8000bde:	e7fe      	b.n	8000bde <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
 8000be4:	e012      	b.n	8000c0c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	4413      	add	r3, r2
 8000bec:	7819      	ldrb	r1, [r3, #0]
 8000bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	3334      	adds	r3, #52	; 0x34
 8000bf6:	460a      	mov	r2, r1
 8000bf8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	4413      	add	r3, r2
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d006      	beq.n	8000c14 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	61fb      	str	r3, [r7, #28]
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	2b0f      	cmp	r3, #15
 8000c10:	d9e9      	bls.n	8000be6 <prvInitialiseNewTask+0x4e>
 8000c12:	e000      	b.n	8000c16 <prvInitialiseNewTask+0x7e>
		{
			break;
 8000c14:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c20:	2b06      	cmp	r3, #6
 8000c22:	d901      	bls.n	8000c28 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000c24:	2306      	movs	r3, #6
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c32:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8000c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c36:	2200      	movs	r2, #0
 8000c38:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fe79 	bl	8000936 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c46:	3318      	adds	r3, #24
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fe74 	bl	8000936 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c56:	f1c3 0207 	rsb	r2, r3, #7
 8000c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c66:	2200      	movs	r2, #0
 8000c68:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8000c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c76:	334c      	adds	r3, #76	; 0x4c
 8000c78:	2260      	movs	r2, #96	; 0x60
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f001 f8e2 	bl	8001e46 <memset>
 8000c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c84:	4a0c      	ldr	r2, [pc, #48]	; (8000cb8 <prvInitialiseNewTask+0x120>)
 8000c86:	651a      	str	r2, [r3, #80]	; 0x50
 8000c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c8a:	4a0c      	ldr	r2, [pc, #48]	; (8000cbc <prvInitialiseNewTask+0x124>)
 8000c8c:	655a      	str	r2, [r3, #84]	; 0x54
 8000c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c90:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <prvInitialiseNewTask+0x128>)
 8000c92:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	68f9      	ldr	r1, [r7, #12]
 8000c98:	69b8      	ldr	r0, [r7, #24]
 8000c9a:	f000 fc29 	bl	80014f0 <pxPortInitialiseStack>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8000ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d002      	beq.n	8000cb0 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	080027c4 	.word	0x080027c4
 8000cbc:	080027e4 	.word	0x080027e4
 8000cc0:	080027a4 	.word	0x080027a4

08000cc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000ccc:	f000 fcfe 	bl	80016cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000cd0:	4b2a      	ldr	r3, [pc, #168]	; (8000d7c <prvAddNewTaskToReadyList+0xb8>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	4a29      	ldr	r2, [pc, #164]	; (8000d7c <prvAddNewTaskToReadyList+0xb8>)
 8000cd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000cda:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <prvAddNewTaskToReadyList+0xbc>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d109      	bne.n	8000cf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000ce2:	4a27      	ldr	r2, [pc, #156]	; (8000d80 <prvAddNewTaskToReadyList+0xbc>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000ce8:	4b24      	ldr	r3, [pc, #144]	; (8000d7c <prvAddNewTaskToReadyList+0xb8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d110      	bne.n	8000d12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000cf0:	f000 fad2 	bl	8001298 <prvInitialiseTaskLists>
 8000cf4:	e00d      	b.n	8000d12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000cf6:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <prvAddNewTaskToReadyList+0xc0>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d109      	bne.n	8000d12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000cfe:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <prvAddNewTaskToReadyList+0xbc>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d802      	bhi.n	8000d12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000d0c:	4a1c      	ldr	r2, [pc, #112]	; (8000d80 <prvAddNewTaskToReadyList+0xbc>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <prvAddNewTaskToReadyList+0xc4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	4a1b      	ldr	r2, [pc, #108]	; (8000d88 <prvAddNewTaskToReadyList+0xc4>)
 8000d1a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d20:	2201      	movs	r2, #1
 8000d22:	409a      	lsls	r2, r3
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <prvAddNewTaskToReadyList+0xc8>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	4a18      	ldr	r2, [pc, #96]	; (8000d8c <prvAddNewTaskToReadyList+0xc8>)
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d32:	4613      	mov	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4a15      	ldr	r2, [pc, #84]	; (8000d90 <prvAddNewTaskToReadyList+0xcc>)
 8000d3c:	441a      	add	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	3304      	adds	r3, #4
 8000d42:	4619      	mov	r1, r3
 8000d44:	4610      	mov	r0, r2
 8000d46:	f7ff fe02 	bl	800094e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000d4a:	f000 fcef 	bl	800172c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <prvAddNewTaskToReadyList+0xc0>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d00e      	beq.n	8000d74 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <prvAddNewTaskToReadyList+0xbc>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d207      	bcs.n	8000d74 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <prvAddNewTaskToReadyList+0xd0>)
 8000d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	f3bf 8f4f 	dsb	sy
 8000d70:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000450 	.word	0x20000450
 8000d80:	20000350 	.word	0x20000350
 8000d84:	2000045c 	.word	0x2000045c
 8000d88:	2000046c 	.word	0x2000046c
 8000d8c:	20000458 	.word	0x20000458
 8000d90:	20000354 	.word	0x20000354
 8000d94:	e000ed04 	.word	0xe000ed04

08000d98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d017      	beq.n	8000dda <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <vTaskDelay+0x60>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d00a      	beq.n	8000dc8 <vTaskDelay+0x30>
	__asm volatile
 8000db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000db6:	f383 8811 	msr	BASEPRI, r3
 8000dba:	f3bf 8f6f 	isb	sy
 8000dbe:	f3bf 8f4f 	dsb	sy
 8000dc2:	60bb      	str	r3, [r7, #8]
}
 8000dc4:	bf00      	nop
 8000dc6:	e7fe      	b.n	8000dc6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8000dc8:	f000 f884 	bl	8000ed4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000dcc:	2100      	movs	r1, #0
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f000 fb28 	bl	8001424 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8000dd4:	f000 f88c 	bl	8000ef0 <xTaskResumeAll>
 8000dd8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d107      	bne.n	8000df0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <vTaskDelay+0x64>)
 8000de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	f3bf 8f4f 	dsb	sy
 8000dec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8000df0:	bf00      	nop
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000478 	.word	0x20000478
 8000dfc:	e000ed04 	.word	0xe000ed04

08000e00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8000e0e:	463a      	mov	r2, r7
 8000e10:	1d39      	adds	r1, r7, #4
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fb22 	bl	8000460 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8000e1c:	6839      	ldr	r1, [r7, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68ba      	ldr	r2, [r7, #8]
 8000e22:	9202      	str	r2, [sp, #8]
 8000e24:	9301      	str	r3, [sp, #4]
 8000e26:	2300      	movs	r3, #0
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	460a      	mov	r2, r1
 8000e2e:	4921      	ldr	r1, [pc, #132]	; (8000eb4 <vTaskStartScheduler+0xb4>)
 8000e30:	4821      	ldr	r0, [pc, #132]	; (8000eb8 <vTaskStartScheduler+0xb8>)
 8000e32:	f7ff fe10 	bl	8000a56 <xTaskCreateStatic>
 8000e36:	4603      	mov	r3, r0
 8000e38:	4a20      	ldr	r2, [pc, #128]	; (8000ebc <vTaskStartScheduler+0xbc>)
 8000e3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8000e3c:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <vTaskStartScheduler+0xbc>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d002      	beq.n	8000e4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8000e44:	2301      	movs	r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	e001      	b.n	8000e4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d11b      	bne.n	8000e8c <vTaskStartScheduler+0x8c>
	__asm volatile
 8000e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e58:	f383 8811 	msr	BASEPRI, r3
 8000e5c:	f3bf 8f6f 	isb	sy
 8000e60:	f3bf 8f4f 	dsb	sy
 8000e64:	613b      	str	r3, [r7, #16]
}
 8000e66:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <vTaskStartScheduler+0xc0>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	334c      	adds	r3, #76	; 0x4c
 8000e6e:	4a15      	ldr	r2, [pc, #84]	; (8000ec4 <vTaskStartScheduler+0xc4>)
 8000e70:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <vTaskStartScheduler+0xc8>)
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <vTaskStartScheduler+0xcc>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <vTaskStartScheduler+0xd0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000e86:	f000 fbaf 	bl	80015e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000e8a:	e00e      	b.n	8000eaa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e92:	d10a      	bne.n	8000eaa <vTaskStartScheduler+0xaa>
	__asm volatile
 8000e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e98:	f383 8811 	msr	BASEPRI, r3
 8000e9c:	f3bf 8f6f 	isb	sy
 8000ea0:	f3bf 8f4f 	dsb	sy
 8000ea4:	60fb      	str	r3, [r7, #12]
}
 8000ea6:	bf00      	nop
 8000ea8:	e7fe      	b.n	8000ea8 <vTaskStartScheduler+0xa8>
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	0800279c 	.word	0x0800279c
 8000eb8:	08001269 	.word	0x08001269
 8000ebc:	20000474 	.word	0x20000474
 8000ec0:	20000350 	.word	0x20000350
 8000ec4:	20000010 	.word	0x20000010
 8000ec8:	20000470 	.word	0x20000470
 8000ecc:	2000045c 	.word	0x2000045c
 8000ed0:	20000454 	.word	0x20000454

08000ed4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <vTaskSuspendAll+0x18>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	4a03      	ldr	r2, [pc, #12]	; (8000eec <vTaskSuspendAll+0x18>)
 8000ee0:	6013      	str	r3, [r2, #0]
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000478 	.word	0x20000478

08000ef0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000efe:	4b41      	ldr	r3, [pc, #260]	; (8001004 <xTaskResumeAll+0x114>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10a      	bne.n	8000f1c <xTaskResumeAll+0x2c>
	__asm volatile
 8000f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f0a:	f383 8811 	msr	BASEPRI, r3
 8000f0e:	f3bf 8f6f 	isb	sy
 8000f12:	f3bf 8f4f 	dsb	sy
 8000f16:	603b      	str	r3, [r7, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	e7fe      	b.n	8000f1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000f1c:	f000 fbd6 	bl	80016cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000f20:	4b38      	ldr	r3, [pc, #224]	; (8001004 <xTaskResumeAll+0x114>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	3b01      	subs	r3, #1
 8000f26:	4a37      	ldr	r2, [pc, #220]	; (8001004 <xTaskResumeAll+0x114>)
 8000f28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000f2a:	4b36      	ldr	r3, [pc, #216]	; (8001004 <xTaskResumeAll+0x114>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d161      	bne.n	8000ff6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000f32:	4b35      	ldr	r3, [pc, #212]	; (8001008 <xTaskResumeAll+0x118>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d05d      	beq.n	8000ff6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000f3a:	e02e      	b.n	8000f9a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8000f3c:	4b33      	ldr	r3, [pc, #204]	; (800100c <xTaskResumeAll+0x11c>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	3318      	adds	r3, #24
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fd5b 	bl	8000a04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	3304      	adds	r3, #4
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fd56 	bl	8000a04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <xTaskResumeAll+0x120>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	4a2a      	ldr	r2, [pc, #168]	; (8001010 <xTaskResumeAll+0x120>)
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f6e:	4613      	mov	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4a27      	ldr	r2, [pc, #156]	; (8001014 <xTaskResumeAll+0x124>)
 8000f78:	441a      	add	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4610      	mov	r0, r2
 8000f82:	f7ff fce4 	bl	800094e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f8a:	4b23      	ldr	r3, [pc, #140]	; (8001018 <xTaskResumeAll+0x128>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d302      	bcc.n	8000f9a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8000f94:	4b21      	ldr	r3, [pc, #132]	; (800101c <xTaskResumeAll+0x12c>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	; (800100c <xTaskResumeAll+0x11c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1cc      	bne.n	8000f3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000fa8:	f000 fa18 	bl	80013dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8000fac:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <xTaskResumeAll+0x130>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d010      	beq.n	8000fda <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000fb8:	f000 f836 	bl	8001028 <xTaskIncrementTick>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d002      	beq.n	8000fc8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <xTaskResumeAll+0x12c>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f1      	bne.n	8000fb8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <xTaskResumeAll+0x130>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <xTaskResumeAll+0x12c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d009      	beq.n	8000ff6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <xTaskResumeAll+0x134>)
 8000fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	f3bf 8f4f 	dsb	sy
 8000ff2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000ff6:	f000 fb99 	bl	800172c <vPortExitCritical>

	return xAlreadyYielded;
 8000ffa:	68bb      	ldr	r3, [r7, #8]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000478 	.word	0x20000478
 8001008:	20000450 	.word	0x20000450
 800100c:	20000410 	.word	0x20000410
 8001010:	20000458 	.word	0x20000458
 8001014:	20000354 	.word	0x20000354
 8001018:	20000350 	.word	0x20000350
 800101c:	20000464 	.word	0x20000464
 8001020:	20000460 	.word	0x20000460
 8001024:	e000ed04 	.word	0xe000ed04

08001028 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001032:	4b51      	ldr	r3, [pc, #324]	; (8001178 <xTaskIncrementTick+0x150>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	f040 808d 	bne.w	8001156 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800103c:	4b4f      	ldr	r3, [pc, #316]	; (800117c <xTaskIncrementTick+0x154>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001044:	4a4d      	ldr	r2, [pc, #308]	; (800117c <xTaskIncrementTick+0x154>)
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d120      	bne.n	8001092 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001050:	4b4b      	ldr	r3, [pc, #300]	; (8001180 <xTaskIncrementTick+0x158>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00a      	beq.n	8001070 <xTaskIncrementTick+0x48>
	__asm volatile
 800105a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800105e:	f383 8811 	msr	BASEPRI, r3
 8001062:	f3bf 8f6f 	isb	sy
 8001066:	f3bf 8f4f 	dsb	sy
 800106a:	603b      	str	r3, [r7, #0]
}
 800106c:	bf00      	nop
 800106e:	e7fe      	b.n	800106e <xTaskIncrementTick+0x46>
 8001070:	4b43      	ldr	r3, [pc, #268]	; (8001180 <xTaskIncrementTick+0x158>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b43      	ldr	r3, [pc, #268]	; (8001184 <xTaskIncrementTick+0x15c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a41      	ldr	r2, [pc, #260]	; (8001180 <xTaskIncrementTick+0x158>)
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	4a41      	ldr	r2, [pc, #260]	; (8001184 <xTaskIncrementTick+0x15c>)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b40      	ldr	r3, [pc, #256]	; (8001188 <xTaskIncrementTick+0x160>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	4a3f      	ldr	r2, [pc, #252]	; (8001188 <xTaskIncrementTick+0x160>)
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	f000 f9a5 	bl	80013dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001092:	4b3e      	ldr	r3, [pc, #248]	; (800118c <xTaskIncrementTick+0x164>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	429a      	cmp	r2, r3
 800109a:	d34d      	bcc.n	8001138 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800109c:	4b38      	ldr	r3, [pc, #224]	; (8001180 <xTaskIncrementTick+0x158>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <xTaskIncrementTick+0x82>
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <xTaskIncrementTick+0x84>
 80010aa:	2300      	movs	r3, #0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d004      	beq.n	80010ba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80010b0:	4b36      	ldr	r3, [pc, #216]	; (800118c <xTaskIncrementTick+0x164>)
 80010b2:	f04f 32ff 	mov.w	r2, #4294967295
 80010b6:	601a      	str	r2, [r3, #0]
					break;
 80010b8:	e03e      	b.n	8001138 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80010ba:	4b31      	ldr	r3, [pc, #196]	; (8001180 <xTaskIncrementTick+0x158>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d203      	bcs.n	80010da <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80010d2:	4a2e      	ldr	r2, [pc, #184]	; (800118c <xTaskIncrementTick+0x164>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6013      	str	r3, [r2, #0]
						break;
 80010d8:	e02e      	b.n	8001138 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	3304      	adds	r3, #4
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fc90 	bl	8000a04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d004      	beq.n	80010f6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	3318      	adds	r3, #24
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fc87 	bl	8000a04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fa:	2201      	movs	r2, #1
 80010fc:	409a      	lsls	r2, r3
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <xTaskIncrementTick+0x168>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4313      	orrs	r3, r2
 8001104:	4a22      	ldr	r2, [pc, #136]	; (8001190 <xTaskIncrementTick+0x168>)
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4a1f      	ldr	r2, [pc, #124]	; (8001194 <xTaskIncrementTick+0x16c>)
 8001116:	441a      	add	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	3304      	adds	r3, #4
 800111c:	4619      	mov	r1, r3
 800111e:	4610      	mov	r0, r2
 8001120:	f7ff fc15 	bl	800094e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <xTaskIncrementTick+0x170>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112e:	429a      	cmp	r2, r3
 8001130:	d3b4      	bcc.n	800109c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001132:	2301      	movs	r3, #1
 8001134:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001136:	e7b1      	b.n	800109c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <xTaskIncrementTick+0x170>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800113e:	4915      	ldr	r1, [pc, #84]	; (8001194 <xTaskIncrementTick+0x16c>)
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d907      	bls.n	8001160 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8001150:	2301      	movs	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	e004      	b.n	8001160 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <xTaskIncrementTick+0x174>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	3301      	adds	r3, #1
 800115c:	4a0f      	ldr	r2, [pc, #60]	; (800119c <xTaskIncrementTick+0x174>)
 800115e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <xTaskIncrementTick+0x178>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8001168:	2301      	movs	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800116c:	697b      	ldr	r3, [r7, #20]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000478 	.word	0x20000478
 800117c:	20000454 	.word	0x20000454
 8001180:	20000408 	.word	0x20000408
 8001184:	2000040c 	.word	0x2000040c
 8001188:	20000468 	.word	0x20000468
 800118c:	20000470 	.word	0x20000470
 8001190:	20000458 	.word	0x20000458
 8001194:	20000354 	.word	0x20000354
 8001198:	20000350 	.word	0x20000350
 800119c:	20000460 	.word	0x20000460
 80011a0:	20000464 	.word	0x20000464

080011a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80011a4:	b480      	push	{r7}
 80011a6:	b087      	sub	sp, #28
 80011a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80011aa:	4b29      	ldr	r3, [pc, #164]	; (8001250 <vTaskSwitchContext+0xac>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80011b2:	4b28      	ldr	r3, [pc, #160]	; (8001254 <vTaskSwitchContext+0xb0>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80011b8:	e044      	b.n	8001244 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80011ba:	4b26      	ldr	r3, [pc, #152]	; (8001254 <vTaskSwitchContext+0xb0>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80011c0:	4b25      	ldr	r3, [pc, #148]	; (8001258 <vTaskSwitchContext+0xb4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	fab3 f383 	clz	r3, r3
 80011cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80011ce:	7afb      	ldrb	r3, [r7, #11]
 80011d0:	f1c3 031f 	rsb	r3, r3, #31
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	4921      	ldr	r1, [pc, #132]	; (800125c <vTaskSwitchContext+0xb8>)
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	440b      	add	r3, r1
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10a      	bne.n	8001200 <vTaskSwitchContext+0x5c>
	__asm volatile
 80011ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ee:	f383 8811 	msr	BASEPRI, r3
 80011f2:	f3bf 8f6f 	isb	sy
 80011f6:	f3bf 8f4f 	dsb	sy
 80011fa:	607b      	str	r3, [r7, #4]
}
 80011fc:	bf00      	nop
 80011fe:	e7fe      	b.n	80011fe <vTaskSwitchContext+0x5a>
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4a14      	ldr	r2, [pc, #80]	; (800125c <vTaskSwitchContext+0xb8>)
 800120c:	4413      	add	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	3308      	adds	r3, #8
 8001222:	429a      	cmp	r2, r3
 8001224:	d104      	bne.n	8001230 <vTaskSwitchContext+0x8c>
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <vTaskSwitchContext+0xbc>)
 8001238:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <vTaskSwitchContext+0xbc>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	334c      	adds	r3, #76	; 0x4c
 8001240:	4a08      	ldr	r2, [pc, #32]	; (8001264 <vTaskSwitchContext+0xc0>)
 8001242:	6013      	str	r3, [r2, #0]
}
 8001244:	bf00      	nop
 8001246:	371c      	adds	r7, #28
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000478 	.word	0x20000478
 8001254:	20000464 	.word	0x20000464
 8001258:	20000458 	.word	0x20000458
 800125c:	20000354 	.word	0x20000354
 8001260:	20000350 	.word	0x20000350
 8001264:	20000010 	.word	0x20000010

08001268 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001270:	f000 f852 	bl	8001318 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <prvIdleTask+0x28>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d9f9      	bls.n	8001270 <prvIdleTask+0x8>
			{
				taskYIELD();
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <prvIdleTask+0x2c>)
 800127e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	f3bf 8f4f 	dsb	sy
 8001288:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800128c:	e7f0      	b.n	8001270 <prvIdleTask+0x8>
 800128e:	bf00      	nop
 8001290:	20000354 	.word	0x20000354
 8001294:	e000ed04 	.word	0xe000ed04

08001298 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	e00c      	b.n	80012be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <prvInitialiseTaskLists+0x60>)
 80012b0:	4413      	add	r3, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fb20 	bl	80008f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3301      	adds	r3, #1
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b06      	cmp	r3, #6
 80012c2:	d9ef      	bls.n	80012a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80012c4:	480d      	ldr	r0, [pc, #52]	; (80012fc <prvInitialiseTaskLists+0x64>)
 80012c6:	f7ff fb17 	bl	80008f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80012ca:	480d      	ldr	r0, [pc, #52]	; (8001300 <prvInitialiseTaskLists+0x68>)
 80012cc:	f7ff fb14 	bl	80008f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80012d0:	480c      	ldr	r0, [pc, #48]	; (8001304 <prvInitialiseTaskLists+0x6c>)
 80012d2:	f7ff fb11 	bl	80008f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80012d6:	480c      	ldr	r0, [pc, #48]	; (8001308 <prvInitialiseTaskLists+0x70>)
 80012d8:	f7ff fb0e 	bl	80008f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <prvInitialiseTaskLists+0x74>)
 80012de:	f7ff fb0b 	bl	80008f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <prvInitialiseTaskLists+0x78>)
 80012e4:	4a05      	ldr	r2, [pc, #20]	; (80012fc <prvInitialiseTaskLists+0x64>)
 80012e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <prvInitialiseTaskLists+0x7c>)
 80012ea:	4a05      	ldr	r2, [pc, #20]	; (8001300 <prvInitialiseTaskLists+0x68>)
 80012ec:	601a      	str	r2, [r3, #0]
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000354 	.word	0x20000354
 80012fc:	200003e0 	.word	0x200003e0
 8001300:	200003f4 	.word	0x200003f4
 8001304:	20000410 	.word	0x20000410
 8001308:	20000424 	.word	0x20000424
 800130c:	2000043c 	.word	0x2000043c
 8001310:	20000408 	.word	0x20000408
 8001314:	2000040c 	.word	0x2000040c

08001318 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800131e:	e019      	b.n	8001354 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001320:	f000 f9d4 	bl	80016cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <prvCheckTasksWaitingTermination+0x50>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3304      	adds	r3, #4
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fb67 	bl	8000a04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <prvCheckTasksWaitingTermination+0x54>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	3b01      	subs	r3, #1
 800133c:	4a0b      	ldr	r2, [pc, #44]	; (800136c <prvCheckTasksWaitingTermination+0x54>)
 800133e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <prvCheckTasksWaitingTermination+0x58>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3b01      	subs	r3, #1
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <prvCheckTasksWaitingTermination+0x58>)
 8001348:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800134a:	f000 f9ef 	bl	800172c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 f810 	bl	8001374 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <prvCheckTasksWaitingTermination+0x58>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1e1      	bne.n	8001320 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000424 	.word	0x20000424
 800136c:	20000450 	.word	0x20000450
 8001370:	20000438 	.word	0x20000438

08001374 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	334c      	adds	r3, #76	; 0x4c
 8001380:	4618      	mov	r0, r3
 8001382:	f000 fe81 	bl	8002088 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d108      	bne.n	80013a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	4618      	mov	r0, r3
 8001396:	f000 fb1f 	bl	80019d8 <vPortFree>
				vPortFree( pxTCB );
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fb1c 	bl	80019d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80013a0:	e018      	b.n	80013d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d103      	bne.n	80013b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 fb13 	bl	80019d8 <vPortFree>
	}
 80013b2:	e00f      	b.n	80013d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d00a      	beq.n	80013d4 <prvDeleteTCB+0x60>
	__asm volatile
 80013be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013c2:	f383 8811 	msr	BASEPRI, r3
 80013c6:	f3bf 8f6f 	isb	sy
 80013ca:	f3bf 8f4f 	dsb	sy
 80013ce:	60fb      	str	r3, [r7, #12]
}
 80013d0:	bf00      	nop
 80013d2:	e7fe      	b.n	80013d2 <prvDeleteTCB+0x5e>
	}
 80013d4:	bf00      	nop
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <prvResetNextTaskUnblockTime+0x40>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <prvResetNextTaskUnblockTime+0x14>
 80013ec:	2301      	movs	r3, #1
 80013ee:	e000      	b.n	80013f2 <prvResetNextTaskUnblockTime+0x16>
 80013f0:	2300      	movs	r3, #0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d004      	beq.n	8001400 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <prvResetNextTaskUnblockTime+0x44>)
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80013fe:	e008      	b.n	8001412 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <prvResetNextTaskUnblockTime+0x40>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <prvResetNextTaskUnblockTime+0x44>)
 8001410:	6013      	str	r3, [r2, #0]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	20000408 	.word	0x20000408
 8001420:	20000470 	.word	0x20000470

08001424 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800142e:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001434:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	3304      	adds	r3, #4
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fae2 	bl	8000a04 <uxListRemove>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10b      	bne.n	800145e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001446:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144c:	2201      	movs	r2, #1
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	4b21      	ldr	r3, [pc, #132]	; (80014dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4013      	ands	r3, r2
 800145a:	4a20      	ldr	r2, [pc, #128]	; (80014dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800145c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001464:	d10a      	bne.n	800147c <prvAddCurrentTaskToDelayedList+0x58>
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d007      	beq.n	800147c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3304      	adds	r3, #4
 8001472:	4619      	mov	r1, r3
 8001474:	481a      	ldr	r0, [pc, #104]	; (80014e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8001476:	f7ff fa6a 	bl	800094e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800147a:	e026      	b.n	80014ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	429a      	cmp	r2, r3
 8001492:	d209      	bcs.n	80014a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3304      	adds	r3, #4
 800149e:	4619      	mov	r1, r3
 80014a0:	4610      	mov	r0, r2
 80014a2:	f7ff fa77 	bl	8000994 <vListInsert>
}
 80014a6:	e010      	b.n	80014ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	3304      	adds	r3, #4
 80014b2:	4619      	mov	r1, r3
 80014b4:	4610      	mov	r0, r2
 80014b6:	f7ff fa6d 	bl	8000994 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d202      	bcs.n	80014ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80014c4:	4a09      	ldr	r2, [pc, #36]	; (80014ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	6013      	str	r3, [r2, #0]
}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000454 	.word	0x20000454
 80014d8:	20000350 	.word	0x20000350
 80014dc:	20000458 	.word	0x20000458
 80014e0:	2000043c 	.word	0x2000043c
 80014e4:	2000040c 	.word	0x2000040c
 80014e8:	20000408 	.word	0x20000408
 80014ec:	20000470 	.word	0x20000470

080014f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	3b04      	subs	r3, #4
 8001500:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3b04      	subs	r3, #4
 800150e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	f023 0201 	bic.w	r2, r3, #1
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	3b04      	subs	r3, #4
 800151e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001520:	4a08      	ldr	r2, [pc, #32]	; (8001544 <pxPortInitialiseStack+0x54>)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3b14      	subs	r3, #20
 800152a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	3b20      	subs	r3, #32
 8001536:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001538:	68fb      	ldr	r3, [r7, #12]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	08001549 	.word	0x08001549

08001548 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <prvTaskExitError+0x54>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155a:	d00a      	beq.n	8001572 <prvTaskExitError+0x2a>
	__asm volatile
 800155c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001560:	f383 8811 	msr	BASEPRI, r3
 8001564:	f3bf 8f6f 	isb	sy
 8001568:	f3bf 8f4f 	dsb	sy
 800156c:	60fb      	str	r3, [r7, #12]
}
 800156e:	bf00      	nop
 8001570:	e7fe      	b.n	8001570 <prvTaskExitError+0x28>
	__asm volatile
 8001572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001576:	f383 8811 	msr	BASEPRI, r3
 800157a:	f3bf 8f6f 	isb	sy
 800157e:	f3bf 8f4f 	dsb	sy
 8001582:	60bb      	str	r3, [r7, #8]
}
 8001584:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001586:	bf00      	nop
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0fc      	beq.n	8001588 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800158e:	bf00      	nop
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	2000000c 	.word	0x2000000c

080015a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <pxCurrentTCBConst2>)
 80015a2:	6819      	ldr	r1, [r3, #0]
 80015a4:	6808      	ldr	r0, [r1, #0]
 80015a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80015aa:	f380 8809 	msr	PSP, r0
 80015ae:	f3bf 8f6f 	isb	sy
 80015b2:	f04f 0000 	mov.w	r0, #0
 80015b6:	f380 8811 	msr	BASEPRI, r0
 80015ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80015be:	4770      	bx	lr

080015c0 <pxCurrentTCBConst2>:
 80015c0:	20000350 	.word	0x20000350
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop

080015c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80015c8:	4806      	ldr	r0, [pc, #24]	; (80015e4 <prvPortStartFirstTask+0x1c>)
 80015ca:	6800      	ldr	r0, [r0, #0]
 80015cc:	6800      	ldr	r0, [r0, #0]
 80015ce:	f380 8808 	msr	MSP, r0
 80015d2:	b662      	cpsie	i
 80015d4:	b661      	cpsie	f
 80015d6:	f3bf 8f4f 	dsb	sy
 80015da:	f3bf 8f6f 	isb	sy
 80015de:	df00      	svc	0
 80015e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80015e2:	bf00      	nop
 80015e4:	e000ed08 	.word	0xe000ed08

080015e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80015ee:	4b32      	ldr	r3, [pc, #200]	; (80016b8 <xPortStartScheduler+0xd0>)
 80015f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	22ff      	movs	r2, #255	; 0xff
 80015fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <xPortStartScheduler+0xd4>)
 8001614:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001616:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <xPortStartScheduler+0xd8>)
 8001618:	2207      	movs	r2, #7
 800161a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800161c:	e009      	b.n	8001632 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800161e:	4b28      	ldr	r3, [pc, #160]	; (80016c0 <xPortStartScheduler+0xd8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	3b01      	subs	r3, #1
 8001624:	4a26      	ldr	r2, [pc, #152]	; (80016c0 <xPortStartScheduler+0xd8>)
 8001626:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	b2db      	uxtb	r3, r3
 8001630:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001632:	78fb      	ldrb	r3, [r7, #3]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163a:	2b80      	cmp	r3, #128	; 0x80
 800163c:	d0ef      	beq.n	800161e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800163e:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <xPortStartScheduler+0xd8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f1c3 0307 	rsb	r3, r3, #7
 8001646:	2b04      	cmp	r3, #4
 8001648:	d00a      	beq.n	8001660 <xPortStartScheduler+0x78>
	__asm volatile
 800164a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800164e:	f383 8811 	msr	BASEPRI, r3
 8001652:	f3bf 8f6f 	isb	sy
 8001656:	f3bf 8f4f 	dsb	sy
 800165a:	60bb      	str	r3, [r7, #8]
}
 800165c:	bf00      	nop
 800165e:	e7fe      	b.n	800165e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001660:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <xPortStartScheduler+0xd8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	4a16      	ldr	r2, [pc, #88]	; (80016c0 <xPortStartScheduler+0xd8>)
 8001668:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <xPortStartScheduler+0xd8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001672:	4a13      	ldr	r2, [pc, #76]	; (80016c0 <xPortStartScheduler+0xd8>)
 8001674:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	b2da      	uxtb	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <xPortStartScheduler+0xdc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <xPortStartScheduler+0xdc>)
 8001684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001688:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <xPortStartScheduler+0xdc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <xPortStartScheduler+0xdc>)
 8001690:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001694:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001696:	f000 f8b9 	bl	800180c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <xPortStartScheduler+0xe0>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80016a0:	f7ff ff92 	bl	80015c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80016a4:	f7ff fd7e 	bl	80011a4 <vTaskSwitchContext>
	prvTaskExitError();
 80016a8:	f7ff ff4e 	bl	8001548 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	e000e400 	.word	0xe000e400
 80016bc:	2000047c 	.word	0x2000047c
 80016c0:	20000480 	.word	0x20000480
 80016c4:	e000ed20 	.word	0xe000ed20
 80016c8:	2000000c 	.word	0x2000000c

080016cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
	__asm volatile
 80016d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016d6:	f383 8811 	msr	BASEPRI, r3
 80016da:	f3bf 8f6f 	isb	sy
 80016de:	f3bf 8f4f 	dsb	sy
 80016e2:	607b      	str	r3, [r7, #4]
}
 80016e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <vPortEnterCritical+0x58>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	3301      	adds	r3, #1
 80016ec:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <vPortEnterCritical+0x58>)
 80016ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <vPortEnterCritical+0x58>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d10f      	bne.n	8001718 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <vPortEnterCritical+0x5c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00a      	beq.n	8001718 <vPortEnterCritical+0x4c>
	__asm volatile
 8001702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001706:	f383 8811 	msr	BASEPRI, r3
 800170a:	f3bf 8f6f 	isb	sy
 800170e:	f3bf 8f4f 	dsb	sy
 8001712:	603b      	str	r3, [r7, #0]
}
 8001714:	bf00      	nop
 8001716:	e7fe      	b.n	8001716 <vPortEnterCritical+0x4a>
	}
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	2000000c 	.word	0x2000000c
 8001728:	e000ed04 	.word	0xe000ed04

0800172c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <vPortExitCritical+0x4c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10a      	bne.n	8001750 <vPortExitCritical+0x24>
	__asm volatile
 800173a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800173e:	f383 8811 	msr	BASEPRI, r3
 8001742:	f3bf 8f6f 	isb	sy
 8001746:	f3bf 8f4f 	dsb	sy
 800174a:	607b      	str	r3, [r7, #4]
}
 800174c:	bf00      	nop
 800174e:	e7fe      	b.n	800174e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <vPortExitCritical+0x4c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	3b01      	subs	r3, #1
 8001756:	4a08      	ldr	r2, [pc, #32]	; (8001778 <vPortExitCritical+0x4c>)
 8001758:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <vPortExitCritical+0x4c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d105      	bne.n	800176e <vPortExitCritical+0x42>
 8001762:	2300      	movs	r3, #0
 8001764:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800176c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	2000000c 	.word	0x2000000c
 800177c:	00000000 	.word	0x00000000

08001780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001780:	f3ef 8009 	mrs	r0, PSP
 8001784:	f3bf 8f6f 	isb	sy
 8001788:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <pxCurrentTCBConst>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001790:	6010      	str	r0, [r2, #0]
 8001792:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001796:	f04f 0050 	mov.w	r0, #80	; 0x50
 800179a:	f380 8811 	msr	BASEPRI, r0
 800179e:	f7ff fd01 	bl	80011a4 <vTaskSwitchContext>
 80017a2:	f04f 0000 	mov.w	r0, #0
 80017a6:	f380 8811 	msr	BASEPRI, r0
 80017aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80017ae:	6819      	ldr	r1, [r3, #0]
 80017b0:	6808      	ldr	r0, [r1, #0]
 80017b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80017b6:	f380 8809 	msr	PSP, r0
 80017ba:	f3bf 8f6f 	isb	sy
 80017be:	4770      	bx	lr

080017c0 <pxCurrentTCBConst>:
 80017c0:	20000350 	.word	0x20000350
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop

080017c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
	__asm volatile
 80017ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017d2:	f383 8811 	msr	BASEPRI, r3
 80017d6:	f3bf 8f6f 	isb	sy
 80017da:	f3bf 8f4f 	dsb	sy
 80017de:	607b      	str	r3, [r7, #4]
}
 80017e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80017e2:	f7ff fc21 	bl	8001028 <xTaskIncrementTick>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <SysTick_Handler+0x40>)
 80017ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	2300      	movs	r3, #0
 80017f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	f383 8811 	msr	BASEPRI, r3
}
 80017fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	e000ed04 	.word	0xe000ed04

0800180c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001810:	4b0a      	ldr	r3, [pc, #40]	; (800183c <vPortSetupTimerInterrupt+0x30>)
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <vPortSetupTimerInterrupt+0x34>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <vPortSetupTimerInterrupt+0x38>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a09      	ldr	r2, [pc, #36]	; (8001848 <vPortSetupTimerInterrupt+0x3c>)
 8001822:	fba2 2303 	umull	r2, r3, r2, r3
 8001826:	099b      	lsrs	r3, r3, #6
 8001828:	4a08      	ldr	r2, [pc, #32]	; (800184c <vPortSetupTimerInterrupt+0x40>)
 800182a:	3b01      	subs	r3, #1
 800182c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800182e:	4b03      	ldr	r3, [pc, #12]	; (800183c <vPortSetupTimerInterrupt+0x30>)
 8001830:	2207      	movs	r2, #7
 8001832:	601a      	str	r2, [r3, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	e000e010 	.word	0xe000e010
 8001840:	e000e018 	.word	0xe000e018
 8001844:	20000008 	.word	0x20000008
 8001848:	10624dd3 	.word	0x10624dd3
 800184c:	e000e014 	.word	0xe000e014

08001850 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800185c:	f7ff fb3a 	bl	8000ed4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001860:	4b58      	ldr	r3, [pc, #352]	; (80019c4 <pvPortMalloc+0x174>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001868:	f000 f910 	bl	8001a8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800186c:	4b56      	ldr	r3, [pc, #344]	; (80019c8 <pvPortMalloc+0x178>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4013      	ands	r3, r2
 8001874:	2b00      	cmp	r3, #0
 8001876:	f040 808e 	bne.w	8001996 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d01d      	beq.n	80018bc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8001880:	2208      	movs	r2, #8
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	2b00      	cmp	r3, #0
 8001890:	d014      	beq.n	80018bc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f023 0307 	bic.w	r3, r3, #7
 8001898:	3308      	adds	r3, #8
 800189a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00a      	beq.n	80018bc <pvPortMalloc+0x6c>
	__asm volatile
 80018a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018aa:	f383 8811 	msr	BASEPRI, r3
 80018ae:	f3bf 8f6f 	isb	sy
 80018b2:	f3bf 8f4f 	dsb	sy
 80018b6:	617b      	str	r3, [r7, #20]
}
 80018b8:	bf00      	nop
 80018ba:	e7fe      	b.n	80018ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d069      	beq.n	8001996 <pvPortMalloc+0x146>
 80018c2:	4b42      	ldr	r3, [pc, #264]	; (80019cc <pvPortMalloc+0x17c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d864      	bhi.n	8001996 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80018cc:	4b40      	ldr	r3, [pc, #256]	; (80019d0 <pvPortMalloc+0x180>)
 80018ce:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80018d0:	4b3f      	ldr	r3, [pc, #252]	; (80019d0 <pvPortMalloc+0x180>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80018d6:	e004      	b.n	80018e2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d903      	bls.n	80018f4 <pvPortMalloc+0xa4>
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1f1      	bne.n	80018d8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80018f4:	4b33      	ldr	r3, [pc, #204]	; (80019c4 <pvPortMalloc+0x174>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d04b      	beq.n	8001996 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2208      	movs	r2, #8
 8001904:	4413      	add	r3, r2
 8001906:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	6a3b      	ldr	r3, [r7, #32]
 800190e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	1ad2      	subs	r2, r2, r3
 8001918:	2308      	movs	r3, #8
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	429a      	cmp	r2, r3
 800191e:	d91f      	bls.n	8001960 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00a      	beq.n	8001948 <pvPortMalloc+0xf8>
	__asm volatile
 8001932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001936:	f383 8811 	msr	BASEPRI, r3
 800193a:	f3bf 8f6f 	isb	sy
 800193e:	f3bf 8f4f 	dsb	sy
 8001942:	613b      	str	r3, [r7, #16]
}
 8001944:	bf00      	nop
 8001946:	e7fe      	b.n	8001946 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	1ad2      	subs	r2, r2, r3
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800195a:	69b8      	ldr	r0, [r7, #24]
 800195c:	f000 f8f8 	bl	8001b50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001960:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <pvPortMalloc+0x17c>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	4a18      	ldr	r2, [pc, #96]	; (80019cc <pvPortMalloc+0x17c>)
 800196c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800196e:	4b17      	ldr	r3, [pc, #92]	; (80019cc <pvPortMalloc+0x17c>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <pvPortMalloc+0x184>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d203      	bcs.n	8001982 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800197a:	4b14      	ldr	r3, [pc, #80]	; (80019cc <pvPortMalloc+0x17c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a15      	ldr	r2, [pc, #84]	; (80019d4 <pvPortMalloc+0x184>)
 8001980:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <pvPortMalloc+0x178>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	431a      	orrs	r2, r3
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001996:	f7ff faab 	bl	8000ef0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00a      	beq.n	80019ba <pvPortMalloc+0x16a>
	__asm volatile
 80019a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019a8:	f383 8811 	msr	BASEPRI, r3
 80019ac:	f3bf 8f6f 	isb	sy
 80019b0:	f3bf 8f4f 	dsb	sy
 80019b4:	60fb      	str	r3, [r7, #12]
}
 80019b6:	bf00      	nop
 80019b8:	e7fe      	b.n	80019b8 <pvPortMalloc+0x168>
	return pvReturn;
 80019ba:	69fb      	ldr	r3, [r7, #28]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3728      	adds	r7, #40	; 0x28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	2000108c 	.word	0x2000108c
 80019c8:	20001098 	.word	0x20001098
 80019cc:	20001090 	.word	0x20001090
 80019d0:	20001084 	.word	0x20001084
 80019d4:	20001094 	.word	0x20001094

080019d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d048      	beq.n	8001a7c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80019ea:	2308      	movs	r3, #8
 80019ec:	425b      	negs	r3, r3
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	4413      	add	r3, r2
 80019f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <vPortFree+0xac>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10a      	bne.n	8001a1c <vPortFree+0x44>
	__asm volatile
 8001a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a0a:	f383 8811 	msr	BASEPRI, r3
 8001a0e:	f3bf 8f6f 	isb	sy
 8001a12:	f3bf 8f4f 	dsb	sy
 8001a16:	60fb      	str	r3, [r7, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	e7fe      	b.n	8001a1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00a      	beq.n	8001a3a <vPortFree+0x62>
	__asm volatile
 8001a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a28:	f383 8811 	msr	BASEPRI, r3
 8001a2c:	f3bf 8f6f 	isb	sy
 8001a30:	f3bf 8f4f 	dsb	sy
 8001a34:	60bb      	str	r3, [r7, #8]
}
 8001a36:	bf00      	nop
 8001a38:	e7fe      	b.n	8001a38 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <vPortFree+0xac>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d019      	beq.n	8001a7c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d115      	bne.n	8001a7c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <vPortFree+0xac>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001a60:	f7ff fa38 	bl	8000ed4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <vPortFree+0xb0>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	4a06      	ldr	r2, [pc, #24]	; (8001a88 <vPortFree+0xb0>)
 8001a70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001a72:	6938      	ldr	r0, [r7, #16]
 8001a74:	f000 f86c 	bl	8001b50 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001a78:	f7ff fa3a 	bl	8000ef0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001a7c:	bf00      	nop
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20001098 	.word	0x20001098
 8001a88:	20001090 	.word	0x20001090

08001a8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001a92:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001a98:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <prvHeapInit+0xac>)
 8001a9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00c      	beq.n	8001ac0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	3307      	adds	r3, #7
 8001aaa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f023 0307 	bic.w	r3, r3, #7
 8001ab2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	4a1f      	ldr	r2, [pc, #124]	; (8001b38 <prvHeapInit+0xac>)
 8001abc:	4413      	add	r3, r2
 8001abe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001ac4:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <prvHeapInit+0xb0>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001aca:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <prvHeapInit+0xb0>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001ad8:	2208      	movs	r2, #8
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f023 0307 	bic.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4a15      	ldr	r2, [pc, #84]	; (8001b40 <prvHeapInit+0xb4>)
 8001aec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <prvHeapInit+0xb4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2200      	movs	r2, #0
 8001af4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <prvHeapInit+0xb4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <prvHeapInit+0xb4>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <prvHeapInit+0xb8>)
 8001b1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4a09      	ldr	r2, [pc, #36]	; (8001b48 <prvHeapInit+0xbc>)
 8001b22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <prvHeapInit+0xc0>)
 8001b26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b2a:	601a      	str	r2, [r3, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000484 	.word	0x20000484
 8001b3c:	20001084 	.word	0x20001084
 8001b40:	2000108c 	.word	0x2000108c
 8001b44:	20001094 	.word	0x20001094
 8001b48:	20001090 	.word	0x20001090
 8001b4c:	20001098 	.word	0x20001098

08001b50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001b58:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <prvInsertBlockIntoFreeList+0xa8>)
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	e002      	b.n	8001b64 <prvInsertBlockIntoFreeList+0x14>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d8f7      	bhi.n	8001b5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	4413      	add	r3, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d108      	bne.n	8001b92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	441a      	add	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	441a      	add	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d118      	bne.n	8001bd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <prvInsertBlockIntoFreeList+0xac>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d00d      	beq.n	8001bce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	441a      	add	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	e008      	b.n	8001be0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <prvInsertBlockIntoFreeList+0xac>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e003      	b.n	8001be0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d002      	beq.n	8001bee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001bee:	bf00      	nop
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	20001084 	.word	0x20001084
 8001bfc:	2000108c 	.word	0x2000108c

08001c00 <__errno>:
 8001c00:	4b01      	ldr	r3, [pc, #4]	; (8001c08 <__errno+0x8>)
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000010 	.word	0x20000010

08001c0c <std>:
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	b510      	push	{r4, lr}
 8001c10:	4604      	mov	r4, r0
 8001c12:	e9c0 3300 	strd	r3, r3, [r0]
 8001c16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001c1a:	6083      	str	r3, [r0, #8]
 8001c1c:	8181      	strh	r1, [r0, #12]
 8001c1e:	6643      	str	r3, [r0, #100]	; 0x64
 8001c20:	81c2      	strh	r2, [r0, #14]
 8001c22:	6183      	str	r3, [r0, #24]
 8001c24:	4619      	mov	r1, r3
 8001c26:	2208      	movs	r2, #8
 8001c28:	305c      	adds	r0, #92	; 0x5c
 8001c2a:	f000 f90c 	bl	8001e46 <memset>
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <std+0x38>)
 8001c30:	6224      	str	r4, [r4, #32]
 8001c32:	6263      	str	r3, [r4, #36]	; 0x24
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <std+0x3c>)
 8001c36:	62a3      	str	r3, [r4, #40]	; 0x28
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <std+0x40>)
 8001c3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <std+0x44>)
 8001c3e:	6323      	str	r3, [r4, #48]	; 0x30
 8001c40:	bd10      	pop	{r4, pc}
 8001c42:	bf00      	nop
 8001c44:	08002161 	.word	0x08002161
 8001c48:	08002183 	.word	0x08002183
 8001c4c:	080021bb 	.word	0x080021bb
 8001c50:	080021df 	.word	0x080021df

08001c54 <_cleanup_r>:
 8001c54:	4901      	ldr	r1, [pc, #4]	; (8001c5c <_cleanup_r+0x8>)
 8001c56:	f000 b8af 	b.w	8001db8 <_fwalk_reent>
 8001c5a:	bf00      	nop
 8001c5c:	080024b1 	.word	0x080024b1

08001c60 <__sfmoreglue>:
 8001c60:	2268      	movs	r2, #104	; 0x68
 8001c62:	b570      	push	{r4, r5, r6, lr}
 8001c64:	1e4d      	subs	r5, r1, #1
 8001c66:	4355      	muls	r5, r2
 8001c68:	460e      	mov	r6, r1
 8001c6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001c6e:	f000 f913 	bl	8001e98 <_malloc_r>
 8001c72:	4604      	mov	r4, r0
 8001c74:	b140      	cbz	r0, 8001c88 <__sfmoreglue+0x28>
 8001c76:	2100      	movs	r1, #0
 8001c78:	e9c0 1600 	strd	r1, r6, [r0]
 8001c7c:	300c      	adds	r0, #12
 8001c7e:	60a0      	str	r0, [r4, #8]
 8001c80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001c84:	f000 f8df 	bl	8001e46 <memset>
 8001c88:	4620      	mov	r0, r4
 8001c8a:	bd70      	pop	{r4, r5, r6, pc}

08001c8c <__sfp_lock_acquire>:
 8001c8c:	4801      	ldr	r0, [pc, #4]	; (8001c94 <__sfp_lock_acquire+0x8>)
 8001c8e:	f000 b8d8 	b.w	8001e42 <__retarget_lock_acquire_recursive>
 8001c92:	bf00      	nop
 8001c94:	2000109d 	.word	0x2000109d

08001c98 <__sfp_lock_release>:
 8001c98:	4801      	ldr	r0, [pc, #4]	; (8001ca0 <__sfp_lock_release+0x8>)
 8001c9a:	f000 b8d3 	b.w	8001e44 <__retarget_lock_release_recursive>
 8001c9e:	bf00      	nop
 8001ca0:	2000109d 	.word	0x2000109d

08001ca4 <__sinit_lock_acquire>:
 8001ca4:	4801      	ldr	r0, [pc, #4]	; (8001cac <__sinit_lock_acquire+0x8>)
 8001ca6:	f000 b8cc 	b.w	8001e42 <__retarget_lock_acquire_recursive>
 8001caa:	bf00      	nop
 8001cac:	2000109e 	.word	0x2000109e

08001cb0 <__sinit_lock_release>:
 8001cb0:	4801      	ldr	r0, [pc, #4]	; (8001cb8 <__sinit_lock_release+0x8>)
 8001cb2:	f000 b8c7 	b.w	8001e44 <__retarget_lock_release_recursive>
 8001cb6:	bf00      	nop
 8001cb8:	2000109e 	.word	0x2000109e

08001cbc <__sinit>:
 8001cbc:	b510      	push	{r4, lr}
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	f7ff fff0 	bl	8001ca4 <__sinit_lock_acquire>
 8001cc4:	69a3      	ldr	r3, [r4, #24]
 8001cc6:	b11b      	cbz	r3, 8001cd0 <__sinit+0x14>
 8001cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ccc:	f7ff bff0 	b.w	8001cb0 <__sinit_lock_release>
 8001cd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001cd4:	6523      	str	r3, [r4, #80]	; 0x50
 8001cd6:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <__sinit+0x68>)
 8001cd8:	4a13      	ldr	r2, [pc, #76]	; (8001d28 <__sinit+0x6c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	62a2      	str	r2, [r4, #40]	; 0x28
 8001cde:	42a3      	cmp	r3, r4
 8001ce0:	bf08      	it	eq
 8001ce2:	2301      	moveq	r3, #1
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	bf08      	it	eq
 8001ce8:	61a3      	streq	r3, [r4, #24]
 8001cea:	f000 f81f 	bl	8001d2c <__sfp>
 8001cee:	6060      	str	r0, [r4, #4]
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f000 f81b 	bl	8001d2c <__sfp>
 8001cf6:	60a0      	str	r0, [r4, #8]
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	f000 f817 	bl	8001d2c <__sfp>
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2104      	movs	r1, #4
 8001d02:	60e0      	str	r0, [r4, #12]
 8001d04:	6860      	ldr	r0, [r4, #4]
 8001d06:	f7ff ff81 	bl	8001c0c <std>
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	2109      	movs	r1, #9
 8001d0e:	68a0      	ldr	r0, [r4, #8]
 8001d10:	f7ff ff7c 	bl	8001c0c <std>
 8001d14:	2202      	movs	r2, #2
 8001d16:	2112      	movs	r1, #18
 8001d18:	68e0      	ldr	r0, [r4, #12]
 8001d1a:	f7ff ff77 	bl	8001c0c <std>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	61a3      	str	r3, [r4, #24]
 8001d22:	e7d1      	b.n	8001cc8 <__sinit+0xc>
 8001d24:	08002804 	.word	0x08002804
 8001d28:	08001c55 	.word	0x08001c55

08001d2c <__sfp>:
 8001d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d2e:	4607      	mov	r7, r0
 8001d30:	f7ff ffac 	bl	8001c8c <__sfp_lock_acquire>
 8001d34:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <__sfp+0x84>)
 8001d36:	681e      	ldr	r6, [r3, #0]
 8001d38:	69b3      	ldr	r3, [r6, #24]
 8001d3a:	b913      	cbnz	r3, 8001d42 <__sfp+0x16>
 8001d3c:	4630      	mov	r0, r6
 8001d3e:	f7ff ffbd 	bl	8001cbc <__sinit>
 8001d42:	3648      	adds	r6, #72	; 0x48
 8001d44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	d503      	bpl.n	8001d54 <__sfp+0x28>
 8001d4c:	6833      	ldr	r3, [r6, #0]
 8001d4e:	b30b      	cbz	r3, 8001d94 <__sfp+0x68>
 8001d50:	6836      	ldr	r6, [r6, #0]
 8001d52:	e7f7      	b.n	8001d44 <__sfp+0x18>
 8001d54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001d58:	b9d5      	cbnz	r5, 8001d90 <__sfp+0x64>
 8001d5a:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <__sfp+0x88>)
 8001d5c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001d60:	60e3      	str	r3, [r4, #12]
 8001d62:	6665      	str	r5, [r4, #100]	; 0x64
 8001d64:	f000 f86c 	bl	8001e40 <__retarget_lock_init_recursive>
 8001d68:	f7ff ff96 	bl	8001c98 <__sfp_lock_release>
 8001d6c:	2208      	movs	r2, #8
 8001d6e:	4629      	mov	r1, r5
 8001d70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001d74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001d78:	6025      	str	r5, [r4, #0]
 8001d7a:	61a5      	str	r5, [r4, #24]
 8001d7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001d80:	f000 f861 	bl	8001e46 <memset>
 8001d84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001d88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d90:	3468      	adds	r4, #104	; 0x68
 8001d92:	e7d9      	b.n	8001d48 <__sfp+0x1c>
 8001d94:	2104      	movs	r1, #4
 8001d96:	4638      	mov	r0, r7
 8001d98:	f7ff ff62 	bl	8001c60 <__sfmoreglue>
 8001d9c:	4604      	mov	r4, r0
 8001d9e:	6030      	str	r0, [r6, #0]
 8001da0:	2800      	cmp	r0, #0
 8001da2:	d1d5      	bne.n	8001d50 <__sfp+0x24>
 8001da4:	f7ff ff78 	bl	8001c98 <__sfp_lock_release>
 8001da8:	230c      	movs	r3, #12
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	e7ee      	b.n	8001d8c <__sfp+0x60>
 8001dae:	bf00      	nop
 8001db0:	08002804 	.word	0x08002804
 8001db4:	ffff0001 	.word	0xffff0001

08001db8 <_fwalk_reent>:
 8001db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001dbc:	4606      	mov	r6, r0
 8001dbe:	4688      	mov	r8, r1
 8001dc0:	2700      	movs	r7, #0
 8001dc2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001dc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001dca:	f1b9 0901 	subs.w	r9, r9, #1
 8001dce:	d505      	bpl.n	8001ddc <_fwalk_reent+0x24>
 8001dd0:	6824      	ldr	r4, [r4, #0]
 8001dd2:	2c00      	cmp	r4, #0
 8001dd4:	d1f7      	bne.n	8001dc6 <_fwalk_reent+0xe>
 8001dd6:	4638      	mov	r0, r7
 8001dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ddc:	89ab      	ldrh	r3, [r5, #12]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d907      	bls.n	8001df2 <_fwalk_reent+0x3a>
 8001de2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001de6:	3301      	adds	r3, #1
 8001de8:	d003      	beq.n	8001df2 <_fwalk_reent+0x3a>
 8001dea:	4629      	mov	r1, r5
 8001dec:	4630      	mov	r0, r6
 8001dee:	47c0      	blx	r8
 8001df0:	4307      	orrs	r7, r0
 8001df2:	3568      	adds	r5, #104	; 0x68
 8001df4:	e7e9      	b.n	8001dca <_fwalk_reent+0x12>
	...

08001df8 <__libc_init_array>:
 8001df8:	b570      	push	{r4, r5, r6, lr}
 8001dfa:	2600      	movs	r6, #0
 8001dfc:	4d0c      	ldr	r5, [pc, #48]	; (8001e30 <__libc_init_array+0x38>)
 8001dfe:	4c0d      	ldr	r4, [pc, #52]	; (8001e34 <__libc_init_array+0x3c>)
 8001e00:	1b64      	subs	r4, r4, r5
 8001e02:	10a4      	asrs	r4, r4, #2
 8001e04:	42a6      	cmp	r6, r4
 8001e06:	d109      	bne.n	8001e1c <__libc_init_array+0x24>
 8001e08:	f000 fc8e 	bl	8002728 <_init>
 8001e0c:	2600      	movs	r6, #0
 8001e0e:	4d0a      	ldr	r5, [pc, #40]	; (8001e38 <__libc_init_array+0x40>)
 8001e10:	4c0a      	ldr	r4, [pc, #40]	; (8001e3c <__libc_init_array+0x44>)
 8001e12:	1b64      	subs	r4, r4, r5
 8001e14:	10a4      	asrs	r4, r4, #2
 8001e16:	42a6      	cmp	r6, r4
 8001e18:	d105      	bne.n	8001e26 <__libc_init_array+0x2e>
 8001e1a:	bd70      	pop	{r4, r5, r6, pc}
 8001e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e20:	4798      	blx	r3
 8001e22:	3601      	adds	r6, #1
 8001e24:	e7ee      	b.n	8001e04 <__libc_init_array+0xc>
 8001e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e2a:	4798      	blx	r3
 8001e2c:	3601      	adds	r6, #1
 8001e2e:	e7f2      	b.n	8001e16 <__libc_init_array+0x1e>
 8001e30:	08002808 	.word	0x08002808
 8001e34:	08002808 	.word	0x08002808
 8001e38:	08002808 	.word	0x08002808
 8001e3c:	0800280c 	.word	0x0800280c

08001e40 <__retarget_lock_init_recursive>:
 8001e40:	4770      	bx	lr

08001e42 <__retarget_lock_acquire_recursive>:
 8001e42:	4770      	bx	lr

08001e44 <__retarget_lock_release_recursive>:
 8001e44:	4770      	bx	lr

08001e46 <memset>:
 8001e46:	4603      	mov	r3, r0
 8001e48:	4402      	add	r2, r0
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d100      	bne.n	8001e50 <memset+0xa>
 8001e4e:	4770      	bx	lr
 8001e50:	f803 1b01 	strb.w	r1, [r3], #1
 8001e54:	e7f9      	b.n	8001e4a <memset+0x4>
	...

08001e58 <sbrk_aligned>:
 8001e58:	b570      	push	{r4, r5, r6, lr}
 8001e5a:	4e0e      	ldr	r6, [pc, #56]	; (8001e94 <sbrk_aligned+0x3c>)
 8001e5c:	460c      	mov	r4, r1
 8001e5e:	6831      	ldr	r1, [r6, #0]
 8001e60:	4605      	mov	r5, r0
 8001e62:	b911      	cbnz	r1, 8001e6a <sbrk_aligned+0x12>
 8001e64:	f000 f96c 	bl	8002140 <_sbrk_r>
 8001e68:	6030      	str	r0, [r6, #0]
 8001e6a:	4621      	mov	r1, r4
 8001e6c:	4628      	mov	r0, r5
 8001e6e:	f000 f967 	bl	8002140 <_sbrk_r>
 8001e72:	1c43      	adds	r3, r0, #1
 8001e74:	d00a      	beq.n	8001e8c <sbrk_aligned+0x34>
 8001e76:	1cc4      	adds	r4, r0, #3
 8001e78:	f024 0403 	bic.w	r4, r4, #3
 8001e7c:	42a0      	cmp	r0, r4
 8001e7e:	d007      	beq.n	8001e90 <sbrk_aligned+0x38>
 8001e80:	1a21      	subs	r1, r4, r0
 8001e82:	4628      	mov	r0, r5
 8001e84:	f000 f95c 	bl	8002140 <_sbrk_r>
 8001e88:	3001      	adds	r0, #1
 8001e8a:	d101      	bne.n	8001e90 <sbrk_aligned+0x38>
 8001e8c:	f04f 34ff 	mov.w	r4, #4294967295
 8001e90:	4620      	mov	r0, r4
 8001e92:	bd70      	pop	{r4, r5, r6, pc}
 8001e94:	200010a4 	.word	0x200010a4

08001e98 <_malloc_r>:
 8001e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e9c:	1ccd      	adds	r5, r1, #3
 8001e9e:	f025 0503 	bic.w	r5, r5, #3
 8001ea2:	3508      	adds	r5, #8
 8001ea4:	2d0c      	cmp	r5, #12
 8001ea6:	bf38      	it	cc
 8001ea8:	250c      	movcc	r5, #12
 8001eaa:	2d00      	cmp	r5, #0
 8001eac:	4607      	mov	r7, r0
 8001eae:	db01      	blt.n	8001eb4 <_malloc_r+0x1c>
 8001eb0:	42a9      	cmp	r1, r5
 8001eb2:	d905      	bls.n	8001ec0 <_malloc_r+0x28>
 8001eb4:	230c      	movs	r3, #12
 8001eb6:	2600      	movs	r6, #0
 8001eb8:	603b      	str	r3, [r7, #0]
 8001eba:	4630      	mov	r0, r6
 8001ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ec0:	4e2e      	ldr	r6, [pc, #184]	; (8001f7c <_malloc_r+0xe4>)
 8001ec2:	f000 fba9 	bl	8002618 <__malloc_lock>
 8001ec6:	6833      	ldr	r3, [r6, #0]
 8001ec8:	461c      	mov	r4, r3
 8001eca:	bb34      	cbnz	r4, 8001f1a <_malloc_r+0x82>
 8001ecc:	4629      	mov	r1, r5
 8001ece:	4638      	mov	r0, r7
 8001ed0:	f7ff ffc2 	bl	8001e58 <sbrk_aligned>
 8001ed4:	1c43      	adds	r3, r0, #1
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	d14d      	bne.n	8001f76 <_malloc_r+0xde>
 8001eda:	6834      	ldr	r4, [r6, #0]
 8001edc:	4626      	mov	r6, r4
 8001ede:	2e00      	cmp	r6, #0
 8001ee0:	d140      	bne.n	8001f64 <_malloc_r+0xcc>
 8001ee2:	6823      	ldr	r3, [r4, #0]
 8001ee4:	4631      	mov	r1, r6
 8001ee6:	4638      	mov	r0, r7
 8001ee8:	eb04 0803 	add.w	r8, r4, r3
 8001eec:	f000 f928 	bl	8002140 <_sbrk_r>
 8001ef0:	4580      	cmp	r8, r0
 8001ef2:	d13a      	bne.n	8001f6a <_malloc_r+0xd2>
 8001ef4:	6821      	ldr	r1, [r4, #0]
 8001ef6:	3503      	adds	r5, #3
 8001ef8:	1a6d      	subs	r5, r5, r1
 8001efa:	f025 0503 	bic.w	r5, r5, #3
 8001efe:	3508      	adds	r5, #8
 8001f00:	2d0c      	cmp	r5, #12
 8001f02:	bf38      	it	cc
 8001f04:	250c      	movcc	r5, #12
 8001f06:	4638      	mov	r0, r7
 8001f08:	4629      	mov	r1, r5
 8001f0a:	f7ff ffa5 	bl	8001e58 <sbrk_aligned>
 8001f0e:	3001      	adds	r0, #1
 8001f10:	d02b      	beq.n	8001f6a <_malloc_r+0xd2>
 8001f12:	6823      	ldr	r3, [r4, #0]
 8001f14:	442b      	add	r3, r5
 8001f16:	6023      	str	r3, [r4, #0]
 8001f18:	e00e      	b.n	8001f38 <_malloc_r+0xa0>
 8001f1a:	6822      	ldr	r2, [r4, #0]
 8001f1c:	1b52      	subs	r2, r2, r5
 8001f1e:	d41e      	bmi.n	8001f5e <_malloc_r+0xc6>
 8001f20:	2a0b      	cmp	r2, #11
 8001f22:	d916      	bls.n	8001f52 <_malloc_r+0xba>
 8001f24:	1961      	adds	r1, r4, r5
 8001f26:	42a3      	cmp	r3, r4
 8001f28:	6025      	str	r5, [r4, #0]
 8001f2a:	bf18      	it	ne
 8001f2c:	6059      	strne	r1, [r3, #4]
 8001f2e:	6863      	ldr	r3, [r4, #4]
 8001f30:	bf08      	it	eq
 8001f32:	6031      	streq	r1, [r6, #0]
 8001f34:	5162      	str	r2, [r4, r5]
 8001f36:	604b      	str	r3, [r1, #4]
 8001f38:	4638      	mov	r0, r7
 8001f3a:	f104 060b 	add.w	r6, r4, #11
 8001f3e:	f000 fb71 	bl	8002624 <__malloc_unlock>
 8001f42:	f026 0607 	bic.w	r6, r6, #7
 8001f46:	1d23      	adds	r3, r4, #4
 8001f48:	1af2      	subs	r2, r6, r3
 8001f4a:	d0b6      	beq.n	8001eba <_malloc_r+0x22>
 8001f4c:	1b9b      	subs	r3, r3, r6
 8001f4e:	50a3      	str	r3, [r4, r2]
 8001f50:	e7b3      	b.n	8001eba <_malloc_r+0x22>
 8001f52:	6862      	ldr	r2, [r4, #4]
 8001f54:	42a3      	cmp	r3, r4
 8001f56:	bf0c      	ite	eq
 8001f58:	6032      	streq	r2, [r6, #0]
 8001f5a:	605a      	strne	r2, [r3, #4]
 8001f5c:	e7ec      	b.n	8001f38 <_malloc_r+0xa0>
 8001f5e:	4623      	mov	r3, r4
 8001f60:	6864      	ldr	r4, [r4, #4]
 8001f62:	e7b2      	b.n	8001eca <_malloc_r+0x32>
 8001f64:	4634      	mov	r4, r6
 8001f66:	6876      	ldr	r6, [r6, #4]
 8001f68:	e7b9      	b.n	8001ede <_malloc_r+0x46>
 8001f6a:	230c      	movs	r3, #12
 8001f6c:	4638      	mov	r0, r7
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	f000 fb58 	bl	8002624 <__malloc_unlock>
 8001f74:	e7a1      	b.n	8001eba <_malloc_r+0x22>
 8001f76:	6025      	str	r5, [r4, #0]
 8001f78:	e7de      	b.n	8001f38 <_malloc_r+0xa0>
 8001f7a:	bf00      	nop
 8001f7c:	200010a0 	.word	0x200010a0

08001f80 <_puts_r>:
 8001f80:	b570      	push	{r4, r5, r6, lr}
 8001f82:	460e      	mov	r6, r1
 8001f84:	4605      	mov	r5, r0
 8001f86:	b118      	cbz	r0, 8001f90 <_puts_r+0x10>
 8001f88:	6983      	ldr	r3, [r0, #24]
 8001f8a:	b90b      	cbnz	r3, 8001f90 <_puts_r+0x10>
 8001f8c:	f7ff fe96 	bl	8001cbc <__sinit>
 8001f90:	69ab      	ldr	r3, [r5, #24]
 8001f92:	68ac      	ldr	r4, [r5, #8]
 8001f94:	b913      	cbnz	r3, 8001f9c <_puts_r+0x1c>
 8001f96:	4628      	mov	r0, r5
 8001f98:	f7ff fe90 	bl	8001cbc <__sinit>
 8001f9c:	4b2c      	ldr	r3, [pc, #176]	; (8002050 <_puts_r+0xd0>)
 8001f9e:	429c      	cmp	r4, r3
 8001fa0:	d120      	bne.n	8001fe4 <_puts_r+0x64>
 8001fa2:	686c      	ldr	r4, [r5, #4]
 8001fa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001fa6:	07db      	lsls	r3, r3, #31
 8001fa8:	d405      	bmi.n	8001fb6 <_puts_r+0x36>
 8001faa:	89a3      	ldrh	r3, [r4, #12]
 8001fac:	0598      	lsls	r0, r3, #22
 8001fae:	d402      	bmi.n	8001fb6 <_puts_r+0x36>
 8001fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001fb2:	f7ff ff46 	bl	8001e42 <__retarget_lock_acquire_recursive>
 8001fb6:	89a3      	ldrh	r3, [r4, #12]
 8001fb8:	0719      	lsls	r1, r3, #28
 8001fba:	d51d      	bpl.n	8001ff8 <_puts_r+0x78>
 8001fbc:	6923      	ldr	r3, [r4, #16]
 8001fbe:	b1db      	cbz	r3, 8001ff8 <_puts_r+0x78>
 8001fc0:	3e01      	subs	r6, #1
 8001fc2:	68a3      	ldr	r3, [r4, #8]
 8001fc4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	60a3      	str	r3, [r4, #8]
 8001fcc:	bb39      	cbnz	r1, 800201e <_puts_r+0x9e>
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	da38      	bge.n	8002044 <_puts_r+0xc4>
 8001fd2:	4622      	mov	r2, r4
 8001fd4:	210a      	movs	r1, #10
 8001fd6:	4628      	mov	r0, r5
 8001fd8:	f000 f906 	bl	80021e8 <__swbuf_r>
 8001fdc:	3001      	adds	r0, #1
 8001fde:	d011      	beq.n	8002004 <_puts_r+0x84>
 8001fe0:	250a      	movs	r5, #10
 8001fe2:	e011      	b.n	8002008 <_puts_r+0x88>
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <_puts_r+0xd4>)
 8001fe6:	429c      	cmp	r4, r3
 8001fe8:	d101      	bne.n	8001fee <_puts_r+0x6e>
 8001fea:	68ac      	ldr	r4, [r5, #8]
 8001fec:	e7da      	b.n	8001fa4 <_puts_r+0x24>
 8001fee:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <_puts_r+0xd8>)
 8001ff0:	429c      	cmp	r4, r3
 8001ff2:	bf08      	it	eq
 8001ff4:	68ec      	ldreq	r4, [r5, #12]
 8001ff6:	e7d5      	b.n	8001fa4 <_puts_r+0x24>
 8001ff8:	4621      	mov	r1, r4
 8001ffa:	4628      	mov	r0, r5
 8001ffc:	f000 f958 	bl	80022b0 <__swsetup_r>
 8002000:	2800      	cmp	r0, #0
 8002002:	d0dd      	beq.n	8001fc0 <_puts_r+0x40>
 8002004:	f04f 35ff 	mov.w	r5, #4294967295
 8002008:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800200a:	07da      	lsls	r2, r3, #31
 800200c:	d405      	bmi.n	800201a <_puts_r+0x9a>
 800200e:	89a3      	ldrh	r3, [r4, #12]
 8002010:	059b      	lsls	r3, r3, #22
 8002012:	d402      	bmi.n	800201a <_puts_r+0x9a>
 8002014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002016:	f7ff ff15 	bl	8001e44 <__retarget_lock_release_recursive>
 800201a:	4628      	mov	r0, r5
 800201c:	bd70      	pop	{r4, r5, r6, pc}
 800201e:	2b00      	cmp	r3, #0
 8002020:	da04      	bge.n	800202c <_puts_r+0xac>
 8002022:	69a2      	ldr	r2, [r4, #24]
 8002024:	429a      	cmp	r2, r3
 8002026:	dc06      	bgt.n	8002036 <_puts_r+0xb6>
 8002028:	290a      	cmp	r1, #10
 800202a:	d004      	beq.n	8002036 <_puts_r+0xb6>
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	6022      	str	r2, [r4, #0]
 8002032:	7019      	strb	r1, [r3, #0]
 8002034:	e7c5      	b.n	8001fc2 <_puts_r+0x42>
 8002036:	4622      	mov	r2, r4
 8002038:	4628      	mov	r0, r5
 800203a:	f000 f8d5 	bl	80021e8 <__swbuf_r>
 800203e:	3001      	adds	r0, #1
 8002040:	d1bf      	bne.n	8001fc2 <_puts_r+0x42>
 8002042:	e7df      	b.n	8002004 <_puts_r+0x84>
 8002044:	250a      	movs	r5, #10
 8002046:	6823      	ldr	r3, [r4, #0]
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	6022      	str	r2, [r4, #0]
 800204c:	701d      	strb	r5, [r3, #0]
 800204e:	e7db      	b.n	8002008 <_puts_r+0x88>
 8002050:	080027c4 	.word	0x080027c4
 8002054:	080027e4 	.word	0x080027e4
 8002058:	080027a4 	.word	0x080027a4

0800205c <puts>:
 800205c:	4b02      	ldr	r3, [pc, #8]	; (8002068 <puts+0xc>)
 800205e:	4601      	mov	r1, r0
 8002060:	6818      	ldr	r0, [r3, #0]
 8002062:	f7ff bf8d 	b.w	8001f80 <_puts_r>
 8002066:	bf00      	nop
 8002068:	20000010 	.word	0x20000010

0800206c <cleanup_glue>:
 800206c:	b538      	push	{r3, r4, r5, lr}
 800206e:	460c      	mov	r4, r1
 8002070:	6809      	ldr	r1, [r1, #0]
 8002072:	4605      	mov	r5, r0
 8002074:	b109      	cbz	r1, 800207a <cleanup_glue+0xe>
 8002076:	f7ff fff9 	bl	800206c <cleanup_glue>
 800207a:	4621      	mov	r1, r4
 800207c:	4628      	mov	r0, r5
 800207e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002082:	f000 bad5 	b.w	8002630 <_free_r>
	...

08002088 <_reclaim_reent>:
 8002088:	4b2c      	ldr	r3, [pc, #176]	; (800213c <_reclaim_reent+0xb4>)
 800208a:	b570      	push	{r4, r5, r6, lr}
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4604      	mov	r4, r0
 8002090:	4283      	cmp	r3, r0
 8002092:	d051      	beq.n	8002138 <_reclaim_reent+0xb0>
 8002094:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002096:	b143      	cbz	r3, 80020aa <_reclaim_reent+0x22>
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d14a      	bne.n	8002134 <_reclaim_reent+0xac>
 800209e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020a0:	6819      	ldr	r1, [r3, #0]
 80020a2:	b111      	cbz	r1, 80020aa <_reclaim_reent+0x22>
 80020a4:	4620      	mov	r0, r4
 80020a6:	f000 fac3 	bl	8002630 <_free_r>
 80020aa:	6961      	ldr	r1, [r4, #20]
 80020ac:	b111      	cbz	r1, 80020b4 <_reclaim_reent+0x2c>
 80020ae:	4620      	mov	r0, r4
 80020b0:	f000 fabe 	bl	8002630 <_free_r>
 80020b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80020b6:	b111      	cbz	r1, 80020be <_reclaim_reent+0x36>
 80020b8:	4620      	mov	r0, r4
 80020ba:	f000 fab9 	bl	8002630 <_free_r>
 80020be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80020c0:	b111      	cbz	r1, 80020c8 <_reclaim_reent+0x40>
 80020c2:	4620      	mov	r0, r4
 80020c4:	f000 fab4 	bl	8002630 <_free_r>
 80020c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80020ca:	b111      	cbz	r1, 80020d2 <_reclaim_reent+0x4a>
 80020cc:	4620      	mov	r0, r4
 80020ce:	f000 faaf 	bl	8002630 <_free_r>
 80020d2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80020d4:	b111      	cbz	r1, 80020dc <_reclaim_reent+0x54>
 80020d6:	4620      	mov	r0, r4
 80020d8:	f000 faaa 	bl	8002630 <_free_r>
 80020dc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80020de:	b111      	cbz	r1, 80020e6 <_reclaim_reent+0x5e>
 80020e0:	4620      	mov	r0, r4
 80020e2:	f000 faa5 	bl	8002630 <_free_r>
 80020e6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80020e8:	b111      	cbz	r1, 80020f0 <_reclaim_reent+0x68>
 80020ea:	4620      	mov	r0, r4
 80020ec:	f000 faa0 	bl	8002630 <_free_r>
 80020f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020f2:	b111      	cbz	r1, 80020fa <_reclaim_reent+0x72>
 80020f4:	4620      	mov	r0, r4
 80020f6:	f000 fa9b 	bl	8002630 <_free_r>
 80020fa:	69a3      	ldr	r3, [r4, #24]
 80020fc:	b1e3      	cbz	r3, 8002138 <_reclaim_reent+0xb0>
 80020fe:	4620      	mov	r0, r4
 8002100:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002102:	4798      	blx	r3
 8002104:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002106:	b1b9      	cbz	r1, 8002138 <_reclaim_reent+0xb0>
 8002108:	4620      	mov	r0, r4
 800210a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800210e:	f7ff bfad 	b.w	800206c <cleanup_glue>
 8002112:	5949      	ldr	r1, [r1, r5]
 8002114:	b941      	cbnz	r1, 8002128 <_reclaim_reent+0xa0>
 8002116:	3504      	adds	r5, #4
 8002118:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800211a:	2d80      	cmp	r5, #128	; 0x80
 800211c:	68d9      	ldr	r1, [r3, #12]
 800211e:	d1f8      	bne.n	8002112 <_reclaim_reent+0x8a>
 8002120:	4620      	mov	r0, r4
 8002122:	f000 fa85 	bl	8002630 <_free_r>
 8002126:	e7ba      	b.n	800209e <_reclaim_reent+0x16>
 8002128:	680e      	ldr	r6, [r1, #0]
 800212a:	4620      	mov	r0, r4
 800212c:	f000 fa80 	bl	8002630 <_free_r>
 8002130:	4631      	mov	r1, r6
 8002132:	e7ef      	b.n	8002114 <_reclaim_reent+0x8c>
 8002134:	2500      	movs	r5, #0
 8002136:	e7ef      	b.n	8002118 <_reclaim_reent+0x90>
 8002138:	bd70      	pop	{r4, r5, r6, pc}
 800213a:	bf00      	nop
 800213c:	20000010 	.word	0x20000010

08002140 <_sbrk_r>:
 8002140:	b538      	push	{r3, r4, r5, lr}
 8002142:	2300      	movs	r3, #0
 8002144:	4d05      	ldr	r5, [pc, #20]	; (800215c <_sbrk_r+0x1c>)
 8002146:	4604      	mov	r4, r0
 8002148:	4608      	mov	r0, r1
 800214a:	602b      	str	r3, [r5, #0]
 800214c:	f7fe faf2 	bl	8000734 <_sbrk>
 8002150:	1c43      	adds	r3, r0, #1
 8002152:	d102      	bne.n	800215a <_sbrk_r+0x1a>
 8002154:	682b      	ldr	r3, [r5, #0]
 8002156:	b103      	cbz	r3, 800215a <_sbrk_r+0x1a>
 8002158:	6023      	str	r3, [r4, #0]
 800215a:	bd38      	pop	{r3, r4, r5, pc}
 800215c:	200010a8 	.word	0x200010a8

08002160 <__sread>:
 8002160:	b510      	push	{r4, lr}
 8002162:	460c      	mov	r4, r1
 8002164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002168:	f000 faaa 	bl	80026c0 <_read_r>
 800216c:	2800      	cmp	r0, #0
 800216e:	bfab      	itete	ge
 8002170:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002172:	89a3      	ldrhlt	r3, [r4, #12]
 8002174:	181b      	addge	r3, r3, r0
 8002176:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800217a:	bfac      	ite	ge
 800217c:	6563      	strge	r3, [r4, #84]	; 0x54
 800217e:	81a3      	strhlt	r3, [r4, #12]
 8002180:	bd10      	pop	{r4, pc}

08002182 <__swrite>:
 8002182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002186:	461f      	mov	r7, r3
 8002188:	898b      	ldrh	r3, [r1, #12]
 800218a:	4605      	mov	r5, r0
 800218c:	05db      	lsls	r3, r3, #23
 800218e:	460c      	mov	r4, r1
 8002190:	4616      	mov	r6, r2
 8002192:	d505      	bpl.n	80021a0 <__swrite+0x1e>
 8002194:	2302      	movs	r3, #2
 8002196:	2200      	movs	r2, #0
 8002198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800219c:	f000 f9c4 	bl	8002528 <_lseek_r>
 80021a0:	89a3      	ldrh	r3, [r4, #12]
 80021a2:	4632      	mov	r2, r6
 80021a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021a8:	81a3      	strh	r3, [r4, #12]
 80021aa:	4628      	mov	r0, r5
 80021ac:	463b      	mov	r3, r7
 80021ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021b6:	f000 b869 	b.w	800228c <_write_r>

080021ba <__sseek>:
 80021ba:	b510      	push	{r4, lr}
 80021bc:	460c      	mov	r4, r1
 80021be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021c2:	f000 f9b1 	bl	8002528 <_lseek_r>
 80021c6:	1c43      	adds	r3, r0, #1
 80021c8:	89a3      	ldrh	r3, [r4, #12]
 80021ca:	bf15      	itete	ne
 80021cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80021ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80021d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80021d6:	81a3      	strheq	r3, [r4, #12]
 80021d8:	bf18      	it	ne
 80021da:	81a3      	strhne	r3, [r4, #12]
 80021dc:	bd10      	pop	{r4, pc}

080021de <__sclose>:
 80021de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021e2:	f000 b8d3 	b.w	800238c <_close_r>
	...

080021e8 <__swbuf_r>:
 80021e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ea:	460e      	mov	r6, r1
 80021ec:	4614      	mov	r4, r2
 80021ee:	4605      	mov	r5, r0
 80021f0:	b118      	cbz	r0, 80021fa <__swbuf_r+0x12>
 80021f2:	6983      	ldr	r3, [r0, #24]
 80021f4:	b90b      	cbnz	r3, 80021fa <__swbuf_r+0x12>
 80021f6:	f7ff fd61 	bl	8001cbc <__sinit>
 80021fa:	4b21      	ldr	r3, [pc, #132]	; (8002280 <__swbuf_r+0x98>)
 80021fc:	429c      	cmp	r4, r3
 80021fe:	d12b      	bne.n	8002258 <__swbuf_r+0x70>
 8002200:	686c      	ldr	r4, [r5, #4]
 8002202:	69a3      	ldr	r3, [r4, #24]
 8002204:	60a3      	str	r3, [r4, #8]
 8002206:	89a3      	ldrh	r3, [r4, #12]
 8002208:	071a      	lsls	r2, r3, #28
 800220a:	d52f      	bpl.n	800226c <__swbuf_r+0x84>
 800220c:	6923      	ldr	r3, [r4, #16]
 800220e:	b36b      	cbz	r3, 800226c <__swbuf_r+0x84>
 8002210:	6923      	ldr	r3, [r4, #16]
 8002212:	6820      	ldr	r0, [r4, #0]
 8002214:	b2f6      	uxtb	r6, r6
 8002216:	1ac0      	subs	r0, r0, r3
 8002218:	6963      	ldr	r3, [r4, #20]
 800221a:	4637      	mov	r7, r6
 800221c:	4283      	cmp	r3, r0
 800221e:	dc04      	bgt.n	800222a <__swbuf_r+0x42>
 8002220:	4621      	mov	r1, r4
 8002222:	4628      	mov	r0, r5
 8002224:	f000 f944 	bl	80024b0 <_fflush_r>
 8002228:	bb30      	cbnz	r0, 8002278 <__swbuf_r+0x90>
 800222a:	68a3      	ldr	r3, [r4, #8]
 800222c:	3001      	adds	r0, #1
 800222e:	3b01      	subs	r3, #1
 8002230:	60a3      	str	r3, [r4, #8]
 8002232:	6823      	ldr	r3, [r4, #0]
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	6022      	str	r2, [r4, #0]
 8002238:	701e      	strb	r6, [r3, #0]
 800223a:	6963      	ldr	r3, [r4, #20]
 800223c:	4283      	cmp	r3, r0
 800223e:	d004      	beq.n	800224a <__swbuf_r+0x62>
 8002240:	89a3      	ldrh	r3, [r4, #12]
 8002242:	07db      	lsls	r3, r3, #31
 8002244:	d506      	bpl.n	8002254 <__swbuf_r+0x6c>
 8002246:	2e0a      	cmp	r6, #10
 8002248:	d104      	bne.n	8002254 <__swbuf_r+0x6c>
 800224a:	4621      	mov	r1, r4
 800224c:	4628      	mov	r0, r5
 800224e:	f000 f92f 	bl	80024b0 <_fflush_r>
 8002252:	b988      	cbnz	r0, 8002278 <__swbuf_r+0x90>
 8002254:	4638      	mov	r0, r7
 8002256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002258:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <__swbuf_r+0x9c>)
 800225a:	429c      	cmp	r4, r3
 800225c:	d101      	bne.n	8002262 <__swbuf_r+0x7a>
 800225e:	68ac      	ldr	r4, [r5, #8]
 8002260:	e7cf      	b.n	8002202 <__swbuf_r+0x1a>
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <__swbuf_r+0xa0>)
 8002264:	429c      	cmp	r4, r3
 8002266:	bf08      	it	eq
 8002268:	68ec      	ldreq	r4, [r5, #12]
 800226a:	e7ca      	b.n	8002202 <__swbuf_r+0x1a>
 800226c:	4621      	mov	r1, r4
 800226e:	4628      	mov	r0, r5
 8002270:	f000 f81e 	bl	80022b0 <__swsetup_r>
 8002274:	2800      	cmp	r0, #0
 8002276:	d0cb      	beq.n	8002210 <__swbuf_r+0x28>
 8002278:	f04f 37ff 	mov.w	r7, #4294967295
 800227c:	e7ea      	b.n	8002254 <__swbuf_r+0x6c>
 800227e:	bf00      	nop
 8002280:	080027c4 	.word	0x080027c4
 8002284:	080027e4 	.word	0x080027e4
 8002288:	080027a4 	.word	0x080027a4

0800228c <_write_r>:
 800228c:	b538      	push	{r3, r4, r5, lr}
 800228e:	4604      	mov	r4, r0
 8002290:	4608      	mov	r0, r1
 8002292:	4611      	mov	r1, r2
 8002294:	2200      	movs	r2, #0
 8002296:	4d05      	ldr	r5, [pc, #20]	; (80022ac <_write_r+0x20>)
 8002298:	602a      	str	r2, [r5, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	f7fe f9fe 	bl	800069c <_write>
 80022a0:	1c43      	adds	r3, r0, #1
 80022a2:	d102      	bne.n	80022aa <_write_r+0x1e>
 80022a4:	682b      	ldr	r3, [r5, #0]
 80022a6:	b103      	cbz	r3, 80022aa <_write_r+0x1e>
 80022a8:	6023      	str	r3, [r4, #0]
 80022aa:	bd38      	pop	{r3, r4, r5, pc}
 80022ac:	200010a8 	.word	0x200010a8

080022b0 <__swsetup_r>:
 80022b0:	4b32      	ldr	r3, [pc, #200]	; (800237c <__swsetup_r+0xcc>)
 80022b2:	b570      	push	{r4, r5, r6, lr}
 80022b4:	681d      	ldr	r5, [r3, #0]
 80022b6:	4606      	mov	r6, r0
 80022b8:	460c      	mov	r4, r1
 80022ba:	b125      	cbz	r5, 80022c6 <__swsetup_r+0x16>
 80022bc:	69ab      	ldr	r3, [r5, #24]
 80022be:	b913      	cbnz	r3, 80022c6 <__swsetup_r+0x16>
 80022c0:	4628      	mov	r0, r5
 80022c2:	f7ff fcfb 	bl	8001cbc <__sinit>
 80022c6:	4b2e      	ldr	r3, [pc, #184]	; (8002380 <__swsetup_r+0xd0>)
 80022c8:	429c      	cmp	r4, r3
 80022ca:	d10f      	bne.n	80022ec <__swsetup_r+0x3c>
 80022cc:	686c      	ldr	r4, [r5, #4]
 80022ce:	89a3      	ldrh	r3, [r4, #12]
 80022d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80022d4:	0719      	lsls	r1, r3, #28
 80022d6:	d42c      	bmi.n	8002332 <__swsetup_r+0x82>
 80022d8:	06dd      	lsls	r5, r3, #27
 80022da:	d411      	bmi.n	8002300 <__swsetup_r+0x50>
 80022dc:	2309      	movs	r3, #9
 80022de:	6033      	str	r3, [r6, #0]
 80022e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80022e4:	f04f 30ff 	mov.w	r0, #4294967295
 80022e8:	81a3      	strh	r3, [r4, #12]
 80022ea:	e03e      	b.n	800236a <__swsetup_r+0xba>
 80022ec:	4b25      	ldr	r3, [pc, #148]	; (8002384 <__swsetup_r+0xd4>)
 80022ee:	429c      	cmp	r4, r3
 80022f0:	d101      	bne.n	80022f6 <__swsetup_r+0x46>
 80022f2:	68ac      	ldr	r4, [r5, #8]
 80022f4:	e7eb      	b.n	80022ce <__swsetup_r+0x1e>
 80022f6:	4b24      	ldr	r3, [pc, #144]	; (8002388 <__swsetup_r+0xd8>)
 80022f8:	429c      	cmp	r4, r3
 80022fa:	bf08      	it	eq
 80022fc:	68ec      	ldreq	r4, [r5, #12]
 80022fe:	e7e6      	b.n	80022ce <__swsetup_r+0x1e>
 8002300:	0758      	lsls	r0, r3, #29
 8002302:	d512      	bpl.n	800232a <__swsetup_r+0x7a>
 8002304:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002306:	b141      	cbz	r1, 800231a <__swsetup_r+0x6a>
 8002308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800230c:	4299      	cmp	r1, r3
 800230e:	d002      	beq.n	8002316 <__swsetup_r+0x66>
 8002310:	4630      	mov	r0, r6
 8002312:	f000 f98d 	bl	8002630 <_free_r>
 8002316:	2300      	movs	r3, #0
 8002318:	6363      	str	r3, [r4, #52]	; 0x34
 800231a:	89a3      	ldrh	r3, [r4, #12]
 800231c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002320:	81a3      	strh	r3, [r4, #12]
 8002322:	2300      	movs	r3, #0
 8002324:	6063      	str	r3, [r4, #4]
 8002326:	6923      	ldr	r3, [r4, #16]
 8002328:	6023      	str	r3, [r4, #0]
 800232a:	89a3      	ldrh	r3, [r4, #12]
 800232c:	f043 0308 	orr.w	r3, r3, #8
 8002330:	81a3      	strh	r3, [r4, #12]
 8002332:	6923      	ldr	r3, [r4, #16]
 8002334:	b94b      	cbnz	r3, 800234a <__swsetup_r+0x9a>
 8002336:	89a3      	ldrh	r3, [r4, #12]
 8002338:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800233c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002340:	d003      	beq.n	800234a <__swsetup_r+0x9a>
 8002342:	4621      	mov	r1, r4
 8002344:	4630      	mov	r0, r6
 8002346:	f000 f927 	bl	8002598 <__smakebuf_r>
 800234a:	89a0      	ldrh	r0, [r4, #12]
 800234c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002350:	f010 0301 	ands.w	r3, r0, #1
 8002354:	d00a      	beq.n	800236c <__swsetup_r+0xbc>
 8002356:	2300      	movs	r3, #0
 8002358:	60a3      	str	r3, [r4, #8]
 800235a:	6963      	ldr	r3, [r4, #20]
 800235c:	425b      	negs	r3, r3
 800235e:	61a3      	str	r3, [r4, #24]
 8002360:	6923      	ldr	r3, [r4, #16]
 8002362:	b943      	cbnz	r3, 8002376 <__swsetup_r+0xc6>
 8002364:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002368:	d1ba      	bne.n	80022e0 <__swsetup_r+0x30>
 800236a:	bd70      	pop	{r4, r5, r6, pc}
 800236c:	0781      	lsls	r1, r0, #30
 800236e:	bf58      	it	pl
 8002370:	6963      	ldrpl	r3, [r4, #20]
 8002372:	60a3      	str	r3, [r4, #8]
 8002374:	e7f4      	b.n	8002360 <__swsetup_r+0xb0>
 8002376:	2000      	movs	r0, #0
 8002378:	e7f7      	b.n	800236a <__swsetup_r+0xba>
 800237a:	bf00      	nop
 800237c:	20000010 	.word	0x20000010
 8002380:	080027c4 	.word	0x080027c4
 8002384:	080027e4 	.word	0x080027e4
 8002388:	080027a4 	.word	0x080027a4

0800238c <_close_r>:
 800238c:	b538      	push	{r3, r4, r5, lr}
 800238e:	2300      	movs	r3, #0
 8002390:	4d05      	ldr	r5, [pc, #20]	; (80023a8 <_close_r+0x1c>)
 8002392:	4604      	mov	r4, r0
 8002394:	4608      	mov	r0, r1
 8002396:	602b      	str	r3, [r5, #0]
 8002398:	f7fe f99c 	bl	80006d4 <_close>
 800239c:	1c43      	adds	r3, r0, #1
 800239e:	d102      	bne.n	80023a6 <_close_r+0x1a>
 80023a0:	682b      	ldr	r3, [r5, #0]
 80023a2:	b103      	cbz	r3, 80023a6 <_close_r+0x1a>
 80023a4:	6023      	str	r3, [r4, #0]
 80023a6:	bd38      	pop	{r3, r4, r5, pc}
 80023a8:	200010a8 	.word	0x200010a8

080023ac <__sflush_r>:
 80023ac:	898a      	ldrh	r2, [r1, #12]
 80023ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023b0:	4605      	mov	r5, r0
 80023b2:	0710      	lsls	r0, r2, #28
 80023b4:	460c      	mov	r4, r1
 80023b6:	d457      	bmi.n	8002468 <__sflush_r+0xbc>
 80023b8:	684b      	ldr	r3, [r1, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	dc04      	bgt.n	80023c8 <__sflush_r+0x1c>
 80023be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	dc01      	bgt.n	80023c8 <__sflush_r+0x1c>
 80023c4:	2000      	movs	r0, #0
 80023c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d0fa      	beq.n	80023c4 <__sflush_r+0x18>
 80023ce:	2300      	movs	r3, #0
 80023d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80023d4:	682f      	ldr	r7, [r5, #0]
 80023d6:	602b      	str	r3, [r5, #0]
 80023d8:	d032      	beq.n	8002440 <__sflush_r+0x94>
 80023da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80023dc:	89a3      	ldrh	r3, [r4, #12]
 80023de:	075a      	lsls	r2, r3, #29
 80023e0:	d505      	bpl.n	80023ee <__sflush_r+0x42>
 80023e2:	6863      	ldr	r3, [r4, #4]
 80023e4:	1ac0      	subs	r0, r0, r3
 80023e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80023e8:	b10b      	cbz	r3, 80023ee <__sflush_r+0x42>
 80023ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023ec:	1ac0      	subs	r0, r0, r3
 80023ee:	2300      	movs	r3, #0
 80023f0:	4602      	mov	r2, r0
 80023f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80023f4:	4628      	mov	r0, r5
 80023f6:	6a21      	ldr	r1, [r4, #32]
 80023f8:	47b0      	blx	r6
 80023fa:	1c43      	adds	r3, r0, #1
 80023fc:	89a3      	ldrh	r3, [r4, #12]
 80023fe:	d106      	bne.n	800240e <__sflush_r+0x62>
 8002400:	6829      	ldr	r1, [r5, #0]
 8002402:	291d      	cmp	r1, #29
 8002404:	d82c      	bhi.n	8002460 <__sflush_r+0xb4>
 8002406:	4a29      	ldr	r2, [pc, #164]	; (80024ac <__sflush_r+0x100>)
 8002408:	40ca      	lsrs	r2, r1
 800240a:	07d6      	lsls	r6, r2, #31
 800240c:	d528      	bpl.n	8002460 <__sflush_r+0xb4>
 800240e:	2200      	movs	r2, #0
 8002410:	6062      	str	r2, [r4, #4]
 8002412:	6922      	ldr	r2, [r4, #16]
 8002414:	04d9      	lsls	r1, r3, #19
 8002416:	6022      	str	r2, [r4, #0]
 8002418:	d504      	bpl.n	8002424 <__sflush_r+0x78>
 800241a:	1c42      	adds	r2, r0, #1
 800241c:	d101      	bne.n	8002422 <__sflush_r+0x76>
 800241e:	682b      	ldr	r3, [r5, #0]
 8002420:	b903      	cbnz	r3, 8002424 <__sflush_r+0x78>
 8002422:	6560      	str	r0, [r4, #84]	; 0x54
 8002424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002426:	602f      	str	r7, [r5, #0]
 8002428:	2900      	cmp	r1, #0
 800242a:	d0cb      	beq.n	80023c4 <__sflush_r+0x18>
 800242c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002430:	4299      	cmp	r1, r3
 8002432:	d002      	beq.n	800243a <__sflush_r+0x8e>
 8002434:	4628      	mov	r0, r5
 8002436:	f000 f8fb 	bl	8002630 <_free_r>
 800243a:	2000      	movs	r0, #0
 800243c:	6360      	str	r0, [r4, #52]	; 0x34
 800243e:	e7c2      	b.n	80023c6 <__sflush_r+0x1a>
 8002440:	6a21      	ldr	r1, [r4, #32]
 8002442:	2301      	movs	r3, #1
 8002444:	4628      	mov	r0, r5
 8002446:	47b0      	blx	r6
 8002448:	1c41      	adds	r1, r0, #1
 800244a:	d1c7      	bne.n	80023dc <__sflush_r+0x30>
 800244c:	682b      	ldr	r3, [r5, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0c4      	beq.n	80023dc <__sflush_r+0x30>
 8002452:	2b1d      	cmp	r3, #29
 8002454:	d001      	beq.n	800245a <__sflush_r+0xae>
 8002456:	2b16      	cmp	r3, #22
 8002458:	d101      	bne.n	800245e <__sflush_r+0xb2>
 800245a:	602f      	str	r7, [r5, #0]
 800245c:	e7b2      	b.n	80023c4 <__sflush_r+0x18>
 800245e:	89a3      	ldrh	r3, [r4, #12]
 8002460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002464:	81a3      	strh	r3, [r4, #12]
 8002466:	e7ae      	b.n	80023c6 <__sflush_r+0x1a>
 8002468:	690f      	ldr	r7, [r1, #16]
 800246a:	2f00      	cmp	r7, #0
 800246c:	d0aa      	beq.n	80023c4 <__sflush_r+0x18>
 800246e:	0793      	lsls	r3, r2, #30
 8002470:	bf18      	it	ne
 8002472:	2300      	movne	r3, #0
 8002474:	680e      	ldr	r6, [r1, #0]
 8002476:	bf08      	it	eq
 8002478:	694b      	ldreq	r3, [r1, #20]
 800247a:	1bf6      	subs	r6, r6, r7
 800247c:	600f      	str	r7, [r1, #0]
 800247e:	608b      	str	r3, [r1, #8]
 8002480:	2e00      	cmp	r6, #0
 8002482:	dd9f      	ble.n	80023c4 <__sflush_r+0x18>
 8002484:	4633      	mov	r3, r6
 8002486:	463a      	mov	r2, r7
 8002488:	4628      	mov	r0, r5
 800248a:	6a21      	ldr	r1, [r4, #32]
 800248c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002490:	47e0      	blx	ip
 8002492:	2800      	cmp	r0, #0
 8002494:	dc06      	bgt.n	80024a4 <__sflush_r+0xf8>
 8002496:	89a3      	ldrh	r3, [r4, #12]
 8002498:	f04f 30ff 	mov.w	r0, #4294967295
 800249c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024a0:	81a3      	strh	r3, [r4, #12]
 80024a2:	e790      	b.n	80023c6 <__sflush_r+0x1a>
 80024a4:	4407      	add	r7, r0
 80024a6:	1a36      	subs	r6, r6, r0
 80024a8:	e7ea      	b.n	8002480 <__sflush_r+0xd4>
 80024aa:	bf00      	nop
 80024ac:	20400001 	.word	0x20400001

080024b0 <_fflush_r>:
 80024b0:	b538      	push	{r3, r4, r5, lr}
 80024b2:	690b      	ldr	r3, [r1, #16]
 80024b4:	4605      	mov	r5, r0
 80024b6:	460c      	mov	r4, r1
 80024b8:	b913      	cbnz	r3, 80024c0 <_fflush_r+0x10>
 80024ba:	2500      	movs	r5, #0
 80024bc:	4628      	mov	r0, r5
 80024be:	bd38      	pop	{r3, r4, r5, pc}
 80024c0:	b118      	cbz	r0, 80024ca <_fflush_r+0x1a>
 80024c2:	6983      	ldr	r3, [r0, #24]
 80024c4:	b90b      	cbnz	r3, 80024ca <_fflush_r+0x1a>
 80024c6:	f7ff fbf9 	bl	8001cbc <__sinit>
 80024ca:	4b14      	ldr	r3, [pc, #80]	; (800251c <_fflush_r+0x6c>)
 80024cc:	429c      	cmp	r4, r3
 80024ce:	d11b      	bne.n	8002508 <_fflush_r+0x58>
 80024d0:	686c      	ldr	r4, [r5, #4]
 80024d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0ef      	beq.n	80024ba <_fflush_r+0xa>
 80024da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80024dc:	07d0      	lsls	r0, r2, #31
 80024de:	d404      	bmi.n	80024ea <_fflush_r+0x3a>
 80024e0:	0599      	lsls	r1, r3, #22
 80024e2:	d402      	bmi.n	80024ea <_fflush_r+0x3a>
 80024e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024e6:	f7ff fcac 	bl	8001e42 <__retarget_lock_acquire_recursive>
 80024ea:	4628      	mov	r0, r5
 80024ec:	4621      	mov	r1, r4
 80024ee:	f7ff ff5d 	bl	80023ac <__sflush_r>
 80024f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024f4:	4605      	mov	r5, r0
 80024f6:	07da      	lsls	r2, r3, #31
 80024f8:	d4e0      	bmi.n	80024bc <_fflush_r+0xc>
 80024fa:	89a3      	ldrh	r3, [r4, #12]
 80024fc:	059b      	lsls	r3, r3, #22
 80024fe:	d4dd      	bmi.n	80024bc <_fflush_r+0xc>
 8002500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002502:	f7ff fc9f 	bl	8001e44 <__retarget_lock_release_recursive>
 8002506:	e7d9      	b.n	80024bc <_fflush_r+0xc>
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <_fflush_r+0x70>)
 800250a:	429c      	cmp	r4, r3
 800250c:	d101      	bne.n	8002512 <_fflush_r+0x62>
 800250e:	68ac      	ldr	r4, [r5, #8]
 8002510:	e7df      	b.n	80024d2 <_fflush_r+0x22>
 8002512:	4b04      	ldr	r3, [pc, #16]	; (8002524 <_fflush_r+0x74>)
 8002514:	429c      	cmp	r4, r3
 8002516:	bf08      	it	eq
 8002518:	68ec      	ldreq	r4, [r5, #12]
 800251a:	e7da      	b.n	80024d2 <_fflush_r+0x22>
 800251c:	080027c4 	.word	0x080027c4
 8002520:	080027e4 	.word	0x080027e4
 8002524:	080027a4 	.word	0x080027a4

08002528 <_lseek_r>:
 8002528:	b538      	push	{r3, r4, r5, lr}
 800252a:	4604      	mov	r4, r0
 800252c:	4608      	mov	r0, r1
 800252e:	4611      	mov	r1, r2
 8002530:	2200      	movs	r2, #0
 8002532:	4d05      	ldr	r5, [pc, #20]	; (8002548 <_lseek_r+0x20>)
 8002534:	602a      	str	r2, [r5, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	f7fe f8f0 	bl	800071c <_lseek>
 800253c:	1c43      	adds	r3, r0, #1
 800253e:	d102      	bne.n	8002546 <_lseek_r+0x1e>
 8002540:	682b      	ldr	r3, [r5, #0]
 8002542:	b103      	cbz	r3, 8002546 <_lseek_r+0x1e>
 8002544:	6023      	str	r3, [r4, #0]
 8002546:	bd38      	pop	{r3, r4, r5, pc}
 8002548:	200010a8 	.word	0x200010a8

0800254c <__swhatbuf_r>:
 800254c:	b570      	push	{r4, r5, r6, lr}
 800254e:	460e      	mov	r6, r1
 8002550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002554:	4614      	mov	r4, r2
 8002556:	2900      	cmp	r1, #0
 8002558:	461d      	mov	r5, r3
 800255a:	b096      	sub	sp, #88	; 0x58
 800255c:	da08      	bge.n	8002570 <__swhatbuf_r+0x24>
 800255e:	2200      	movs	r2, #0
 8002560:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002564:	602a      	str	r2, [r5, #0]
 8002566:	061a      	lsls	r2, r3, #24
 8002568:	d410      	bmi.n	800258c <__swhatbuf_r+0x40>
 800256a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800256e:	e00e      	b.n	800258e <__swhatbuf_r+0x42>
 8002570:	466a      	mov	r2, sp
 8002572:	f000 f8b7 	bl	80026e4 <_fstat_r>
 8002576:	2800      	cmp	r0, #0
 8002578:	dbf1      	blt.n	800255e <__swhatbuf_r+0x12>
 800257a:	9a01      	ldr	r2, [sp, #4]
 800257c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002580:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002584:	425a      	negs	r2, r3
 8002586:	415a      	adcs	r2, r3
 8002588:	602a      	str	r2, [r5, #0]
 800258a:	e7ee      	b.n	800256a <__swhatbuf_r+0x1e>
 800258c:	2340      	movs	r3, #64	; 0x40
 800258e:	2000      	movs	r0, #0
 8002590:	6023      	str	r3, [r4, #0]
 8002592:	b016      	add	sp, #88	; 0x58
 8002594:	bd70      	pop	{r4, r5, r6, pc}
	...

08002598 <__smakebuf_r>:
 8002598:	898b      	ldrh	r3, [r1, #12]
 800259a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800259c:	079d      	lsls	r5, r3, #30
 800259e:	4606      	mov	r6, r0
 80025a0:	460c      	mov	r4, r1
 80025a2:	d507      	bpl.n	80025b4 <__smakebuf_r+0x1c>
 80025a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80025a8:	6023      	str	r3, [r4, #0]
 80025aa:	6123      	str	r3, [r4, #16]
 80025ac:	2301      	movs	r3, #1
 80025ae:	6163      	str	r3, [r4, #20]
 80025b0:	b002      	add	sp, #8
 80025b2:	bd70      	pop	{r4, r5, r6, pc}
 80025b4:	466a      	mov	r2, sp
 80025b6:	ab01      	add	r3, sp, #4
 80025b8:	f7ff ffc8 	bl	800254c <__swhatbuf_r>
 80025bc:	9900      	ldr	r1, [sp, #0]
 80025be:	4605      	mov	r5, r0
 80025c0:	4630      	mov	r0, r6
 80025c2:	f7ff fc69 	bl	8001e98 <_malloc_r>
 80025c6:	b948      	cbnz	r0, 80025dc <__smakebuf_r+0x44>
 80025c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025cc:	059a      	lsls	r2, r3, #22
 80025ce:	d4ef      	bmi.n	80025b0 <__smakebuf_r+0x18>
 80025d0:	f023 0303 	bic.w	r3, r3, #3
 80025d4:	f043 0302 	orr.w	r3, r3, #2
 80025d8:	81a3      	strh	r3, [r4, #12]
 80025da:	e7e3      	b.n	80025a4 <__smakebuf_r+0xc>
 80025dc:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <__smakebuf_r+0x7c>)
 80025de:	62b3      	str	r3, [r6, #40]	; 0x28
 80025e0:	89a3      	ldrh	r3, [r4, #12]
 80025e2:	6020      	str	r0, [r4, #0]
 80025e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e8:	81a3      	strh	r3, [r4, #12]
 80025ea:	9b00      	ldr	r3, [sp, #0]
 80025ec:	6120      	str	r0, [r4, #16]
 80025ee:	6163      	str	r3, [r4, #20]
 80025f0:	9b01      	ldr	r3, [sp, #4]
 80025f2:	b15b      	cbz	r3, 800260c <__smakebuf_r+0x74>
 80025f4:	4630      	mov	r0, r6
 80025f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025fa:	f000 f885 	bl	8002708 <_isatty_r>
 80025fe:	b128      	cbz	r0, 800260c <__smakebuf_r+0x74>
 8002600:	89a3      	ldrh	r3, [r4, #12]
 8002602:	f023 0303 	bic.w	r3, r3, #3
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	81a3      	strh	r3, [r4, #12]
 800260c:	89a0      	ldrh	r0, [r4, #12]
 800260e:	4305      	orrs	r5, r0
 8002610:	81a5      	strh	r5, [r4, #12]
 8002612:	e7cd      	b.n	80025b0 <__smakebuf_r+0x18>
 8002614:	08001c55 	.word	0x08001c55

08002618 <__malloc_lock>:
 8002618:	4801      	ldr	r0, [pc, #4]	; (8002620 <__malloc_lock+0x8>)
 800261a:	f7ff bc12 	b.w	8001e42 <__retarget_lock_acquire_recursive>
 800261e:	bf00      	nop
 8002620:	2000109c 	.word	0x2000109c

08002624 <__malloc_unlock>:
 8002624:	4801      	ldr	r0, [pc, #4]	; (800262c <__malloc_unlock+0x8>)
 8002626:	f7ff bc0d 	b.w	8001e44 <__retarget_lock_release_recursive>
 800262a:	bf00      	nop
 800262c:	2000109c 	.word	0x2000109c

08002630 <_free_r>:
 8002630:	b538      	push	{r3, r4, r5, lr}
 8002632:	4605      	mov	r5, r0
 8002634:	2900      	cmp	r1, #0
 8002636:	d040      	beq.n	80026ba <_free_r+0x8a>
 8002638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800263c:	1f0c      	subs	r4, r1, #4
 800263e:	2b00      	cmp	r3, #0
 8002640:	bfb8      	it	lt
 8002642:	18e4      	addlt	r4, r4, r3
 8002644:	f7ff ffe8 	bl	8002618 <__malloc_lock>
 8002648:	4a1c      	ldr	r2, [pc, #112]	; (80026bc <_free_r+0x8c>)
 800264a:	6813      	ldr	r3, [r2, #0]
 800264c:	b933      	cbnz	r3, 800265c <_free_r+0x2c>
 800264e:	6063      	str	r3, [r4, #4]
 8002650:	6014      	str	r4, [r2, #0]
 8002652:	4628      	mov	r0, r5
 8002654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002658:	f7ff bfe4 	b.w	8002624 <__malloc_unlock>
 800265c:	42a3      	cmp	r3, r4
 800265e:	d908      	bls.n	8002672 <_free_r+0x42>
 8002660:	6820      	ldr	r0, [r4, #0]
 8002662:	1821      	adds	r1, r4, r0
 8002664:	428b      	cmp	r3, r1
 8002666:	bf01      	itttt	eq
 8002668:	6819      	ldreq	r1, [r3, #0]
 800266a:	685b      	ldreq	r3, [r3, #4]
 800266c:	1809      	addeq	r1, r1, r0
 800266e:	6021      	streq	r1, [r4, #0]
 8002670:	e7ed      	b.n	800264e <_free_r+0x1e>
 8002672:	461a      	mov	r2, r3
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	b10b      	cbz	r3, 800267c <_free_r+0x4c>
 8002678:	42a3      	cmp	r3, r4
 800267a:	d9fa      	bls.n	8002672 <_free_r+0x42>
 800267c:	6811      	ldr	r1, [r2, #0]
 800267e:	1850      	adds	r0, r2, r1
 8002680:	42a0      	cmp	r0, r4
 8002682:	d10b      	bne.n	800269c <_free_r+0x6c>
 8002684:	6820      	ldr	r0, [r4, #0]
 8002686:	4401      	add	r1, r0
 8002688:	1850      	adds	r0, r2, r1
 800268a:	4283      	cmp	r3, r0
 800268c:	6011      	str	r1, [r2, #0]
 800268e:	d1e0      	bne.n	8002652 <_free_r+0x22>
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4401      	add	r1, r0
 8002696:	6011      	str	r1, [r2, #0]
 8002698:	6053      	str	r3, [r2, #4]
 800269a:	e7da      	b.n	8002652 <_free_r+0x22>
 800269c:	d902      	bls.n	80026a4 <_free_r+0x74>
 800269e:	230c      	movs	r3, #12
 80026a0:	602b      	str	r3, [r5, #0]
 80026a2:	e7d6      	b.n	8002652 <_free_r+0x22>
 80026a4:	6820      	ldr	r0, [r4, #0]
 80026a6:	1821      	adds	r1, r4, r0
 80026a8:	428b      	cmp	r3, r1
 80026aa:	bf01      	itttt	eq
 80026ac:	6819      	ldreq	r1, [r3, #0]
 80026ae:	685b      	ldreq	r3, [r3, #4]
 80026b0:	1809      	addeq	r1, r1, r0
 80026b2:	6021      	streq	r1, [r4, #0]
 80026b4:	6063      	str	r3, [r4, #4]
 80026b6:	6054      	str	r4, [r2, #4]
 80026b8:	e7cb      	b.n	8002652 <_free_r+0x22>
 80026ba:	bd38      	pop	{r3, r4, r5, pc}
 80026bc:	200010a0 	.word	0x200010a0

080026c0 <_read_r>:
 80026c0:	b538      	push	{r3, r4, r5, lr}
 80026c2:	4604      	mov	r4, r0
 80026c4:	4608      	mov	r0, r1
 80026c6:	4611      	mov	r1, r2
 80026c8:	2200      	movs	r2, #0
 80026ca:	4d05      	ldr	r5, [pc, #20]	; (80026e0 <_read_r+0x20>)
 80026cc:	602a      	str	r2, [r5, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	f7fd ffc7 	bl	8000662 <_read>
 80026d4:	1c43      	adds	r3, r0, #1
 80026d6:	d102      	bne.n	80026de <_read_r+0x1e>
 80026d8:	682b      	ldr	r3, [r5, #0]
 80026da:	b103      	cbz	r3, 80026de <_read_r+0x1e>
 80026dc:	6023      	str	r3, [r4, #0]
 80026de:	bd38      	pop	{r3, r4, r5, pc}
 80026e0:	200010a8 	.word	0x200010a8

080026e4 <_fstat_r>:
 80026e4:	b538      	push	{r3, r4, r5, lr}
 80026e6:	2300      	movs	r3, #0
 80026e8:	4d06      	ldr	r5, [pc, #24]	; (8002704 <_fstat_r+0x20>)
 80026ea:	4604      	mov	r4, r0
 80026ec:	4608      	mov	r0, r1
 80026ee:	4611      	mov	r1, r2
 80026f0:	602b      	str	r3, [r5, #0]
 80026f2:	f7fd fffa 	bl	80006ea <_fstat>
 80026f6:	1c43      	adds	r3, r0, #1
 80026f8:	d102      	bne.n	8002700 <_fstat_r+0x1c>
 80026fa:	682b      	ldr	r3, [r5, #0]
 80026fc:	b103      	cbz	r3, 8002700 <_fstat_r+0x1c>
 80026fe:	6023      	str	r3, [r4, #0]
 8002700:	bd38      	pop	{r3, r4, r5, pc}
 8002702:	bf00      	nop
 8002704:	200010a8 	.word	0x200010a8

08002708 <_isatty_r>:
 8002708:	b538      	push	{r3, r4, r5, lr}
 800270a:	2300      	movs	r3, #0
 800270c:	4d05      	ldr	r5, [pc, #20]	; (8002724 <_isatty_r+0x1c>)
 800270e:	4604      	mov	r4, r0
 8002710:	4608      	mov	r0, r1
 8002712:	602b      	str	r3, [r5, #0]
 8002714:	f7fd fff8 	bl	8000708 <_isatty>
 8002718:	1c43      	adds	r3, r0, #1
 800271a:	d102      	bne.n	8002722 <_isatty_r+0x1a>
 800271c:	682b      	ldr	r3, [r5, #0]
 800271e:	b103      	cbz	r3, 8002722 <_isatty_r+0x1a>
 8002720:	6023      	str	r3, [r4, #0]
 8002722:	bd38      	pop	{r3, r4, r5, pc}
 8002724:	200010a8 	.word	0x200010a8

08002728 <_init>:
 8002728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800272a:	bf00      	nop
 800272c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800272e:	bc08      	pop	{r3}
 8002730:	469e      	mov	lr, r3
 8002732:	4770      	bx	lr

08002734 <_fini>:
 8002734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002736:	bf00      	nop
 8002738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800273a:	bc08      	pop	{r3}
 800273c:	469e      	mov	lr, r3
 800273e:	4770      	bx	lr
